(set-info :status unknown)
(declare-fun mem0 () (_ BitVec 8))
(declare-fun %y () (_ BitVec 16))
(declare-fun %p2 () (_ BitVec 64))
(declare-fun idx () (_ BitVec 64))
(declare-fun %x () (_ BitVec 16))
(declare-fun %p1 () (_ BitVec 64))
(declare-fun |ana_equivalentAddressValues(%p1, %p2)| () (_ BitVec 1))
(assert
 (let (($x21710 (or true true)))
 (let (($x22023 (and (distinct %p2 (_ bv0 64)) true)))
 (let ((?x18598 (ite (and $x22023 $x21710 (= idx (bvadd %p2 (_ bv0 64)))) ((_ extract 7 0) %y) mem0)))
 (let ((?x16205 (ite (and $x22023 $x21710 (= idx (bvadd %p2 (_ bv1 64)))) ((_ extract 15 8) %y) ?x18598)))
 (let ((?x12694 (ite (and (and (distinct %p1 (_ bv0 64)) true) $x21710 (= idx (bvadd %p1 (_ bv0 64)))) ((_ extract 7 0) %x) mem0)))
 (let ((?x18561 (ite (and (and (distinct %p1 (_ bv0 64)) true) $x21710 (= idx (bvadd %p1 (_ bv1 64)))) ((_ extract 15 8) %x) ?x12694)))
 (let (($x17212 (and (distinct %p1 (_ bv0 64)) true)))
 (let ((?x9066 (ite (and $x17212 $x21710 $x22023 $x21710 (= idx (bvadd %p2 (_ bv0 64)))) ((_ extract 7 0) %y) ?x18561)))
 (let ((?x19961 (ite (and $x17212 $x21710 $x22023 $x21710 (= idx (bvadd %p2 (_ bv1 64)))) ((_ extract 15 8) %y) ?x9066)))
 (let (($x2094 (= |ana_equivalentAddressValues(%p1, %p2)| (_ bv1 1))))
 (and (=> $x2094 (= %p1 %p2)) $x2094 (and (distinct ?x19961 ?x16205) true)))))))))))))
(check-sat)
