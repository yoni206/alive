(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun mem0 () (_ BitVec 8))
(declare-fun |ana_MaskedValueIsZero(%B, ((1 << (width(C2) - countLeadingZeros(((C2 - 1) ^ C2)))) - 1))| () (_ BitVec 1))
(declare-fun C2 () (_ BitVec 63))
(declare-fun C1 () (_ BitVec 63))
(declare-fun %B () (_ BitVec 63))
(assert
 (let (($x817 (and (distinct mem0 mem0) true)))
 (let (($x64669 (= |ana_MaskedValueIsZero(%B, ((1 << (width(C2) - countLeadingZeros(((C2 - 1) ^ C2)))) - 1))| (_ bv1 1))))
 (let ((?x27372 (bvsub C2 (_ bv1 63))))
 (let ((?x78364 (bvor ?x27372 C2)))
 (let (($x75145 (and (and (distinct ?x78364 (_ bv0 63)) true) (= (bvand (bvadd ?x78364 (_ bv1 63)) ?x78364) (_ bv0 63)) $x64669)))
 (let (($x80932 (or (= (bvand (bvadd C2 (_ bv1 63)) (bvsub (bvadd C2 (_ bv1 63)) (_ bv1 63))) (_ bv0 63)) $x75145)))
 (let ((?x55394 (bvand C1 C2)))
 (let (($x71157 (= ?x55394 C2)))
 (let ((?x81978 (ite (= ((_ extract 1 1) (bvxor ?x27372 C2)) (_ bv1 1)) (_ bv61 63) (ite (= ((_ extract 0 0) (bvxor ?x27372 C2)) (_ bv1 1)) (_ bv62 63) (_ bv63 63)))))
 (let ((?x82304 (ite (= ((_ extract 3 3) (bvxor ?x27372 C2)) (_ bv1 1)) (_ bv59 63) (ite (= ((_ extract 2 2) (bvxor ?x27372 C2)) (_ bv1 1)) (_ bv60 63) ?x81978))))
 (let ((?x79100 (ite (= ((_ extract 5 5) (bvxor ?x27372 C2)) (_ bv1 1)) (_ bv57 63) (ite (= ((_ extract 4 4) (bvxor ?x27372 C2)) (_ bv1 1)) (_ bv58 63) ?x82304))))
 (let ((?x78187 (ite (= ((_ extract 7 7) (bvxor ?x27372 C2)) (_ bv1 1)) (_ bv55 63) (ite (= ((_ extract 6 6) (bvxor ?x27372 C2)) (_ bv1 1)) (_ bv56 63) ?x79100))))
 (let ((?x82324 (ite (= ((_ extract 9 9) (bvxor ?x27372 C2)) (_ bv1 1)) (_ bv53 63) (ite (= ((_ extract 8 8) (bvxor ?x27372 C2)) (_ bv1 1)) (_ bv54 63) ?x78187))))
 (let ((?x80856 (ite (= ((_ extract 11 11) (bvxor ?x27372 C2)) (_ bv1 1)) (_ bv51 63) (ite (= ((_ extract 10 10) (bvxor ?x27372 C2)) (_ bv1 1)) (_ bv52 63) ?x82324))))
 (let ((?x81868 (ite (= ((_ extract 13 13) (bvxor ?x27372 C2)) (_ bv1 1)) (_ bv49 63) (ite (= ((_ extract 12 12) (bvxor ?x27372 C2)) (_ bv1 1)) (_ bv50 63) ?x80856))))
 (let ((?x80273 (ite (= ((_ extract 15 15) (bvxor ?x27372 C2)) (_ bv1 1)) (_ bv47 63) (ite (= ((_ extract 14 14) (bvxor ?x27372 C2)) (_ bv1 1)) (_ bv48 63) ?x81868))))
 (let ((?x66202 (ite (= ((_ extract 17 17) (bvxor ?x27372 C2)) (_ bv1 1)) (_ bv45 63) (ite (= ((_ extract 16 16) (bvxor ?x27372 C2)) (_ bv1 1)) (_ bv46 63) ?x80273))))
 (let ((?x77870 (ite (= ((_ extract 19 19) (bvxor ?x27372 C2)) (_ bv1 1)) (_ bv43 63) (ite (= ((_ extract 18 18) (bvxor ?x27372 C2)) (_ bv1 1)) (_ bv44 63) ?x66202))))
 (let ((?x68050 (ite (= ((_ extract 21 21) (bvxor ?x27372 C2)) (_ bv1 1)) (_ bv41 63) (ite (= ((_ extract 20 20) (bvxor ?x27372 C2)) (_ bv1 1)) (_ bv42 63) ?x77870))))
 (let ((?x75304 (ite (= ((_ extract 23 23) (bvxor ?x27372 C2)) (_ bv1 1)) (_ bv39 63) (ite (= ((_ extract 22 22) (bvxor ?x27372 C2)) (_ bv1 1)) (_ bv40 63) ?x68050))))
 (let ((?x82516 (ite (= ((_ extract 25 25) (bvxor ?x27372 C2)) (_ bv1 1)) (_ bv37 63) (ite (= ((_ extract 24 24) (bvxor ?x27372 C2)) (_ bv1 1)) (_ bv38 63) ?x75304))))
 (let ((?x81172 (ite (= ((_ extract 27 27) (bvxor ?x27372 C2)) (_ bv1 1)) (_ bv35 63) (ite (= ((_ extract 26 26) (bvxor ?x27372 C2)) (_ bv1 1)) (_ bv36 63) ?x82516))))
 (let ((?x74685 (ite (= ((_ extract 29 29) (bvxor ?x27372 C2)) (_ bv1 1)) (_ bv33 63) (ite (= ((_ extract 28 28) (bvxor ?x27372 C2)) (_ bv1 1)) (_ bv34 63) ?x81172))))
 (let ((?x80959 (ite (= ((_ extract 31 31) (bvxor ?x27372 C2)) (_ bv1 1)) (_ bv31 63) (ite (= ((_ extract 30 30) (bvxor ?x27372 C2)) (_ bv1 1)) (_ bv32 63) ?x74685))))
 (let ((?x76449 (ite (= ((_ extract 33 33) (bvxor ?x27372 C2)) (_ bv1 1)) (_ bv29 63) (ite (= ((_ extract 32 32) (bvxor ?x27372 C2)) (_ bv1 1)) (_ bv30 63) ?x80959))))
 (let ((?x75899 (ite (= ((_ extract 35 35) (bvxor ?x27372 C2)) (_ bv1 1)) (_ bv27 63) (ite (= ((_ extract 34 34) (bvxor ?x27372 C2)) (_ bv1 1)) (_ bv28 63) ?x76449))))
 (let ((?x79411 (ite (= ((_ extract 37 37) (bvxor ?x27372 C2)) (_ bv1 1)) (_ bv25 63) (ite (= ((_ extract 36 36) (bvxor ?x27372 C2)) (_ bv1 1)) (_ bv26 63) ?x75899))))
 (let ((?x82317 (ite (= ((_ extract 39 39) (bvxor ?x27372 C2)) (_ bv1 1)) (_ bv23 63) (ite (= ((_ extract 38 38) (bvxor ?x27372 C2)) (_ bv1 1)) (_ bv24 63) ?x79411))))
 (let ((?x80233 (ite (= ((_ extract 41 41) (bvxor ?x27372 C2)) (_ bv1 1)) (_ bv21 63) (ite (= ((_ extract 40 40) (bvxor ?x27372 C2)) (_ bv1 1)) (_ bv22 63) ?x82317))))
 (let ((?x81910 (ite (= ((_ extract 43 43) (bvxor ?x27372 C2)) (_ bv1 1)) (_ bv19 63) (ite (= ((_ extract 42 42) (bvxor ?x27372 C2)) (_ bv1 1)) (_ bv20 63) ?x80233))))
 (let ((?x80465 (ite (= ((_ extract 45 45) (bvxor ?x27372 C2)) (_ bv1 1)) (_ bv17 63) (ite (= ((_ extract 44 44) (bvxor ?x27372 C2)) (_ bv1 1)) (_ bv18 63) ?x81910))))
 (let ((?x72399 (ite (= ((_ extract 47 47) (bvxor ?x27372 C2)) (_ bv1 1)) (_ bv15 63) (ite (= ((_ extract 46 46) (bvxor ?x27372 C2)) (_ bv1 1)) (_ bv16 63) ?x80465))))
 (let ((?x83058 (ite (= ((_ extract 49 49) (bvxor ?x27372 C2)) (_ bv1 1)) (_ bv13 63) (ite (= ((_ extract 48 48) (bvxor ?x27372 C2)) (_ bv1 1)) (_ bv14 63) ?x72399))))
 (let ((?x80575 (ite (= ((_ extract 51 51) (bvxor ?x27372 C2)) (_ bv1 1)) (_ bv11 63) (ite (= ((_ extract 50 50) (bvxor ?x27372 C2)) (_ bv1 1)) (_ bv12 63) ?x83058))))
 (let ((?x82123 (ite (= ((_ extract 53 53) (bvxor ?x27372 C2)) (_ bv1 1)) (_ bv9 63) (ite (= ((_ extract 52 52) (bvxor ?x27372 C2)) (_ bv1 1)) (_ bv10 63) ?x80575))))
 (let ((?x71192 (ite (= ((_ extract 55 55) (bvxor ?x27372 C2)) (_ bv1 1)) (_ bv7 63) (ite (= ((_ extract 54 54) (bvxor ?x27372 C2)) (_ bv1 1)) (_ bv8 63) ?x82123))))
 (let ((?x77439 (ite (= ((_ extract 57 57) (bvxor ?x27372 C2)) (_ bv1 1)) (_ bv5 63) (ite (= ((_ extract 56 56) (bvxor ?x27372 C2)) (_ bv1 1)) (_ bv6 63) ?x71192))))
 (let ((?x78072 (ite (= ((_ extract 59 59) (bvxor ?x27372 C2)) (_ bv1 1)) (_ bv3 63) (ite (= ((_ extract 58 58) (bvxor ?x27372 C2)) (_ bv1 1)) (_ bv4 63) ?x77439))))
 (let ((?x76397 (ite (= ((_ extract 61 61) (bvxor ?x27372 C2)) (_ bv1 1)) (_ bv1 63) (ite (= ((_ extract 60 60) (bvxor ?x27372 C2)) (_ bv1 1)) (_ bv2 63) ?x78072))))
 (let ((?x79882 (bvshl (_ bv1 63) (bvsub (_ bv63 63) (ite (= ((_ extract 62 62) (bvxor ?x27372 C2)) (_ bv1 1)) (_ bv0 63) ?x76397)))))
 (let (($x77437 (=> $x64669 (= (bvand %B (bvsub ?x79882 (_ bv1 63))) (_ bv0 63)))))
 (and $x77437 $x71157 $x80932 $x817)))))))))))))))))))))))))))))))))))))))))))
(check-sat)
