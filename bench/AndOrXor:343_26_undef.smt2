(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun |ana_MaskedValueIsZero(%B, ((1 << (width(C2) - countLeadingZeros(((C2 - 1) ^ C2)))) - 1))| () (_ BitVec 1))
(declare-fun C2 () (_ BitVec 28))
(declare-fun C1 () (_ BitVec 28))
(declare-fun %B () (_ BitVec 28))
(assert
 (let (($x64669 (= |ana_MaskedValueIsZero(%B, ((1 << (width(C2) - countLeadingZeros(((C2 - 1) ^ C2)))) - 1))| (_ bv1 1))))
 (let ((?x11723 (bvsub C2 (_ bv1 28))))
 (let ((?x63313 (bvor ?x11723 C2)))
 (let (($x66800 (and (and (distinct ?x63313 (_ bv0 28)) true) (= (bvand (bvadd ?x63313 (_ bv1 28)) ?x63313) (_ bv0 28)) $x64669)))
 (let (($x64982 (or (= (bvand (bvadd C2 (_ bv1 28)) (bvsub (bvadd C2 (_ bv1 28)) (_ bv1 28))) (_ bv0 28)) $x66800)))
 (let ((?x51806 (bvand C1 C2)))
 (let (($x66243 (= ?x51806 C2)))
 (let ((?x64446 (ite (= ((_ extract 1 1) (bvxor ?x11723 C2)) (_ bv1 1)) (_ bv26 28) (ite (= ((_ extract 0 0) (bvxor ?x11723 C2)) (_ bv1 1)) (_ bv27 28) (_ bv28 28)))))
 (let ((?x65546 (ite (= ((_ extract 3 3) (bvxor ?x11723 C2)) (_ bv1 1)) (_ bv24 28) (ite (= ((_ extract 2 2) (bvxor ?x11723 C2)) (_ bv1 1)) (_ bv25 28) ?x64446))))
 (let ((?x66063 (ite (= ((_ extract 5 5) (bvxor ?x11723 C2)) (_ bv1 1)) (_ bv22 28) (ite (= ((_ extract 4 4) (bvxor ?x11723 C2)) (_ bv1 1)) (_ bv23 28) ?x65546))))
 (let ((?x65735 (ite (= ((_ extract 7 7) (bvxor ?x11723 C2)) (_ bv1 1)) (_ bv20 28) (ite (= ((_ extract 6 6) (bvxor ?x11723 C2)) (_ bv1 1)) (_ bv21 28) ?x66063))))
 (let ((?x66332 (ite (= ((_ extract 9 9) (bvxor ?x11723 C2)) (_ bv1 1)) (_ bv18 28) (ite (= ((_ extract 8 8) (bvxor ?x11723 C2)) (_ bv1 1)) (_ bv19 28) ?x65735))))
 (let ((?x66303 (ite (= ((_ extract 11 11) (bvxor ?x11723 C2)) (_ bv1 1)) (_ bv16 28) (ite (= ((_ extract 10 10) (bvxor ?x11723 C2)) (_ bv1 1)) (_ bv17 28) ?x66332))))
 (let ((?x66240 (ite (= ((_ extract 13 13) (bvxor ?x11723 C2)) (_ bv1 1)) (_ bv14 28) (ite (= ((_ extract 12 12) (bvxor ?x11723 C2)) (_ bv1 1)) (_ bv15 28) ?x66303))))
 (let ((?x61674 (ite (= ((_ extract 15 15) (bvxor ?x11723 C2)) (_ bv1 1)) (_ bv12 28) (ite (= ((_ extract 14 14) (bvxor ?x11723 C2)) (_ bv1 1)) (_ bv13 28) ?x66240))))
 (let ((?x60057 (ite (= ((_ extract 17 17) (bvxor ?x11723 C2)) (_ bv1 1)) (_ bv10 28) (ite (= ((_ extract 16 16) (bvxor ?x11723 C2)) (_ bv1 1)) (_ bv11 28) ?x61674))))
 (let ((?x66583 (ite (= ((_ extract 19 19) (bvxor ?x11723 C2)) (_ bv1 1)) (_ bv8 28) (ite (= ((_ extract 18 18) (bvxor ?x11723 C2)) (_ bv1 1)) (_ bv9 28) ?x60057))))
 (let ((?x66425 (ite (= ((_ extract 21 21) (bvxor ?x11723 C2)) (_ bv1 1)) (_ bv6 28) (ite (= ((_ extract 20 20) (bvxor ?x11723 C2)) (_ bv1 1)) (_ bv7 28) ?x66583))))
 (let ((?x66783 (ite (= ((_ extract 23 23) (bvxor ?x11723 C2)) (_ bv1 1)) (_ bv4 28) (ite (= ((_ extract 22 22) (bvxor ?x11723 C2)) (_ bv1 1)) (_ bv5 28) ?x66425))))
 (let ((?x66820 (ite (= ((_ extract 25 25) (bvxor ?x11723 C2)) (_ bv1 1)) (_ bv2 28) (ite (= ((_ extract 24 24) (bvxor ?x11723 C2)) (_ bv1 1)) (_ bv3 28) ?x66783))))
 (let ((?x66805 (ite (= ((_ extract 27 27) (bvxor ?x11723 C2)) (_ bv1 1)) (_ bv0 28) (ite (= ((_ extract 26 26) (bvxor ?x11723 C2)) (_ bv1 1)) (_ bv1 28) ?x66820))))
 (let (($x64746 (=> $x64669 (= (bvand %B (bvsub (bvshl (_ bv1 28) (bvsub (_ bv28 28) ?x66805)) (_ bv1 28))) (_ bv0 28)))))
 (and $x64746 $x66243 $x64982 false))))))))))))))))))))))))
(check-sat)
