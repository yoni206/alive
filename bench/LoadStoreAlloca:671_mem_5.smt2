(set-info :status unknown)
(declare-fun mem0 () (_ BitVec 8))
(declare-fun %y () (_ BitVec 6))
(declare-fun %p2 () (_ BitVec 64))
(declare-fun idx () (_ BitVec 64))
(declare-fun %x () (_ BitVec 6))
(declare-fun %p1 () (_ BitVec 64))
(declare-fun |ana_equivalentAddressValues(%p1, %p2)| () (_ BitVec 1))
(assert
 (let ((?x284 (ite (and (and (distinct %p2 (_ bv0 64)) true) (or true true) (= idx %p2)) (concat ((_ extract 7 6) mem0) ((_ extract 5 0) %y)) mem0)))
 (let ((?x8887 (ite (and (and (distinct %p1 (_ bv0 64)) true) (or true true) (= idx %p1)) (concat ((_ extract 7 6) mem0) ((_ extract 5 0) %x)) mem0)))
 (let ((?x3067 (ite (and (and (distinct %p1 (_ bv0 64)) true) (or true true) (= %p2 %p1)) (concat ((_ extract 7 6) mem0) ((_ extract 5 0) %x)) mem0)))
 (let (($x1172 (or true true)))
 (let (($x16205 (and (distinct %p2 (_ bv0 64)) true)))
 (let (($x17212 (and (distinct %p1 (_ bv0 64)) true)))
 (let ((?x5626 (ite (and $x17212 $x1172 $x16205 $x1172 (= idx %p2)) (concat ((_ extract 7 6) ?x3067) ((_ extract 5 0) %y)) ?x8887)))
 (let (($x4916 (= |ana_equivalentAddressValues(%p1, %p2)| (_ bv1 1))))
 (and (=> $x4916 (= %p1 %p2)) $x4916 (and (distinct ?x5626 ?x284) true)))))))))))
(check-sat)
