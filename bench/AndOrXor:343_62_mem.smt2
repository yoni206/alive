(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun mem0 () (_ BitVec 8))
(declare-fun |ana_MaskedValueIsZero(%B, ((1 << (width(C2) - countLeadingZeros(((C2 - 1) ^ C2)))) - 1))| () (_ BitVec 1))
(declare-fun C2 () (_ BitVec 64))
(declare-fun C1 () (_ BitVec 64))
(declare-fun %B () (_ BitVec 64))
(assert
 (let (($x817 (and (distinct mem0 mem0) true)))
 (let (($x64669 (= |ana_MaskedValueIsZero(%B, ((1 << (width(C2) - countLeadingZeros(((C2 - 1) ^ C2)))) - 1))| (_ bv1 1))))
 (let ((?x29320 (bvsub C2 (_ bv1 64))))
 (let ((?x80451 (bvor ?x29320 C2)))
 (let (($x79632 (and (and (distinct ?x80451 (_ bv0 64)) true) (= (bvand (bvadd ?x80451 (_ bv1 64)) ?x80451) (_ bv0 64)) $x64669)))
 (let (($x73199 (or (= (bvand (bvadd C2 (_ bv1 64)) (bvsub (bvadd C2 (_ bv1 64)) (_ bv1 64))) (_ bv0 64)) $x79632)))
 (let ((?x54458 (bvand C1 C2)))
 (let (($x76550 (= ?x54458 C2)))
 (let ((?x68697 (ite (= ((_ extract 1 1) (bvxor ?x29320 C2)) (_ bv1 1)) (_ bv62 64) (ite (= ((_ extract 0 0) (bvxor ?x29320 C2)) (_ bv1 1)) (_ bv63 64) (_ bv64 64)))))
 (let ((?x67396 (ite (= ((_ extract 3 3) (bvxor ?x29320 C2)) (_ bv1 1)) (_ bv60 64) (ite (= ((_ extract 2 2) (bvxor ?x29320 C2)) (_ bv1 1)) (_ bv61 64) ?x68697))))
 (let ((?x81036 (ite (= ((_ extract 5 5) (bvxor ?x29320 C2)) (_ bv1 1)) (_ bv58 64) (ite (= ((_ extract 4 4) (bvxor ?x29320 C2)) (_ bv1 1)) (_ bv59 64) ?x67396))))
 (let ((?x79118 (ite (= ((_ extract 7 7) (bvxor ?x29320 C2)) (_ bv1 1)) (_ bv56 64) (ite (= ((_ extract 6 6) (bvxor ?x29320 C2)) (_ bv1 1)) (_ bv57 64) ?x81036))))
 (let ((?x74455 (ite (= ((_ extract 9 9) (bvxor ?x29320 C2)) (_ bv1 1)) (_ bv54 64) (ite (= ((_ extract 8 8) (bvxor ?x29320 C2)) (_ bv1 1)) (_ bv55 64) ?x79118))))
 (let ((?x75387 (ite (= ((_ extract 11 11) (bvxor ?x29320 C2)) (_ bv1 1)) (_ bv52 64) (ite (= ((_ extract 10 10) (bvxor ?x29320 C2)) (_ bv1 1)) (_ bv53 64) ?x74455))))
 (let ((?x71266 (ite (= ((_ extract 13 13) (bvxor ?x29320 C2)) (_ bv1 1)) (_ bv50 64) (ite (= ((_ extract 12 12) (bvxor ?x29320 C2)) (_ bv1 1)) (_ bv51 64) ?x75387))))
 (let ((?x72493 (ite (= ((_ extract 15 15) (bvxor ?x29320 C2)) (_ bv1 1)) (_ bv48 64) (ite (= ((_ extract 14 14) (bvxor ?x29320 C2)) (_ bv1 1)) (_ bv49 64) ?x71266))))
 (let ((?x78316 (ite (= ((_ extract 17 17) (bvxor ?x29320 C2)) (_ bv1 1)) (_ bv46 64) (ite (= ((_ extract 16 16) (bvxor ?x29320 C2)) (_ bv1 1)) (_ bv47 64) ?x72493))))
 (let ((?x81277 (ite (= ((_ extract 19 19) (bvxor ?x29320 C2)) (_ bv1 1)) (_ bv44 64) (ite (= ((_ extract 18 18) (bvxor ?x29320 C2)) (_ bv1 1)) (_ bv45 64) ?x78316))))
 (let ((?x80332 (ite (= ((_ extract 21 21) (bvxor ?x29320 C2)) (_ bv1 1)) (_ bv42 64) (ite (= ((_ extract 20 20) (bvxor ?x29320 C2)) (_ bv1 1)) (_ bv43 64) ?x81277))))
 (let ((?x81155 (ite (= ((_ extract 23 23) (bvxor ?x29320 C2)) (_ bv1 1)) (_ bv40 64) (ite (= ((_ extract 22 22) (bvxor ?x29320 C2)) (_ bv1 1)) (_ bv41 64) ?x80332))))
 (let ((?x66359 (ite (= ((_ extract 25 25) (bvxor ?x29320 C2)) (_ bv1 1)) (_ bv38 64) (ite (= ((_ extract 24 24) (bvxor ?x29320 C2)) (_ bv1 1)) (_ bv39 64) ?x81155))))
 (let ((?x66845 (ite (= ((_ extract 27 27) (bvxor ?x29320 C2)) (_ bv1 1)) (_ bv36 64) (ite (= ((_ extract 26 26) (bvxor ?x29320 C2)) (_ bv1 1)) (_ bv37 64) ?x66359))))
 (let ((?x82809 (ite (= ((_ extract 29 29) (bvxor ?x29320 C2)) (_ bv1 1)) (_ bv34 64) (ite (= ((_ extract 28 28) (bvxor ?x29320 C2)) (_ bv1 1)) (_ bv35 64) ?x66845))))
 (let ((?x71905 (ite (= ((_ extract 31 31) (bvxor ?x29320 C2)) (_ bv1 1)) (_ bv32 64) (ite (= ((_ extract 30 30) (bvxor ?x29320 C2)) (_ bv1 1)) (_ bv33 64) ?x82809))))
 (let ((?x78096 (ite (= ((_ extract 33 33) (bvxor ?x29320 C2)) (_ bv1 1)) (_ bv30 64) (ite (= ((_ extract 32 32) (bvxor ?x29320 C2)) (_ bv1 1)) (_ bv31 64) ?x71905))))
 (let ((?x78919 (ite (= ((_ extract 35 35) (bvxor ?x29320 C2)) (_ bv1 1)) (_ bv28 64) (ite (= ((_ extract 34 34) (bvxor ?x29320 C2)) (_ bv1 1)) (_ bv29 64) ?x78096))))
 (let ((?x73620 (ite (= ((_ extract 37 37) (bvxor ?x29320 C2)) (_ bv1 1)) (_ bv26 64) (ite (= ((_ extract 36 36) (bvxor ?x29320 C2)) (_ bv1 1)) (_ bv27 64) ?x78919))))
 (let ((?x75464 (ite (= ((_ extract 39 39) (bvxor ?x29320 C2)) (_ bv1 1)) (_ bv24 64) (ite (= ((_ extract 38 38) (bvxor ?x29320 C2)) (_ bv1 1)) (_ bv25 64) ?x73620))))
 (let ((?x73415 (ite (= ((_ extract 41 41) (bvxor ?x29320 C2)) (_ bv1 1)) (_ bv22 64) (ite (= ((_ extract 40 40) (bvxor ?x29320 C2)) (_ bv1 1)) (_ bv23 64) ?x75464))))
 (let ((?x73685 (ite (= ((_ extract 43 43) (bvxor ?x29320 C2)) (_ bv1 1)) (_ bv20 64) (ite (= ((_ extract 42 42) (bvxor ?x29320 C2)) (_ bv1 1)) (_ bv21 64) ?x73415))))
 (let ((?x70662 (ite (= ((_ extract 45 45) (bvxor ?x29320 C2)) (_ bv1 1)) (_ bv18 64) (ite (= ((_ extract 44 44) (bvxor ?x29320 C2)) (_ bv1 1)) (_ bv19 64) ?x73685))))
 (let ((?x76224 (ite (= ((_ extract 47 47) (bvxor ?x29320 C2)) (_ bv1 1)) (_ bv16 64) (ite (= ((_ extract 46 46) (bvxor ?x29320 C2)) (_ bv1 1)) (_ bv17 64) ?x70662))))
 (let ((?x76600 (ite (= ((_ extract 49 49) (bvxor ?x29320 C2)) (_ bv1 1)) (_ bv14 64) (ite (= ((_ extract 48 48) (bvxor ?x29320 C2)) (_ bv1 1)) (_ bv15 64) ?x76224))))
 (let ((?x80095 (ite (= ((_ extract 51 51) (bvxor ?x29320 C2)) (_ bv1 1)) (_ bv12 64) (ite (= ((_ extract 50 50) (bvxor ?x29320 C2)) (_ bv1 1)) (_ bv13 64) ?x76600))))
 (let ((?x81975 (ite (= ((_ extract 53 53) (bvxor ?x29320 C2)) (_ bv1 1)) (_ bv10 64) (ite (= ((_ extract 52 52) (bvxor ?x29320 C2)) (_ bv1 1)) (_ bv11 64) ?x80095))))
 (let ((?x77342 (ite (= ((_ extract 55 55) (bvxor ?x29320 C2)) (_ bv1 1)) (_ bv8 64) (ite (= ((_ extract 54 54) (bvxor ?x29320 C2)) (_ bv1 1)) (_ bv9 64) ?x81975))))
 (let ((?x76869 (ite (= ((_ extract 57 57) (bvxor ?x29320 C2)) (_ bv1 1)) (_ bv6 64) (ite (= ((_ extract 56 56) (bvxor ?x29320 C2)) (_ bv1 1)) (_ bv7 64) ?x77342))))
 (let ((?x81887 (ite (= ((_ extract 59 59) (bvxor ?x29320 C2)) (_ bv1 1)) (_ bv4 64) (ite (= ((_ extract 58 58) (bvxor ?x29320 C2)) (_ bv1 1)) (_ bv5 64) ?x76869))))
 (let ((?x83542 (ite (= ((_ extract 61 61) (bvxor ?x29320 C2)) (_ bv1 1)) (_ bv2 64) (ite (= ((_ extract 60 60) (bvxor ?x29320 C2)) (_ bv1 1)) (_ bv3 64) ?x81887))))
 (let ((?x73453 (ite (= ((_ extract 63 63) (bvxor ?x29320 C2)) (_ bv1 1)) (_ bv0 64) (ite (= ((_ extract 62 62) (bvxor ?x29320 C2)) (_ bv1 1)) (_ bv1 64) ?x83542))))
 (let (($x65075 (=> $x64669 (= (bvand %B (bvsub (bvshl (_ bv1 64) (bvsub (_ bv64 64) ?x73453)) (_ bv1 64))) (_ bv0 64)))))
 (and $x65075 $x76550 $x73199 $x817)))))))))))))))))))))))))))))))))))))))))))
(check-sat)
