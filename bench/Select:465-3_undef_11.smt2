(set-info :status unknown)
(declare-fun C2 () (_ BitVec 11))
(declare-fun C1 () (_ BitVec 13))
(assert
 (let ((?x228 (ite (and (distinct ((_ extract 2 2) C2) (_ bv0 1)) true) (_ bv2 13) (ite (and (distinct ((_ extract 1 1) C2) (_ bv0 1)) true) (_ bv1 13) (_ bv0 13)))))
 (let ((?x19330 (ite (and (distinct ((_ extract 5 5) C2) (_ bv0 1)) true) (_ bv5 13) (ite (and (distinct ((_ extract 4 4) C2) (_ bv0 1)) true) (_ bv4 13) (_ bv3 13)))))
 (let ((?x4096 (ite (and (distinct ((_ extract 8 8) C2) (_ bv0 1)) true) (_ bv8 13) (ite (and (distinct ((_ extract 7 7) C2) (_ bv0 1)) true) (_ bv7 13) (_ bv6 13)))))
 (let ((?x12362 (ite (and (distinct ((_ extract 10 9) C2) (_ bv0 2)) true) (ite (and (distinct ((_ extract 10 10) C2) (_ bv0 1)) true) (_ bv10 13) (_ bv9 13)) ?x4096)))
 (let ((?x10049 (ite (and (distinct ((_ extract 10 6) C2) (_ bv0 5)) true) ?x12362 (ite (and (distinct ((_ extract 5 3) C2) (_ bv0 3)) true) ?x19330 ?x228))))
 (let ((?x3617 (ite (and (distinct ((_ extract 3 2) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 3 3) C1) (_ bv0 1)) true) (_ bv3 13) (_ bv2 13)) (ite (and (distinct ((_ extract 1 1) C1) (_ bv0 1)) true) (_ bv1 13) (_ bv0 13)))))
 (let ((?x20136 (ite (and (distinct ((_ extract 6 6) C1) (_ bv0 1)) true) (_ bv6 13) (ite (and (distinct ((_ extract 5 5) C1) (_ bv0 1)) true) (_ bv5 13) (_ bv4 13)))))
 (let ((?x14508 (ite (and (distinct ((_ extract 9 9) C1) (_ bv0 1)) true) (_ bv9 13) (ite (and (distinct ((_ extract 8 8) C1) (_ bv0 1)) true) (_ bv8 13) (_ bv7 13)))))
 (let ((?x19416 (ite (and (distinct ((_ extract 12 12) C1) (_ bv0 1)) true) (_ bv12 13) (ite (and (distinct ((_ extract 11 11) C1) (_ bv0 1)) true) (_ bv11 13) (_ bv10 13)))))
 (let ((?x14003 (ite (and (distinct ((_ extract 12 7) C1) (_ bv0 6)) true) (ite (and (distinct ((_ extract 12 10) C1) (_ bv0 3)) true) ?x19416 ?x14508) (ite (and (distinct ((_ extract 6 4) C1) (_ bv0 3)) true) ?x20136 ?x3617))))
 (let ((?x8440 (bvsub ?x14003 ?x10049)))
 (let ((?x23613 (ite (and (distinct ((_ extract 3 2) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 3 3) C1) (_ bv0 1)) true) (_ bv3 32) (_ bv2 32)) (ite (and (distinct ((_ extract 1 1) C1) (_ bv0 1)) true) (_ bv1 32) (_ bv0 32)))))
 (let ((?x7941 (ite (and (distinct ((_ extract 6 6) C1) (_ bv0 1)) true) (_ bv6 32) (ite (and (distinct ((_ extract 5 5) C1) (_ bv0 1)) true) (_ bv5 32) (_ bv4 32)))))
 (let ((?x5996 (ite (and (distinct ((_ extract 9 9) C1) (_ bv0 1)) true) (_ bv9 32) (ite (and (distinct ((_ extract 8 8) C1) (_ bv0 1)) true) (_ bv8 32) (_ bv7 32)))))
 (let ((?x20474 (ite (and (distinct ((_ extract 12 12) C1) (_ bv0 1)) true) (_ bv12 32) (ite (and (distinct ((_ extract 11 11) C1) (_ bv0 1)) true) (_ bv11 32) (_ bv10 32)))))
 (let ((?x993 (ite (and (distinct ((_ extract 12 7) C1) (_ bv0 6)) true) (ite (and (distinct ((_ extract 12 10) C1) (_ bv0 3)) true) ?x20474 ?x5996) (ite (and (distinct ((_ extract 6 4) C1) (_ bv0 3)) true) ?x7941 ?x23613))))
 (let ((?x13493 (ite (and (distinct ((_ extract 2 2) C2) (_ bv0 1)) true) (_ bv2 32) (ite (and (distinct ((_ extract 1 1) C2) (_ bv0 1)) true) (_ bv1 32) (_ bv0 32)))))
 (let ((?x9738 (ite (and (distinct ((_ extract 5 5) C2) (_ bv0 1)) true) (_ bv5 32) (ite (and (distinct ((_ extract 4 4) C2) (_ bv0 1)) true) (_ bv4 32) (_ bv3 32)))))
 (let ((?x22108 (ite (and (distinct ((_ extract 8 8) C2) (_ bv0 1)) true) (_ bv8 32) (ite (and (distinct ((_ extract 7 7) C2) (_ bv0 1)) true) (_ bv7 32) (_ bv6 32)))))
 (let ((?x6925 (ite (and (distinct ((_ extract 10 9) C2) (_ bv0 2)) true) (ite (and (distinct ((_ extract 10 10) C2) (_ bv0 1)) true) (_ bv10 32) (_ bv9 32)) ?x22108)))
 (let ((?x893 (ite (and (distinct ((_ extract 10 6) C2) (_ bv0 5)) true) ?x6925 (ite (and (distinct ((_ extract 5 3) C2) (_ bv0 3)) true) ?x9738 ?x13493))))
 (and (and (and (distinct C1 (_ bv0 13)) true) (= (bvand C1 (bvsub C1 (_ bv1 13))) (_ bv0 13))) (and (and (distinct C2 (_ bv0 11)) true) (= (bvand C2 (bvsub C2 (_ bv1 11))) (_ bv0 11))) (bvslt ?x893 ?x993) (not (bvult ?x8440 (_ bv13 13))))))))))))))))))))))))))
(check-sat)
