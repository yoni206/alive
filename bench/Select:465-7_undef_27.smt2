(set-info :status unknown)
(declare-fun C2 () (_ BitVec 11))
(declare-fun C1 () (_ BitVec 35))
(assert
 (let ((?x5850 (ite (and (distinct ((_ extract 2 2) C2) (_ bv0 1)) true) (_ bv2 35) (ite (and (distinct ((_ extract 1 1) C2) (_ bv0 1)) true) (_ bv1 35) (_ bv0 35)))))
 (let ((?x6343 (ite (and (distinct ((_ extract 5 5) C2) (_ bv0 1)) true) (_ bv5 35) (ite (and (distinct ((_ extract 4 4) C2) (_ bv0 1)) true) (_ bv4 35) (_ bv3 35)))))
 (let ((?x5798 (ite (and (distinct ((_ extract 8 8) C2) (_ bv0 1)) true) (_ bv8 35) (ite (and (distinct ((_ extract 7 7) C2) (_ bv0 1)) true) (_ bv7 35) (_ bv6 35)))))
 (let ((?x3545 (ite (and (distinct ((_ extract 10 9) C2) (_ bv0 2)) true) (ite (and (distinct ((_ extract 10 10) C2) (_ bv0 1)) true) (_ bv10 35) (_ bv9 35)) ?x5798)))
 (let ((?x5612 (ite (and (distinct ((_ extract 10 6) C2) (_ bv0 5)) true) ?x3545 (ite (and (distinct ((_ extract 5 3) C2) (_ bv0 3)) true) ?x6343 ?x5850))))
 (let ((?x4412 (ite (and (distinct ((_ extract 2 2) C1) (_ bv0 1)) true) (_ bv2 35) (ite (and (distinct ((_ extract 1 1) C1) (_ bv0 1)) true) (_ bv1 35) (_ bv0 35)))))
 (let ((?x3639 (ite (and (distinct ((_ extract 4 3) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 4 4) C1) (_ bv0 1)) true) (_ bv4 35) (_ bv3 35)) ?x4412)))
 (let ((?x3347 (ite (and (distinct ((_ extract 8 7) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 8 8) C1) (_ bv0 1)) true) (_ bv8 35) (_ bv7 35)) (ite (and (distinct ((_ extract 6 6) C1) (_ bv0 1)) true) (_ bv6 35) (_ bv5 35)))))
 (let ((?x1533 (ite (and (distinct ((_ extract 11 11) C1) (_ bv0 1)) true) (_ bv11 35) (ite (and (distinct ((_ extract 10 10) C1) (_ bv0 1)) true) (_ bv10 35) (_ bv9 35)))))
 (let ((?x2589 (ite (and (distinct ((_ extract 13 12) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 13 13) C1) (_ bv0 1)) true) (_ bv13 35) (_ bv12 35)) ?x1533)))
 (let ((?x3982 (ite (and (distinct ((_ extract 17 16) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 17 17) C1) (_ bv0 1)) true) (_ bv17 35) (_ bv16 35)) (ite (and (distinct ((_ extract 15 15) C1) (_ bv0 1)) true) (_ bv15 35) (_ bv14 35)))))
 (let ((?x3458 (ite (and (distinct ((_ extract 17 9) C1) (_ bv0 9)) true) (ite (and (distinct ((_ extract 17 14) C1) (_ bv0 4)) true) ?x3982 ?x2589) (ite (and (distinct ((_ extract 8 5) C1) (_ bv0 4)) true) ?x3347 ?x3639))))
 (let ((?x4718 (ite (and (distinct ((_ extract 20 20) C1) (_ bv0 1)) true) (_ bv20 35) (ite (and (distinct ((_ extract 19 19) C1) (_ bv0 1)) true) (_ bv19 35) (_ bv18 35)))))
 (let ((?x3692 (ite (and (distinct ((_ extract 22 21) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 22 22) C1) (_ bv0 1)) true) (_ bv22 35) (_ bv21 35)) ?x4718)))
 (let ((?x1914 (ite (and (distinct ((_ extract 26 25) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 26 26) C1) (_ bv0 1)) true) (_ bv26 35) (_ bv25 35)) (ite (and (distinct ((_ extract 24 24) C1) (_ bv0 1)) true) (_ bv24 35) (_ bv23 35)))))
 (let ((?x1973 (ite (and (distinct ((_ extract 30 29) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 30 30) C1) (_ bv0 1)) true) (_ bv30 35) (_ bv29 35)) (ite (and (distinct ((_ extract 28 28) C1) (_ bv0 1)) true) (_ bv28 35) (_ bv27 35)))))
 (let ((?x5585 (ite (and (distinct ((_ extract 34 33) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 34 34) C1) (_ bv0 1)) true) (_ bv34 35) (_ bv33 35)) (ite (and (distinct ((_ extract 32 32) C1) (_ bv0 1)) true) (_ bv32 35) (_ bv31 35)))))
 (let ((?x5405 (ite (and (distinct ((_ extract 34 27) C1) (_ bv0 8)) true) (ite (and (distinct ((_ extract 34 31) C1) (_ bv0 4)) true) ?x5585 ?x1973) (ite (and (distinct ((_ extract 26 23) C1) (_ bv0 4)) true) ?x1914 ?x3692))))
 (let ((?x6526 (bvsub (ite (and (distinct ((_ extract 34 18) C1) (_ bv0 17)) true) ?x5405 ?x3458) ?x5612)))
 (let ((?x6185 (ite (and (distinct ((_ extract 2 2) C1) (_ bv0 1)) true) (_ bv2 32) (ite (and (distinct ((_ extract 1 1) C1) (_ bv0 1)) true) (_ bv1 32) (_ bv0 32)))))
 (let ((?x6102 (ite (and (distinct ((_ extract 4 3) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 4 4) C1) (_ bv0 1)) true) (_ bv4 32) (_ bv3 32)) ?x6185)))
 (let ((?x5654 (ite (and (distinct ((_ extract 8 7) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 8 8) C1) (_ bv0 1)) true) (_ bv8 32) (_ bv7 32)) (ite (and (distinct ((_ extract 6 6) C1) (_ bv0 1)) true) (_ bv6 32) (_ bv5 32)))))
 (let ((?x5901 (ite (and (distinct ((_ extract 11 11) C1) (_ bv0 1)) true) (_ bv11 32) (ite (and (distinct ((_ extract 10 10) C1) (_ bv0 1)) true) (_ bv10 32) (_ bv9 32)))))
 (let ((?x6090 (ite (and (distinct ((_ extract 13 12) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 13 13) C1) (_ bv0 1)) true) (_ bv13 32) (_ bv12 32)) ?x5901)))
 (let ((?x4010 (ite (and (distinct ((_ extract 17 16) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 17 17) C1) (_ bv0 1)) true) (_ bv17 32) (_ bv16 32)) (ite (and (distinct ((_ extract 15 15) C1) (_ bv0 1)) true) (_ bv15 32) (_ bv14 32)))))
 (let ((?x6279 (ite (and (distinct ((_ extract 17 9) C1) (_ bv0 9)) true) (ite (and (distinct ((_ extract 17 14) C1) (_ bv0 4)) true) ?x4010 ?x6090) (ite (and (distinct ((_ extract 8 5) C1) (_ bv0 4)) true) ?x5654 ?x6102))))
 (let ((?x3098 (ite (and (distinct ((_ extract 20 20) C1) (_ bv0 1)) true) (_ bv20 32) (ite (and (distinct ((_ extract 19 19) C1) (_ bv0 1)) true) (_ bv19 32) (_ bv18 32)))))
 (let ((?x2916 (ite (and (distinct ((_ extract 22 21) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 22 22) C1) (_ bv0 1)) true) (_ bv22 32) (_ bv21 32)) ?x3098)))
 (let ((?x1809 (ite (and (distinct ((_ extract 26 25) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 26 26) C1) (_ bv0 1)) true) (_ bv26 32) (_ bv25 32)) (ite (and (distinct ((_ extract 24 24) C1) (_ bv0 1)) true) (_ bv24 32) (_ bv23 32)))))
 (let ((?x1110 (ite (and (distinct ((_ extract 30 29) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 30 30) C1) (_ bv0 1)) true) (_ bv30 32) (_ bv29 32)) (ite (and (distinct ((_ extract 28 28) C1) (_ bv0 1)) true) (_ bv28 32) (_ bv27 32)))))
 (let ((?x6065 (ite (and (distinct ((_ extract 34 33) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 34 34) C1) (_ bv0 1)) true) (_ bv34 32) (_ bv33 32)) (ite (and (distinct ((_ extract 32 32) C1) (_ bv0 1)) true) (_ bv32 32) (_ bv31 32)))))
 (let ((?x3820 (ite (and (distinct ((_ extract 34 27) C1) (_ bv0 8)) true) (ite (and (distinct ((_ extract 34 31) C1) (_ bv0 4)) true) ?x6065 ?x1110) (ite (and (distinct ((_ extract 26 23) C1) (_ bv0 4)) true) ?x1809 ?x2916))))
 (let ((?x3105 (ite (and (distinct ((_ extract 2 2) C2) (_ bv0 1)) true) (_ bv2 32) (ite (and (distinct ((_ extract 1 1) C2) (_ bv0 1)) true) (_ bv1 32) (_ bv0 32)))))
 (let ((?x5546 (ite (and (distinct ((_ extract 5 5) C2) (_ bv0 1)) true) (_ bv5 32) (ite (and (distinct ((_ extract 4 4) C2) (_ bv0 1)) true) (_ bv4 32) (_ bv3 32)))))
 (let ((?x3825 (ite (and (distinct ((_ extract 8 8) C2) (_ bv0 1)) true) (_ bv8 32) (ite (and (distinct ((_ extract 7 7) C2) (_ bv0 1)) true) (_ bv7 32) (_ bv6 32)))))
 (let ((?x4022 (ite (and (distinct ((_ extract 10 9) C2) (_ bv0 2)) true) (ite (and (distinct ((_ extract 10 10) C2) (_ bv0 1)) true) (_ bv10 32) (_ bv9 32)) ?x3825)))
 (let ((?x3304 (ite (and (distinct ((_ extract 10 6) C2) (_ bv0 5)) true) ?x4022 (ite (and (distinct ((_ extract 5 3) C2) (_ bv0 3)) true) ?x5546 ?x3105))))
 (and (and (and (distinct C1 (_ bv0 35)) true) (= (bvand C1 (bvsub C1 (_ bv1 35))) (_ bv0 35))) (and (and (distinct C2 (_ bv0 11)) true) (= (bvand C2 (bvsub C2 (_ bv1 11))) (_ bv0 11))) (bvslt ?x3304 (ite (and (distinct ((_ extract 34 18) C1) (_ bv0 17)) true) ?x3820 ?x6279)) (not (bvult ?x6526 (_ bv35 35))))))))))))))))))))))))))))))))))))))))))
(check-sat)
