(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun |ana_MaskedValueIsZero(%B, ((1 << (width(C2) - countLeadingZeros(((C2 - 1) ^ C2)))) - 1))| () (_ BitVec 1))
(declare-fun C2 () (_ BitVec 35))
(declare-fun C1 () (_ BitVec 35))
(declare-fun %B () (_ BitVec 35))
(assert
 (let (($x64669 (= |ana_MaskedValueIsZero(%B, ((1 << (width(C2) - countLeadingZeros(((C2 - 1) ^ C2)))) - 1))| (_ bv1 1))))
 (let ((?x14401 (bvsub C2 (_ bv1 35))))
 (let ((?x70105 (bvor ?x14401 C2)))
 (let (($x68295 (and (and (distinct ?x70105 (_ bv0 35)) true) (= (bvand (bvadd ?x70105 (_ bv1 35)) ?x70105) (_ bv0 35)) $x64669)))
 (let (($x69878 (or (= (bvand (bvadd C2 (_ bv1 35)) (bvsub (bvadd C2 (_ bv1 35)) (_ bv1 35))) (_ bv0 35)) $x68295)))
 (let ((?x49357 (bvand C1 C2)))
 (let (($x70470 (= ?x49357 C2)))
 (let ((?x69092 (ite (= ((_ extract 1 1) (bvxor ?x14401 C2)) (_ bv1 1)) (_ bv33 35) (ite (= ((_ extract 0 0) (bvxor ?x14401 C2)) (_ bv1 1)) (_ bv34 35) (_ bv35 35)))))
 (let ((?x68997 (ite (= ((_ extract 3 3) (bvxor ?x14401 C2)) (_ bv1 1)) (_ bv31 35) (ite (= ((_ extract 2 2) (bvxor ?x14401 C2)) (_ bv1 1)) (_ bv32 35) ?x69092))))
 (let ((?x68909 (ite (= ((_ extract 5 5) (bvxor ?x14401 C2)) (_ bv1 1)) (_ bv29 35) (ite (= ((_ extract 4 4) (bvxor ?x14401 C2)) (_ bv1 1)) (_ bv30 35) ?x68997))))
 (let ((?x68873 (ite (= ((_ extract 7 7) (bvxor ?x14401 C2)) (_ bv1 1)) (_ bv27 35) (ite (= ((_ extract 6 6) (bvxor ?x14401 C2)) (_ bv1 1)) (_ bv28 35) ?x68909))))
 (let ((?x69662 (ite (= ((_ extract 9 9) (bvxor ?x14401 C2)) (_ bv1 1)) (_ bv25 35) (ite (= ((_ extract 8 8) (bvxor ?x14401 C2)) (_ bv1 1)) (_ bv26 35) ?x68873))))
 (let ((?x69992 (ite (= ((_ extract 11 11) (bvxor ?x14401 C2)) (_ bv1 1)) (_ bv23 35) (ite (= ((_ extract 10 10) (bvxor ?x14401 C2)) (_ bv1 1)) (_ bv24 35) ?x69662))))
 (let ((?x69912 (ite (= ((_ extract 13 13) (bvxor ?x14401 C2)) (_ bv1 1)) (_ bv21 35) (ite (= ((_ extract 12 12) (bvxor ?x14401 C2)) (_ bv1 1)) (_ bv22 35) ?x69992))))
 (let ((?x70383 (ite (= ((_ extract 15 15) (bvxor ?x14401 C2)) (_ bv1 1)) (_ bv19 35) (ite (= ((_ extract 14 14) (bvxor ?x14401 C2)) (_ bv1 1)) (_ bv20 35) ?x69912))))
 (let ((?x70293 (ite (= ((_ extract 17 17) (bvxor ?x14401 C2)) (_ bv1 1)) (_ bv17 35) (ite (= ((_ extract 16 16) (bvxor ?x14401 C2)) (_ bv1 1)) (_ bv18 35) ?x70383))))
 (let ((?x70259 (ite (= ((_ extract 19 19) (bvxor ?x14401 C2)) (_ bv1 1)) (_ bv15 35) (ite (= ((_ extract 18 18) (bvxor ?x14401 C2)) (_ bv1 1)) (_ bv16 35) ?x70293))))
 (let ((?x70410 (ite (= ((_ extract 21 21) (bvxor ?x14401 C2)) (_ bv1 1)) (_ bv13 35) (ite (= ((_ extract 20 20) (bvxor ?x14401 C2)) (_ bv1 1)) (_ bv14 35) ?x70259))))
 (let ((?x68521 (ite (= ((_ extract 23 23) (bvxor ?x14401 C2)) (_ bv1 1)) (_ bv11 35) (ite (= ((_ extract 22 22) (bvxor ?x14401 C2)) (_ bv1 1)) (_ bv12 35) ?x70410))))
 (let ((?x64032 (ite (= ((_ extract 25 25) (bvxor ?x14401 C2)) (_ bv1 1)) (_ bv9 35) (ite (= ((_ extract 24 24) (bvxor ?x14401 C2)) (_ bv1 1)) (_ bv10 35) ?x68521))))
 (let ((?x66143 (ite (= ((_ extract 27 27) (bvxor ?x14401 C2)) (_ bv1 1)) (_ bv7 35) (ite (= ((_ extract 26 26) (bvxor ?x14401 C2)) (_ bv1 1)) (_ bv8 35) ?x64032))))
 (let ((?x69462 (ite (= ((_ extract 29 29) (bvxor ?x14401 C2)) (_ bv1 1)) (_ bv5 35) (ite (= ((_ extract 28 28) (bvxor ?x14401 C2)) (_ bv1 1)) (_ bv6 35) ?x66143))))
 (let ((?x63801 (ite (= ((_ extract 31 31) (bvxor ?x14401 C2)) (_ bv1 1)) (_ bv3 35) (ite (= ((_ extract 30 30) (bvxor ?x14401 C2)) (_ bv1 1)) (_ bv4 35) ?x69462))))
 (let ((?x61303 (ite (= ((_ extract 33 33) (bvxor ?x14401 C2)) (_ bv1 1)) (_ bv1 35) (ite (= ((_ extract 32 32) (bvxor ?x14401 C2)) (_ bv1 1)) (_ bv2 35) ?x63801))))
 (let ((?x69739 (bvshl (_ bv1 35) (bvsub (_ bv35 35) (ite (= ((_ extract 34 34) (bvxor ?x14401 C2)) (_ bv1 1)) (_ bv0 35) ?x61303)))))
 (let (($x65623 (=> $x64669 (= (bvand %B (bvsub ?x69739 (_ bv1 35))) (_ bv0 35)))))
 (and $x65623 $x70470 $x69878 false))))))))))))))))))))))))))))
(check-sat)
