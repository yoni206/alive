(set-info :status unknown)
(declare-fun C2 () (_ BitVec 11))
(declare-fun C1 () (_ BitVec 41))
(assert
 (let ((?x5112 (ite (and (distinct ((_ extract 2 2) C2) (_ bv0 1)) true) (_ bv2 41) (ite (and (distinct ((_ extract 1 1) C2) (_ bv0 1)) true) (_ bv1 41) (_ bv0 41)))))
 (let ((?x3362 (ite (and (distinct ((_ extract 5 5) C2) (_ bv0 1)) true) (_ bv5 41) (ite (and (distinct ((_ extract 4 4) C2) (_ bv0 1)) true) (_ bv4 41) (_ bv3 41)))))
 (let ((?x5946 (ite (and (distinct ((_ extract 8 8) C2) (_ bv0 1)) true) (_ bv8 41) (ite (and (distinct ((_ extract 7 7) C2) (_ bv0 1)) true) (_ bv7 41) (_ bv6 41)))))
 (let ((?x5922 (ite (and (distinct ((_ extract 10 9) C2) (_ bv0 2)) true) (ite (and (distinct ((_ extract 10 10) C2) (_ bv0 1)) true) (_ bv10 41) (_ bv9 41)) ?x5946)))
 (let ((?x6475 (ite (and (distinct ((_ extract 10 6) C2) (_ bv0 5)) true) ?x5922 (ite (and (distinct ((_ extract 5 3) C2) (_ bv0 3)) true) ?x3362 ?x5112))))
 (let ((?x5878 (ite (and (distinct ((_ extract 2 2) C1) (_ bv0 1)) true) (_ bv2 41) (ite (and (distinct ((_ extract 1 1) C1) (_ bv0 1)) true) (_ bv1 41) (_ bv0 41)))))
 (let ((?x4359 (ite (and (distinct ((_ extract 5 5) C1) (_ bv0 1)) true) (_ bv5 41) (ite (and (distinct ((_ extract 4 4) C1) (_ bv0 1)) true) (_ bv4 41) (_ bv3 41)))))
 (let ((?x3729 (ite (and (distinct ((_ extract 8 8) C1) (_ bv0 1)) true) (_ bv8 41) (ite (and (distinct ((_ extract 7 7) C1) (_ bv0 1)) true) (_ bv7 41) (_ bv6 41)))))
 (let ((?x3735 (ite (and (distinct ((_ extract 10 9) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 10 10) C1) (_ bv0 1)) true) (_ bv10 41) (_ bv9 41)) ?x3729)))
 (let ((?x5289 (ite (and (distinct ((_ extract 10 6) C1) (_ bv0 5)) true) ?x3735 (ite (and (distinct ((_ extract 5 3) C1) (_ bv0 3)) true) ?x4359 ?x5878))))
 (let ((?x6478 (ite (and (distinct ((_ extract 13 13) C1) (_ bv0 1)) true) (_ bv13 41) (ite (and (distinct ((_ extract 12 12) C1) (_ bv0 1)) true) (_ bv12 41) (_ bv11 41)))))
 (let ((?x2099 (ite (and (distinct ((_ extract 15 14) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 15 15) C1) (_ bv0 1)) true) (_ bv15 41) (_ bv14 41)) ?x6478)))
 (let ((?x6833 (ite (and (distinct ((_ extract 18 18) C1) (_ bv0 1)) true) (_ bv18 41) (ite (and (distinct ((_ extract 17 17) C1) (_ bv0 1)) true) (_ bv17 41) (_ bv16 41)))))
 (let ((?x2073 (ite (and (distinct ((_ extract 20 19) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 20 20) C1) (_ bv0 1)) true) (_ bv20 41) (_ bv19 41)) ?x6833)))
 (let ((?x5258 (ite (and (distinct ((_ extract 20 11) C1) (_ bv0 10)) true) (ite (and (distinct ((_ extract 20 16) C1) (_ bv0 5)) true) ?x2073 ?x2099) ?x5289)))
 (let ((?x5370 (ite (and (distinct ((_ extract 23 23) C1) (_ bv0 1)) true) (_ bv23 41) (ite (and (distinct ((_ extract 22 22) C1) (_ bv0 1)) true) (_ bv22 41) (_ bv21 41)))))
 (let ((?x1258 (ite (and (distinct ((_ extract 25 24) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 25 25) C1) (_ bv0 1)) true) (_ bv25 41) (_ bv24 41)) ?x5370)))
 (let ((?x4811 (ite (and (distinct ((_ extract 28 28) C1) (_ bv0 1)) true) (_ bv28 41) (ite (and (distinct ((_ extract 27 27) C1) (_ bv0 1)) true) (_ bv27 41) (_ bv26 41)))))
 (let ((?x6454 (ite (and (distinct ((_ extract 30 29) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 30 30) C1) (_ bv0 1)) true) (_ bv30 41) (_ bv29 41)) ?x4811)))
 (let ((?x3437 (ite (and (distinct ((_ extract 33 33) C1) (_ bv0 1)) true) (_ bv33 41) (ite (and (distinct ((_ extract 32 32) C1) (_ bv0 1)) true) (_ bv32 41) (_ bv31 41)))))
 (let ((?x3266 (ite (and (distinct ((_ extract 35 34) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 35 35) C1) (_ bv0 1)) true) (_ bv35 41) (_ bv34 41)) ?x3437)))
 (let ((?x6554 (ite (and (distinct ((_ extract 38 38) C1) (_ bv0 1)) true) (_ bv38 41) (ite (and (distinct ((_ extract 37 37) C1) (_ bv0 1)) true) (_ bv37 41) (_ bv36 41)))))
 (let ((?x3329 (ite (and (distinct ((_ extract 40 39) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 40 40) C1) (_ bv0 1)) true) (_ bv40 41) (_ bv39 41)) ?x6554)))
 (let ((?x6832 (ite (and (distinct ((_ extract 40 31) C1) (_ bv0 10)) true) (ite (and (distinct ((_ extract 40 36) C1) (_ bv0 5)) true) ?x3329 ?x3266) (ite (and (distinct ((_ extract 30 26) C1) (_ bv0 5)) true) ?x6454 ?x1258))))
 (let ((?x5782 (bvsub (ite (and (distinct ((_ extract 40 21) C1) (_ bv0 20)) true) ?x6832 ?x5258) ?x6475)))
 (let ((?x2755 (ite (and (distinct ((_ extract 2 2) C1) (_ bv0 1)) true) (_ bv2 32) (ite (and (distinct ((_ extract 1 1) C1) (_ bv0 1)) true) (_ bv1 32) (_ bv0 32)))))
 (let ((?x5790 (ite (and (distinct ((_ extract 5 5) C1) (_ bv0 1)) true) (_ bv5 32) (ite (and (distinct ((_ extract 4 4) C1) (_ bv0 1)) true) (_ bv4 32) (_ bv3 32)))))
 (let ((?x6463 (ite (and (distinct ((_ extract 8 8) C1) (_ bv0 1)) true) (_ bv8 32) (ite (and (distinct ((_ extract 7 7) C1) (_ bv0 1)) true) (_ bv7 32) (_ bv6 32)))))
 (let ((?x6389 (ite (and (distinct ((_ extract 10 9) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 10 10) C1) (_ bv0 1)) true) (_ bv10 32) (_ bv9 32)) ?x6463)))
 (let ((?x4489 (ite (and (distinct ((_ extract 10 6) C1) (_ bv0 5)) true) ?x6389 (ite (and (distinct ((_ extract 5 3) C1) (_ bv0 3)) true) ?x5790 ?x2755))))
 (let ((?x4231 (ite (and (distinct ((_ extract 13 13) C1) (_ bv0 1)) true) (_ bv13 32) (ite (and (distinct ((_ extract 12 12) C1) (_ bv0 1)) true) (_ bv12 32) (_ bv11 32)))))
 (let ((?x6343 (ite (and (distinct ((_ extract 15 14) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 15 15) C1) (_ bv0 1)) true) (_ bv15 32) (_ bv14 32)) ?x4231)))
 (let ((?x4142 (ite (and (distinct ((_ extract 18 18) C1) (_ bv0 1)) true) (_ bv18 32) (ite (and (distinct ((_ extract 17 17) C1) (_ bv0 1)) true) (_ bv17 32) (_ bv16 32)))))
 (let ((?x4044 (ite (and (distinct ((_ extract 20 19) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 20 20) C1) (_ bv0 1)) true) (_ bv20 32) (_ bv19 32)) ?x4142)))
 (let ((?x4537 (ite (and (distinct ((_ extract 20 11) C1) (_ bv0 10)) true) (ite (and (distinct ((_ extract 20 16) C1) (_ bv0 5)) true) ?x4044 ?x6343) ?x4489)))
 (let ((?x2944 (ite (and (distinct ((_ extract 23 23) C1) (_ bv0 1)) true) (_ bv23 32) (ite (and (distinct ((_ extract 22 22) C1) (_ bv0 1)) true) (_ bv22 32) (_ bv21 32)))))
 (let ((?x2933 (ite (and (distinct ((_ extract 25 24) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 25 25) C1) (_ bv0 1)) true) (_ bv25 32) (_ bv24 32)) ?x2944)))
 (let ((?x3483 (ite (and (distinct ((_ extract 28 28) C1) (_ bv0 1)) true) (_ bv28 32) (ite (and (distinct ((_ extract 27 27) C1) (_ bv0 1)) true) (_ bv27 32) (_ bv26 32)))))
 (let ((?x2224 (ite (and (distinct ((_ extract 30 29) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 30 30) C1) (_ bv0 1)) true) (_ bv30 32) (_ bv29 32)) ?x3483)))
 (let ((?x2437 (ite (and (distinct ((_ extract 33 33) C1) (_ bv0 1)) true) (_ bv33 32) (ite (and (distinct ((_ extract 32 32) C1) (_ bv0 1)) true) (_ bv32 32) (_ bv31 32)))))
 (let ((?x1347 (ite (and (distinct ((_ extract 35 34) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 35 35) C1) (_ bv0 1)) true) (_ bv35 32) (_ bv34 32)) ?x2437)))
 (let ((?x3656 (ite (and (distinct ((_ extract 38 38) C1) (_ bv0 1)) true) (_ bv38 32) (ite (and (distinct ((_ extract 37 37) C1) (_ bv0 1)) true) (_ bv37 32) (_ bv36 32)))))
 (let ((?x1860 (ite (and (distinct ((_ extract 40 39) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 40 40) C1) (_ bv0 1)) true) (_ bv40 32) (_ bv39 32)) ?x3656)))
 (let ((?x3535 (ite (and (distinct ((_ extract 40 31) C1) (_ bv0 10)) true) (ite (and (distinct ((_ extract 40 36) C1) (_ bv0 5)) true) ?x1860 ?x1347) (ite (and (distinct ((_ extract 30 26) C1) (_ bv0 5)) true) ?x2224 ?x2933))))
 (let ((?x4265 (ite (and (distinct ((_ extract 2 2) C2) (_ bv0 1)) true) (_ bv2 32) (ite (and (distinct ((_ extract 1 1) C2) (_ bv0 1)) true) (_ bv1 32) (_ bv0 32)))))
 (let ((?x2213 (ite (and (distinct ((_ extract 5 5) C2) (_ bv0 1)) true) (_ bv5 32) (ite (and (distinct ((_ extract 4 4) C2) (_ bv0 1)) true) (_ bv4 32) (_ bv3 32)))))
 (let ((?x5306 (ite (and (distinct ((_ extract 8 8) C2) (_ bv0 1)) true) (_ bv8 32) (ite (and (distinct ((_ extract 7 7) C2) (_ bv0 1)) true) (_ bv7 32) (_ bv6 32)))))
 (let ((?x3884 (ite (and (distinct ((_ extract 10 9) C2) (_ bv0 2)) true) (ite (and (distinct ((_ extract 10 10) C2) (_ bv0 1)) true) (_ bv10 32) (_ bv9 32)) ?x5306)))
 (let ((?x6120 (ite (and (distinct ((_ extract 10 6) C2) (_ bv0 5)) true) ?x3884 (ite (and (distinct ((_ extract 5 3) C2) (_ bv0 3)) true) ?x2213 ?x4265))))
 (and (and (and (distinct C1 (_ bv0 41)) true) (= (bvand C1 (bvsub C1 (_ bv1 41))) (_ bv0 41))) (and (and (distinct C2 (_ bv0 11)) true) (= (bvand C2 (bvsub C2 (_ bv1 11))) (_ bv0 11))) (bvslt ?x6120 (ite (and (distinct ((_ extract 40 21) C1) (_ bv0 20)) true) ?x3535 ?x4537)) (not (bvult ?x5782 (_ bv41 41))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
