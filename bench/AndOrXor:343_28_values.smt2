(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C2 () (_ BitVec 30))
(declare-fun %B () (_ BitVec 30))
(declare-fun %A () (_ BitVec 30))
(declare-fun C1 () (_ BitVec 30))
(declare-fun |ana_MaskedValueIsZero(%B, ((1 << (width(C2) - countLeadingZeros(((C2 - 1) ^ C2)))) - 1))| () (_ BitVec 1))
(assert
 (let (($x66705 (and (distinct (bvand (bvadd (bvand %A C1) %B) C2) (bvand (bvadd %A %B) C2)) true)))
 (let (($x64669 (= |ana_MaskedValueIsZero(%B, ((1 << (width(C2) - countLeadingZeros(((C2 - 1) ^ C2)))) - 1))| (_ bv1 1))))
 (let ((?x12577 (bvsub C2 (_ bv1 30))))
 (let ((?x66436 (bvor ?x12577 C2)))
 (let (($x68308 (and (and (distinct ?x66436 (_ bv0 30)) true) (= (bvand (bvadd ?x66436 (_ bv1 30)) ?x66436) (_ bv0 30)) $x64669)))
 (let (($x63663 (or (= (bvand (bvadd C2 (_ bv1 30)) (bvsub (bvadd C2 (_ bv1 30)) (_ bv1 30))) (_ bv0 30)) $x68308)))
 (let ((?x53168 (bvand C1 C2)))
 (let (($x68332 (= ?x53168 C2)))
 (let ((?x66771 (ite (= ((_ extract 1 1) (bvxor ?x12577 C2)) (_ bv1 1)) (_ bv28 30) (ite (= ((_ extract 0 0) (bvxor ?x12577 C2)) (_ bv1 1)) (_ bv29 30) (_ bv30 30)))))
 (let ((?x66364 (ite (= ((_ extract 3 3) (bvxor ?x12577 C2)) (_ bv1 1)) (_ bv26 30) (ite (= ((_ extract 2 2) (bvxor ?x12577 C2)) (_ bv1 1)) (_ bv27 30) ?x66771))))
 (let ((?x67254 (ite (= ((_ extract 5 5) (bvxor ?x12577 C2)) (_ bv1 1)) (_ bv24 30) (ite (= ((_ extract 4 4) (bvxor ?x12577 C2)) (_ bv1 1)) (_ bv25 30) ?x66364))))
 (let ((?x67253 (ite (= ((_ extract 7 7) (bvxor ?x12577 C2)) (_ bv1 1)) (_ bv22 30) (ite (= ((_ extract 6 6) (bvxor ?x12577 C2)) (_ bv1 1)) (_ bv23 30) ?x67254))))
 (let ((?x67163 (ite (= ((_ extract 9 9) (bvxor ?x12577 C2)) (_ bv1 1)) (_ bv20 30) (ite (= ((_ extract 8 8) (bvxor ?x12577 C2)) (_ bv1 1)) (_ bv21 30) ?x67253))))
 (let ((?x66048 (ite (= ((_ extract 11 11) (bvxor ?x12577 C2)) (_ bv1 1)) (_ bv18 30) (ite (= ((_ extract 10 10) (bvxor ?x12577 C2)) (_ bv1 1)) (_ bv19 30) ?x67163))))
 (let ((?x67982 (ite (= ((_ extract 13 13) (bvxor ?x12577 C2)) (_ bv1 1)) (_ bv16 30) (ite (= ((_ extract 12 12) (bvxor ?x12577 C2)) (_ bv1 1)) (_ bv17 30) ?x66048))))
 (let ((?x67372 (ite (= ((_ extract 15 15) (bvxor ?x12577 C2)) (_ bv1 1)) (_ bv14 30) (ite (= ((_ extract 14 14) (bvxor ?x12577 C2)) (_ bv1 1)) (_ bv15 30) ?x67982))))
 (let ((?x67310 (ite (= ((_ extract 17 17) (bvxor ?x12577 C2)) (_ bv1 1)) (_ bv12 30) (ite (= ((_ extract 16 16) (bvxor ?x12577 C2)) (_ bv1 1)) (_ bv13 30) ?x67372))))
 (let ((?x67679 (ite (= ((_ extract 19 19) (bvxor ?x12577 C2)) (_ bv1 1)) (_ bv10 30) (ite (= ((_ extract 18 18) (bvxor ?x12577 C2)) (_ bv1 1)) (_ bv11 30) ?x67310))))
 (let ((?x67880 (ite (= ((_ extract 21 21) (bvxor ?x12577 C2)) (_ bv1 1)) (_ bv8 30) (ite (= ((_ extract 20 20) (bvxor ?x12577 C2)) (_ bv1 1)) (_ bv9 30) ?x67679))))
 (let ((?x67829 (ite (= ((_ extract 23 23) (bvxor ?x12577 C2)) (_ bv1 1)) (_ bv6 30) (ite (= ((_ extract 22 22) (bvxor ?x12577 C2)) (_ bv1 1)) (_ bv7 30) ?x67880))))
 (let ((?x68569 (ite (= ((_ extract 25 25) (bvxor ?x12577 C2)) (_ bv1 1)) (_ bv4 30) (ite (= ((_ extract 24 24) (bvxor ?x12577 C2)) (_ bv1 1)) (_ bv5 30) ?x67829))))
 (let ((?x68568 (ite (= ((_ extract 27 27) (bvxor ?x12577 C2)) (_ bv1 1)) (_ bv2 30) (ite (= ((_ extract 26 26) (bvxor ?x12577 C2)) (_ bv1 1)) (_ bv3 30) ?x68569))))
 (let ((?x68261 (ite (= ((_ extract 29 29) (bvxor ?x12577 C2)) (_ bv1 1)) (_ bv0 30) (ite (= ((_ extract 28 28) (bvxor ?x12577 C2)) (_ bv1 1)) (_ bv1 30) ?x68568))))
 (let (($x67049 (=> $x64669 (= (bvand %B (bvsub (bvshl (_ bv1 30) (bvsub (_ bv30 30) ?x68261)) (_ bv1 30))) (_ bv0 30)))))
 (and $x67049 $x68332 $x63663 $x66705))))))))))))))))))))))))))
(check-sat)
