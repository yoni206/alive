(set-info :status unknown)
(declare-fun mem0 () (_ BitVec 8))
(declare-fun %x () (_ BitVec 29))
(declare-fun %p1 () (_ BitVec 64))
(declare-fun idx () (_ BitVec 64))
(declare-fun |ana_equivalentAddressValues(%p1, %p2)| () (_ BitVec 1))
(declare-fun %p2 () (_ BitVec 64))
(assert
 (let ((?x18459 (concat ((_ extract 7 5) mem0) ((_ extract 4 0) %x))))
 (let ((?x318 (ite (and (and (distinct %p1 (_ bv0 64)) true) (or true true) (= idx %p1)) ?x18459 mem0)))
 (let ((?x17832 ((_ extract 12 5) %x)))
 (let (($x10679 (or true true)))
 (let (($x10275 (and (distinct %p1 (_ bv0 64)) true)))
 (let ((?x3186 (ite (and $x10275 $x10679 (= idx (bvadd (bvadd %p1 (_ bv1 64)) (_ bv0 64)))) ?x17832 ?x318)))
 (let ((?x18254 ((_ extract 20 13) %x)))
 (let ((?x6124 (ite (and $x10275 $x10679 (= idx (bvadd (bvadd %p1 (_ bv1 64)) (_ bv1 64)))) ?x18254 ?x3186)))
 (let ((?x21807 ((_ extract 28 21) %x)))
 (let ((?x7281 (ite (and $x10275 $x10679 (= idx (bvadd (bvadd %p1 (_ bv1 64)) (_ bv2 64)))) ?x21807 ?x6124)))
 (let (($x23453 (= |ana_equivalentAddressValues(%p1, %p2)| (_ bv1 1))))
 (and (=> $x23453 (= %p1 %p2)) $x23453 (and (distinct ?x7281 ?x7281) true))))))))))))))
(check-sat)
