(set-info :status unknown)
(declare-fun %Y () (_ BitVec 11))
(declare-fun C2 () (_ BitVec 11))
(declare-fun C1 () (_ BitVec 18))
(declare-fun %X () (_ BitVec 18))
(assert
 (let ((?x4168 (ite (and (distinct ((_ extract 2 2) C2) (_ bv0 1)) true) (_ bv2 18) (ite (and (distinct ((_ extract 1 1) C2) (_ bv0 1)) true) (_ bv1 18) (_ bv0 18)))))
 (let ((?x1976 (ite (and (distinct ((_ extract 5 5) C2) (_ bv0 1)) true) (_ bv5 18) (ite (and (distinct ((_ extract 4 4) C2) (_ bv0 1)) true) (_ bv4 18) (_ bv3 18)))))
 (let ((?x2460 (ite (and (distinct ((_ extract 8 8) C2) (_ bv0 1)) true) (_ bv8 18) (ite (and (distinct ((_ extract 7 7) C2) (_ bv0 1)) true) (_ bv7 18) (_ bv6 18)))))
 (let ((?x1285 (ite (and (distinct ((_ extract 10 9) C2) (_ bv0 2)) true) (ite (and (distinct ((_ extract 10 10) C2) (_ bv0 1)) true) (_ bv10 18) (_ bv9 18)) ?x2460)))
 (let ((?x2107 (ite (and (distinct ((_ extract 10 6) C2) (_ bv0 5)) true) ?x1285 (ite (and (distinct ((_ extract 5 3) C2) (_ bv0 3)) true) ?x1976 ?x4168))))
 (let ((?x1492 (ite (and (distinct ((_ extract 2 2) C1) (_ bv0 1)) true) (_ bv2 18) (ite (and (distinct ((_ extract 1 1) C1) (_ bv0 1)) true) (_ bv1 18) (_ bv0 18)))))
 (let ((?x4077 (ite (and (distinct ((_ extract 4 3) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 4 4) C1) (_ bv0 1)) true) (_ bv4 18) (_ bv3 18)) ?x1492)))
 (let ((?x5524 (ite (and (distinct ((_ extract 8 7) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 8 8) C1) (_ bv0 1)) true) (_ bv8 18) (_ bv7 18)) (ite (and (distinct ((_ extract 6 6) C1) (_ bv0 1)) true) (_ bv6 18) (_ bv5 18)))))
 (let ((?x6122 (ite (and (distinct ((_ extract 11 11) C1) (_ bv0 1)) true) (_ bv11 18) (ite (and (distinct ((_ extract 10 10) C1) (_ bv0 1)) true) (_ bv10 18) (_ bv9 18)))))
 (let ((?x1632 (ite (and (distinct ((_ extract 13 12) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 13 13) C1) (_ bv0 1)) true) (_ bv13 18) (_ bv12 18)) ?x6122)))
 (let ((?x3403 (ite (and (distinct ((_ extract 17 16) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 17 17) C1) (_ bv0 1)) true) (_ bv17 18) (_ bv16 18)) (ite (and (distinct ((_ extract 15 15) C1) (_ bv0 1)) true) (_ bv15 18) (_ bv14 18)))))
 (let ((?x3885 (ite (and (distinct ((_ extract 17 9) C1) (_ bv0 9)) true) (ite (and (distinct ((_ extract 17 14) C1) (_ bv0 4)) true) ?x3403 ?x1632) (ite (and (distinct ((_ extract 8 5) C1) (_ bv0 4)) true) ?x5524 ?x4077))))
 (let ((?x2951 (bvsub ?x3885 ?x2107)))
 (let ((?x5485 (bvand %X C1)))
 (let (($x1975 (and (distinct (ite (= (ite (= ?x5485 (_ bv0 18)) (_ bv1 1) (_ bv0 1)) (_ bv1 1)) (bvor %Y C2) %Y) (bvor (bvxor ((_ extract 10 0) (bvlshr ?x5485 ?x2951)) C2) %Y)) true)))
 (let ((?x1875 (ite (and (distinct ((_ extract 2 2) C1) (_ bv0 1)) true) (_ bv2 32) (ite (and (distinct ((_ extract 1 1) C1) (_ bv0 1)) true) (_ bv1 32) (_ bv0 32)))))
 (let ((?x1755 (ite (and (distinct ((_ extract 4 3) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 4 4) C1) (_ bv0 1)) true) (_ bv4 32) (_ bv3 32)) ?x1875)))
 (let ((?x1216 (ite (and (distinct ((_ extract 8 7) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 8 8) C1) (_ bv0 1)) true) (_ bv8 32) (_ bv7 32)) (ite (and (distinct ((_ extract 6 6) C1) (_ bv0 1)) true) (_ bv6 32) (_ bv5 32)))))
 (let ((?x1144 (ite (and (distinct ((_ extract 11 11) C1) (_ bv0 1)) true) (_ bv11 32) (ite (and (distinct ((_ extract 10 10) C1) (_ bv0 1)) true) (_ bv10 32) (_ bv9 32)))))
 (let ((?x6684 (ite (and (distinct ((_ extract 13 12) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 13 13) C1) (_ bv0 1)) true) (_ bv13 32) (_ bv12 32)) ?x1144)))
 (let ((?x4963 (ite (and (distinct ((_ extract 17 16) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 17 17) C1) (_ bv0 1)) true) (_ bv17 32) (_ bv16 32)) (ite (and (distinct ((_ extract 15 15) C1) (_ bv0 1)) true) (_ bv15 32) (_ bv14 32)))))
 (let ((?x2191 (ite (and (distinct ((_ extract 17 9) C1) (_ bv0 9)) true) (ite (and (distinct ((_ extract 17 14) C1) (_ bv0 4)) true) ?x4963 ?x6684) (ite (and (distinct ((_ extract 8 5) C1) (_ bv0 4)) true) ?x1216 ?x1755))))
 (let ((?x1317 (ite (and (distinct ((_ extract 2 2) C2) (_ bv0 1)) true) (_ bv2 32) (ite (and (distinct ((_ extract 1 1) C2) (_ bv0 1)) true) (_ bv1 32) (_ bv0 32)))))
 (let ((?x3477 (ite (and (distinct ((_ extract 5 5) C2) (_ bv0 1)) true) (_ bv5 32) (ite (and (distinct ((_ extract 4 4) C2) (_ bv0 1)) true) (_ bv4 32) (_ bv3 32)))))
 (let ((?x5694 (ite (and (distinct ((_ extract 8 8) C2) (_ bv0 1)) true) (_ bv8 32) (ite (and (distinct ((_ extract 7 7) C2) (_ bv0 1)) true) (_ bv7 32) (_ bv6 32)))))
 (let ((?x4456 (ite (and (distinct ((_ extract 10 9) C2) (_ bv0 2)) true) (ite (and (distinct ((_ extract 10 10) C2) (_ bv0 1)) true) (_ bv10 32) (_ bv9 32)) ?x5694)))
 (let ((?x4119 (ite (and (distinct ((_ extract 10 6) C2) (_ bv0 5)) true) ?x4456 (ite (and (distinct ((_ extract 5 3) C2) (_ bv0 3)) true) ?x3477 ?x1317))))
 (and (and (and (distinct C1 (_ bv0 18)) true) (= (bvand C1 (bvsub C1 (_ bv1 18))) (_ bv0 18))) (and (and (distinct C2 (_ bv0 11)) true) (= (bvand C2 (bvsub C2 (_ bv1 11))) (_ bv0 11))) (bvslt ?x4119 ?x2191) $x1975)))))))))))))))))))))))))))))
(check-sat)
