(set-info :status unknown)
(declare-fun %Y () (_ BitVec 11))
(declare-fun C2 () (_ BitVec 11))
(declare-fun C1 () (_ BitVec 18))
(declare-fun %X () (_ BitVec 18))
(assert
 (let ((?x1535 (ite (and (distinct ((_ extract 2 2) C2) (_ bv0 1)) true) (_ bv2 18) (ite (and (distinct ((_ extract 1 1) C2) (_ bv0 1)) true) (_ bv1 18) (_ bv0 18)))))
 (let ((?x4259 (ite (and (distinct ((_ extract 5 5) C2) (_ bv0 1)) true) (_ bv5 18) (ite (and (distinct ((_ extract 4 4) C2) (_ bv0 1)) true) (_ bv4 18) (_ bv3 18)))))
 (let ((?x4790 (ite (and (distinct ((_ extract 8 8) C2) (_ bv0 1)) true) (_ bv8 18) (ite (and (distinct ((_ extract 7 7) C2) (_ bv0 1)) true) (_ bv7 18) (_ bv6 18)))))
 (let ((?x2439 (ite (and (distinct ((_ extract 10 9) C2) (_ bv0 2)) true) (ite (and (distinct ((_ extract 10 10) C2) (_ bv0 1)) true) (_ bv10 18) (_ bv9 18)) ?x4790)))
 (let ((?x1779 (ite (and (distinct ((_ extract 10 6) C2) (_ bv0 5)) true) ?x2439 (ite (and (distinct ((_ extract 5 3) C2) (_ bv0 3)) true) ?x4259 ?x1535))))
 (let ((?x5508 (ite (and (distinct ((_ extract 2 2) C1) (_ bv0 1)) true) (_ bv2 18) (ite (and (distinct ((_ extract 1 1) C1) (_ bv0 1)) true) (_ bv1 18) (_ bv0 18)))))
 (let ((?x3448 (ite (and (distinct ((_ extract 4 3) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 4 4) C1) (_ bv0 1)) true) (_ bv4 18) (_ bv3 18)) ?x5508)))
 (let ((?x3757 (ite (and (distinct ((_ extract 8 7) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 8 8) C1) (_ bv0 1)) true) (_ bv8 18) (_ bv7 18)) (ite (and (distinct ((_ extract 6 6) C1) (_ bv0 1)) true) (_ bv6 18) (_ bv5 18)))))
 (let ((?x1349 (ite (and (distinct ((_ extract 11 11) C1) (_ bv0 1)) true) (_ bv11 18) (ite (and (distinct ((_ extract 10 10) C1) (_ bv0 1)) true) (_ bv10 18) (_ bv9 18)))))
 (let ((?x4720 (ite (and (distinct ((_ extract 13 12) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 13 13) C1) (_ bv0 1)) true) (_ bv13 18) (_ bv12 18)) ?x1349)))
 (let ((?x3866 (ite (and (distinct ((_ extract 17 16) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 17 17) C1) (_ bv0 1)) true) (_ bv17 18) (_ bv16 18)) (ite (and (distinct ((_ extract 15 15) C1) (_ bv0 1)) true) (_ bv15 18) (_ bv14 18)))))
 (let ((?x5392 (ite (and (distinct ((_ extract 17 9) C1) (_ bv0 9)) true) (ite (and (distinct ((_ extract 17 14) C1) (_ bv0 4)) true) ?x3866 ?x4720) (ite (and (distinct ((_ extract 8 5) C1) (_ bv0 4)) true) ?x3757 ?x3448))))
 (let ((?x2943 (bvsub ?x5392 ?x1779)))
 (let ((?x3730 (bvand %X C1)))
 (let ((?x4365 (bvor %Y C2)))
 (let (($x3011 (and (distinct (ite (= (ite (and (distinct ?x3730 (_ bv0 18)) true) (_ bv1 1) (_ bv0 1)) (_ bv1 1)) %Y ?x4365) (bvor (bvxor ((_ extract 10 0) (bvlshr ?x3730 ?x2943)) C2) %Y)) true)))
 (let ((?x1651 (ite (and (distinct ((_ extract 2 2) C1) (_ bv0 1)) true) (_ bv2 32) (ite (and (distinct ((_ extract 1 1) C1) (_ bv0 1)) true) (_ bv1 32) (_ bv0 32)))))
 (let ((?x1961 (ite (and (distinct ((_ extract 4 3) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 4 4) C1) (_ bv0 1)) true) (_ bv4 32) (_ bv3 32)) ?x1651)))
 (let ((?x1204 (ite (and (distinct ((_ extract 8 7) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 8 8) C1) (_ bv0 1)) true) (_ bv8 32) (_ bv7 32)) (ite (and (distinct ((_ extract 6 6) C1) (_ bv0 1)) true) (_ bv6 32) (_ bv5 32)))))
 (let ((?x4667 (ite (and (distinct ((_ extract 11 11) C1) (_ bv0 1)) true) (_ bv11 32) (ite (and (distinct ((_ extract 10 10) C1) (_ bv0 1)) true) (_ bv10 32) (_ bv9 32)))))
 (let ((?x4199 (ite (and (distinct ((_ extract 13 12) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 13 13) C1) (_ bv0 1)) true) (_ bv13 32) (_ bv12 32)) ?x4667)))
 (let ((?x2610 (ite (and (distinct ((_ extract 17 16) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 17 17) C1) (_ bv0 1)) true) (_ bv17 32) (_ bv16 32)) (ite (and (distinct ((_ extract 15 15) C1) (_ bv0 1)) true) (_ bv15 32) (_ bv14 32)))))
 (let ((?x1723 (ite (and (distinct ((_ extract 17 9) C1) (_ bv0 9)) true) (ite (and (distinct ((_ extract 17 14) C1) (_ bv0 4)) true) ?x2610 ?x4199) (ite (and (distinct ((_ extract 8 5) C1) (_ bv0 4)) true) ?x1204 ?x1961))))
 (let ((?x5368 (ite (and (distinct ((_ extract 2 2) C2) (_ bv0 1)) true) (_ bv2 32) (ite (and (distinct ((_ extract 1 1) C2) (_ bv0 1)) true) (_ bv1 32) (_ bv0 32)))))
 (let ((?x4547 (ite (and (distinct ((_ extract 5 5) C2) (_ bv0 1)) true) (_ bv5 32) (ite (and (distinct ((_ extract 4 4) C2) (_ bv0 1)) true) (_ bv4 32) (_ bv3 32)))))
 (let ((?x5285 (ite (and (distinct ((_ extract 8 8) C2) (_ bv0 1)) true) (_ bv8 32) (ite (and (distinct ((_ extract 7 7) C2) (_ bv0 1)) true) (_ bv7 32) (_ bv6 32)))))
 (let ((?x2276 (ite (and (distinct ((_ extract 10 9) C2) (_ bv0 2)) true) (ite (and (distinct ((_ extract 10 10) C2) (_ bv0 1)) true) (_ bv10 32) (_ bv9 32)) ?x5285)))
 (let ((?x5063 (ite (and (distinct ((_ extract 10 6) C2) (_ bv0 5)) true) ?x2276 (ite (and (distinct ((_ extract 5 3) C2) (_ bv0 3)) true) ?x4547 ?x5368))))
 (and (and (and (distinct C1 (_ bv0 18)) true) (= (bvand C1 (bvsub C1 (_ bv1 18))) (_ bv0 18))) (and (and (distinct C2 (_ bv0 11)) true) (= (bvand C2 (bvsub C2 (_ bv1 11))) (_ bv0 11))) (bvslt ?x5063 ?x1723) $x3011))))))))))))))))))))))))))))))
(check-sat)
