(set-info :status unknown)
(declare-fun C2 () (_ BitVec 11))
(declare-fun C1 () (_ BitVec 20))
(assert
 (let ((?x7252 (ite (and (distinct ((_ extract 2 2) C2) (_ bv0 1)) true) (_ bv2 20) (ite (and (distinct ((_ extract 1 1) C2) (_ bv0 1)) true) (_ bv1 20) (_ bv0 20)))))
 (let ((?x1568 (ite (and (distinct ((_ extract 5 5) C2) (_ bv0 1)) true) (_ bv5 20) (ite (and (distinct ((_ extract 4 4) C2) (_ bv0 1)) true) (_ bv4 20) (_ bv3 20)))))
 (let ((?x4003 (ite (and (distinct ((_ extract 8 8) C2) (_ bv0 1)) true) (_ bv8 20) (ite (and (distinct ((_ extract 7 7) C2) (_ bv0 1)) true) (_ bv7 20) (_ bv6 20)))))
 (let ((?x10746 (ite (and (distinct ((_ extract 10 9) C2) (_ bv0 2)) true) (ite (and (distinct ((_ extract 10 10) C2) (_ bv0 1)) true) (_ bv10 20) (_ bv9 20)) ?x4003)))
 (let ((?x22768 (ite (and (distinct ((_ extract 10 6) C2) (_ bv0 5)) true) ?x10746 (ite (and (distinct ((_ extract 5 3) C2) (_ bv0 3)) true) ?x1568 ?x7252))))
 (let ((?x5704 (ite (and (distinct ((_ extract 2 2) C1) (_ bv0 1)) true) (_ bv2 20) (ite (and (distinct ((_ extract 1 1) C1) (_ bv0 1)) true) (_ bv1 20) (_ bv0 20)))))
 (let ((?x16022 (ite (and (distinct ((_ extract 4 3) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 4 4) C1) (_ bv0 1)) true) (_ bv4 20) (_ bv3 20)) ?x5704)))
 (let ((?x7315 (ite (and (distinct ((_ extract 7 7) C1) (_ bv0 1)) true) (_ bv7 20) (ite (and (distinct ((_ extract 6 6) C1) (_ bv0 1)) true) (_ bv6 20) (_ bv5 20)))))
 (let ((?x17372 (ite (and (distinct ((_ extract 9 8) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 9 9) C1) (_ bv0 1)) true) (_ bv9 20) (_ bv8 20)) ?x7315)))
 (let ((?x24178 (ite (and (distinct ((_ extract 12 12) C1) (_ bv0 1)) true) (_ bv12 20) (ite (and (distinct ((_ extract 11 11) C1) (_ bv0 1)) true) (_ bv11 20) (_ bv10 20)))))
 (let ((?x21127 (ite (and (distinct ((_ extract 14 13) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 14 14) C1) (_ bv0 1)) true) (_ bv14 20) (_ bv13 20)) ?x24178)))
 (let ((?x15522 (ite (and (distinct ((_ extract 17 17) C1) (_ bv0 1)) true) (_ bv17 20) (ite (and (distinct ((_ extract 16 16) C1) (_ bv0 1)) true) (_ bv16 20) (_ bv15 20)))))
 (let ((?x2099 (ite (and (distinct ((_ extract 19 18) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 19 19) C1) (_ bv0 1)) true) (_ bv19 20) (_ bv18 20)) ?x15522)))
 (let ((?x1203 (ite (and (distinct ((_ extract 19 10) C1) (_ bv0 10)) true) (ite (and (distinct ((_ extract 19 15) C1) (_ bv0 5)) true) ?x2099 ?x21127) (ite (and (distinct ((_ extract 9 5) C1) (_ bv0 5)) true) ?x17372 ?x16022))))
 (let ((?x10903 (bvsub ?x1203 ?x22768)))
 (let ((?x7579 (ite (and (distinct ((_ extract 2 2) C1) (_ bv0 1)) true) (_ bv2 32) (ite (and (distinct ((_ extract 1 1) C1) (_ bv0 1)) true) (_ bv1 32) (_ bv0 32)))))
 (let ((?x7099 (ite (and (distinct ((_ extract 4 3) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 4 4) C1) (_ bv0 1)) true) (_ bv4 32) (_ bv3 32)) ?x7579)))
 (let ((?x11486 (ite (and (distinct ((_ extract 7 7) C1) (_ bv0 1)) true) (_ bv7 32) (ite (and (distinct ((_ extract 6 6) C1) (_ bv0 1)) true) (_ bv6 32) (_ bv5 32)))))
 (let ((?x22128 (ite (and (distinct ((_ extract 9 8) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 9 9) C1) (_ bv0 1)) true) (_ bv9 32) (_ bv8 32)) ?x11486)))
 (let ((?x12855 (ite (and (distinct ((_ extract 12 12) C1) (_ bv0 1)) true) (_ bv12 32) (ite (and (distinct ((_ extract 11 11) C1) (_ bv0 1)) true) (_ bv11 32) (_ bv10 32)))))
 (let ((?x5683 (ite (and (distinct ((_ extract 14 13) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 14 14) C1) (_ bv0 1)) true) (_ bv14 32) (_ bv13 32)) ?x12855)))
 (let ((?x14613 (ite (and (distinct ((_ extract 17 17) C1) (_ bv0 1)) true) (_ bv17 32) (ite (and (distinct ((_ extract 16 16) C1) (_ bv0 1)) true) (_ bv16 32) (_ bv15 32)))))
 (let ((?x20665 (ite (and (distinct ((_ extract 19 18) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 19 19) C1) (_ bv0 1)) true) (_ bv19 32) (_ bv18 32)) ?x14613)))
 (let ((?x13430 (ite (and (distinct ((_ extract 19 10) C1) (_ bv0 10)) true) (ite (and (distinct ((_ extract 19 15) C1) (_ bv0 5)) true) ?x20665 ?x5683) (ite (and (distinct ((_ extract 9 5) C1) (_ bv0 5)) true) ?x22128 ?x7099))))
 (let ((?x2148 (ite (and (distinct ((_ extract 2 2) C2) (_ bv0 1)) true) (_ bv2 32) (ite (and (distinct ((_ extract 1 1) C2) (_ bv0 1)) true) (_ bv1 32) (_ bv0 32)))))
 (let ((?x9951 (ite (and (distinct ((_ extract 5 5) C2) (_ bv0 1)) true) (_ bv5 32) (ite (and (distinct ((_ extract 4 4) C2) (_ bv0 1)) true) (_ bv4 32) (_ bv3 32)))))
 (let ((?x9130 (ite (and (distinct ((_ extract 8 8) C2) (_ bv0 1)) true) (_ bv8 32) (ite (and (distinct ((_ extract 7 7) C2) (_ bv0 1)) true) (_ bv7 32) (_ bv6 32)))))
 (let ((?x9873 (ite (and (distinct ((_ extract 10 9) C2) (_ bv0 2)) true) (ite (and (distinct ((_ extract 10 10) C2) (_ bv0 1)) true) (_ bv10 32) (_ bv9 32)) ?x9130)))
 (let ((?x8850 (ite (and (distinct ((_ extract 10 6) C2) (_ bv0 5)) true) ?x9873 (ite (and (distinct ((_ extract 5 3) C2) (_ bv0 3)) true) ?x9951 ?x2148))))
 (and (and (and (distinct C1 (_ bv0 20)) true) (= (bvand C1 (bvsub C1 (_ bv1 20))) (_ bv0 20))) (and (and (distinct C2 (_ bv0 11)) true) (= (bvand C2 (bvsub C2 (_ bv1 11))) (_ bv0 11))) (bvslt ?x8850 ?x13430) (not (bvult ?x10903 (_ bv20 20))))))))))))))))))))))))))))))))))
(check-sat)
