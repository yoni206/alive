(set-info :status unknown)
(declare-fun %Y () (_ BitVec 11))
(declare-fun C2 () (_ BitVec 11))
(declare-fun C1 () (_ BitVec 6))
(declare-fun %X () (_ BitVec 6))
(assert
 (let ((?x1958 (ite (and (distinct ((_ extract 2 2) C2) (_ bv0 1)) true) (_ bv2 6) (ite (and (distinct ((_ extract 1 1) C2) (_ bv0 1)) true) (_ bv1 6) (_ bv0 6)))))
 (let ((?x1593 (ite (and (distinct ((_ extract 5 5) C2) (_ bv0 1)) true) (_ bv5 6) (ite (and (distinct ((_ extract 4 4) C2) (_ bv0 1)) true) (_ bv4 6) (_ bv3 6)))))
 (let ((?x5084 (ite (and (distinct ((_ extract 8 8) C2) (_ bv0 1)) true) (_ bv8 6) (ite (and (distinct ((_ extract 7 7) C2) (_ bv0 1)) true) (_ bv7 6) (_ bv6 6)))))
 (let ((?x3967 (ite (and (distinct ((_ extract 10 9) C2) (_ bv0 2)) true) (ite (and (distinct ((_ extract 10 10) C2) (_ bv0 1)) true) (_ bv10 6) (_ bv9 6)) ?x5084)))
 (let ((?x3185 (ite (and (distinct ((_ extract 10 6) C2) (_ bv0 5)) true) ?x3967 (ite (and (distinct ((_ extract 5 3) C2) (_ bv0 3)) true) ?x1593 ?x1958))))
 (let ((?x5245 (ite (and (distinct ((_ extract 2 2) C1) (_ bv0 1)) true) (_ bv2 6) (ite (and (distinct ((_ extract 1 1) C1) (_ bv0 1)) true) (_ bv1 6) (_ bv0 6)))))
 (let ((?x6058 (ite (and (distinct ((_ extract 5 5) C1) (_ bv0 1)) true) (_ bv5 6) (ite (and (distinct ((_ extract 4 4) C1) (_ bv0 1)) true) (_ bv4 6) (_ bv3 6)))))
 (let ((?x5106 (bvsub (ite (and (distinct ((_ extract 5 3) C1) (_ bv0 3)) true) ?x6058 ?x5245) ?x3185)))
 (let ((?x4248 (bvand %X C1)))
 (let ((?x1252 (bvor %Y C2)))
 (let (($x4710 (and (distinct (ite (= (ite (and (distinct ?x4248 (_ bv0 6)) true) (_ bv1 1) (_ bv0 1)) (_ bv1 1)) ?x1252 %Y) (bvor ((_ zero_extend 5) (bvlshr ?x4248 ?x5106)) %Y)) true)))
 (let ((?x3250 (ite (and (distinct ((_ extract 2 2) C1) (_ bv0 1)) true) (_ bv2 32) (ite (and (distinct ((_ extract 1 1) C1) (_ bv0 1)) true) (_ bv1 32) (_ bv0 32)))))
 (let ((?x3388 (ite (and (distinct ((_ extract 5 5) C1) (_ bv0 1)) true) (_ bv5 32) (ite (and (distinct ((_ extract 4 4) C1) (_ bv0 1)) true) (_ bv4 32) (_ bv3 32)))))
 (let ((?x6856 (ite (and (distinct ((_ extract 2 2) C2) (_ bv0 1)) true) (_ bv2 32) (ite (and (distinct ((_ extract 1 1) C2) (_ bv0 1)) true) (_ bv1 32) (_ bv0 32)))))
 (let ((?x3898 (ite (and (distinct ((_ extract 5 5) C2) (_ bv0 1)) true) (_ bv5 32) (ite (and (distinct ((_ extract 4 4) C2) (_ bv0 1)) true) (_ bv4 32) (_ bv3 32)))))
 (let ((?x3081 (ite (and (distinct ((_ extract 8 8) C2) (_ bv0 1)) true) (_ bv8 32) (ite (and (distinct ((_ extract 7 7) C2) (_ bv0 1)) true) (_ bv7 32) (_ bv6 32)))))
 (let ((?x2597 (ite (and (distinct ((_ extract 10 9) C2) (_ bv0 2)) true) (ite (and (distinct ((_ extract 10 10) C2) (_ bv0 1)) true) (_ bv10 32) (_ bv9 32)) ?x3081)))
 (let ((?x5062 (ite (and (distinct ((_ extract 10 6) C2) (_ bv0 5)) true) ?x2597 (ite (and (distinct ((_ extract 5 3) C2) (_ bv0 3)) true) ?x3898 ?x6856))))
 (and (and (and (distinct C1 (_ bv0 6)) true) (= (bvand C1 (bvsub C1 (_ bv1 6))) (_ bv0 6))) (and (and (distinct C2 (_ bv0 11)) true) (= (bvand C2 (bvsub C2 (_ bv1 11))) (_ bv0 11))) (bvslt ?x5062 (ite (and (distinct ((_ extract 5 3) C1) (_ bv0 3)) true) ?x3388 ?x3250)) $x4710))))))))))))))))))))
(check-sat)
