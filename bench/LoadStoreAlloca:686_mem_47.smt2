(set-info :status unknown)
(declare-fun mem0 () (_ BitVec 8))
(declare-fun %p2 () (_ BitVec 64))
(declare-fun idx () (_ BitVec 64))
(declare-fun %p1 () (_ BitVec 64))
(declare-fun |ana_equivalentAddressValues(%p1, %p2)| () (_ BitVec 1))
(assert
 (let ((?x6215 (concat (concat (concat (concat (concat mem0 mem0) mem0) mem0) mem0) mem0)))
 (let ((?x9408 (concat ?x6215 ((_ extract 2 0) mem0))))
 (let (($x10926 (or true true)))
 (let (($x15642 (and (distinct %p2 (_ bv0 64)) true)))
 (let (($x11770 (and (distinct %p1 (_ bv0 64)) true)))
 (let ((?x14440 (ite (and $x11770 $x10926 $x11770 $x10926 $x11770 $x10926 $x15642 $x10926 (= idx %p2)) (concat ((_ extract 7 3) mem0) ((_ extract 2 0) ?x9408)) mem0)))
 (let (($x11121 (and $x11770 $x10926 $x11770 $x10926 $x11770 $x10926 $x15642 $x10926 (= idx (bvadd (bvadd %p2 (_ bv1 64)) (_ bv0 64))))))
 (let (($x13808 (and $x11770 $x10926 $x11770 $x10926 $x11770 $x10926 $x15642 $x10926 (= idx (bvadd (bvadd %p2 (_ bv1 64)) (_ bv1 64))))))
 (let (($x17826 (and $x11770 $x10926 $x11770 $x10926 $x11770 $x10926 $x15642 $x10926 (= idx (bvadd (bvadd %p2 (_ bv1 64)) (_ bv2 64))))))
 (let ((?x15398 (ite $x17826 ((_ extract 26 19) ?x9408) (ite $x13808 ((_ extract 18 11) ?x9408) (ite $x11121 ((_ extract 10 3) ?x9408) ?x14440)))))
 (let (($x20180 (and $x11770 $x10926 $x11770 $x10926 $x11770 $x10926 $x15642 $x10926 (= idx (bvadd (bvadd %p2 (_ bv1 64)) (_ bv3 64))))))
 (let (($x16308 (and $x11770 $x10926 $x11770 $x10926 $x11770 $x10926 $x15642 $x10926 (= idx (bvadd (bvadd %p2 (_ bv1 64)) (_ bv4 64))))))
 (let (($x15784 (and $x11770 $x10926 $x11770 $x10926 $x11770 $x10926 $x15642 $x10926 (= idx (bvadd (bvadd %p2 (_ bv1 64)) (_ bv5 64))))))
 (let ((?x3991 (ite $x15784 ((_ extract 50 43) ?x9408) (ite $x16308 ((_ extract 42 35) ?x9408) (ite $x20180 ((_ extract 34 27) ?x9408) ?x15398)))))
 (let (($x1110 (= |ana_equivalentAddressValues(%p1, %p2)| (_ bv1 1))))
 (and (=> $x1110 (= %p1 %p2)) $x1110 (and (distinct ?x3991 mem0) true))))))))))))))))))
(check-sat)
