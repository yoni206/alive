(set-info :status unknown)
(declare-fun C2 () (_ BitVec 11))
(declare-fun C1 () (_ BitVec 13))
(assert
 (let ((?x1302 (ite (and (distinct ((_ extract 2 2) C2) (_ bv0 1)) true) (_ bv2 13) (ite (and (distinct ((_ extract 1 1) C2) (_ bv0 1)) true) (_ bv1 13) (_ bv0 13)))))
 (let ((?x5545 (ite (and (distinct ((_ extract 5 5) C2) (_ bv0 1)) true) (_ bv5 13) (ite (and (distinct ((_ extract 4 4) C2) (_ bv0 1)) true) (_ bv4 13) (_ bv3 13)))))
 (let ((?x3733 (ite (and (distinct ((_ extract 8 8) C2) (_ bv0 1)) true) (_ bv8 13) (ite (and (distinct ((_ extract 7 7) C2) (_ bv0 1)) true) (_ bv7 13) (_ bv6 13)))))
 (let ((?x5112 (ite (and (distinct ((_ extract 10 9) C2) (_ bv0 2)) true) (ite (and (distinct ((_ extract 10 10) C2) (_ bv0 1)) true) (_ bv10 13) (_ bv9 13)) ?x3733)))
 (let ((?x1288 (ite (and (distinct ((_ extract 10 6) C2) (_ bv0 5)) true) ?x5112 (ite (and (distinct ((_ extract 5 3) C2) (_ bv0 3)) true) ?x5545 ?x1302))))
 (let ((?x5508 (ite (and (distinct ((_ extract 3 2) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 3 3) C1) (_ bv0 1)) true) (_ bv3 13) (_ bv2 13)) (ite (and (distinct ((_ extract 1 1) C1) (_ bv0 1)) true) (_ bv1 13) (_ bv0 13)))))
 (let ((?x4384 (ite (and (distinct ((_ extract 6 6) C1) (_ bv0 1)) true) (_ bv6 13) (ite (and (distinct ((_ extract 5 5) C1) (_ bv0 1)) true) (_ bv5 13) (_ bv4 13)))))
 (let ((?x5322 (ite (and (distinct ((_ extract 9 9) C1) (_ bv0 1)) true) (_ bv9 13) (ite (and (distinct ((_ extract 8 8) C1) (_ bv0 1)) true) (_ bv8 13) (_ bv7 13)))))
 (let ((?x1451 (ite (and (distinct ((_ extract 12 12) C1) (_ bv0 1)) true) (_ bv12 13) (ite (and (distinct ((_ extract 11 11) C1) (_ bv0 1)) true) (_ bv11 13) (_ bv10 13)))))
 (let ((?x1914 (ite (and (distinct ((_ extract 12 7) C1) (_ bv0 6)) true) (ite (and (distinct ((_ extract 12 10) C1) (_ bv0 3)) true) ?x1451 ?x5322) (ite (and (distinct ((_ extract 6 4) C1) (_ bv0 3)) true) ?x4384 ?x5508))))
 (let ((?x4293 (bvsub ?x1914 ?x1288)))
 (let ((?x2710 (ite (and (distinct ((_ extract 3 2) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 3 3) C1) (_ bv0 1)) true) (_ bv3 32) (_ bv2 32)) (ite (and (distinct ((_ extract 1 1) C1) (_ bv0 1)) true) (_ bv1 32) (_ bv0 32)))))
 (let ((?x4681 (ite (and (distinct ((_ extract 6 6) C1) (_ bv0 1)) true) (_ bv6 32) (ite (and (distinct ((_ extract 5 5) C1) (_ bv0 1)) true) (_ bv5 32) (_ bv4 32)))))
 (let ((?x5276 (ite (and (distinct ((_ extract 9 9) C1) (_ bv0 1)) true) (_ bv9 32) (ite (and (distinct ((_ extract 8 8) C1) (_ bv0 1)) true) (_ bv8 32) (_ bv7 32)))))
 (let ((?x3785 (ite (and (distinct ((_ extract 12 12) C1) (_ bv0 1)) true) (_ bv12 32) (ite (and (distinct ((_ extract 11 11) C1) (_ bv0 1)) true) (_ bv11 32) (_ bv10 32)))))
 (let ((?x2343 (ite (and (distinct ((_ extract 12 7) C1) (_ bv0 6)) true) (ite (and (distinct ((_ extract 12 10) C1) (_ bv0 3)) true) ?x3785 ?x5276) (ite (and (distinct ((_ extract 6 4) C1) (_ bv0 3)) true) ?x4681 ?x2710))))
 (let ((?x5183 (ite (and (distinct ((_ extract 2 2) C2) (_ bv0 1)) true) (_ bv2 32) (ite (and (distinct ((_ extract 1 1) C2) (_ bv0 1)) true) (_ bv1 32) (_ bv0 32)))))
 (let ((?x1758 (ite (and (distinct ((_ extract 5 5) C2) (_ bv0 1)) true) (_ bv5 32) (ite (and (distinct ((_ extract 4 4) C2) (_ bv0 1)) true) (_ bv4 32) (_ bv3 32)))))
 (let ((?x4327 (ite (and (distinct ((_ extract 8 8) C2) (_ bv0 1)) true) (_ bv8 32) (ite (and (distinct ((_ extract 7 7) C2) (_ bv0 1)) true) (_ bv7 32) (_ bv6 32)))))
 (let ((?x5639 (ite (and (distinct ((_ extract 10 9) C2) (_ bv0 2)) true) (ite (and (distinct ((_ extract 10 10) C2) (_ bv0 1)) true) (_ bv10 32) (_ bv9 32)) ?x4327)))
 (let ((?x5651 (ite (and (distinct ((_ extract 10 6) C2) (_ bv0 5)) true) ?x5639 (ite (and (distinct ((_ extract 5 3) C2) (_ bv0 3)) true) ?x1758 ?x5183))))
 (and (and (and (distinct C1 (_ bv0 13)) true) (= (bvand C1 (bvsub C1 (_ bv1 13))) (_ bv0 13))) (and (and (distinct C2 (_ bv0 11)) true) (= (bvand C2 (bvsub C2 (_ bv1 11))) (_ bv0 11))) (bvslt ?x5651 ?x2343) (not (bvult ?x4293 (_ bv13 13))))))))))))))))))))))))))
(check-sat)
