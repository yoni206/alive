(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun mem0 () (_ BitVec 8))
(declare-fun |ana_MaskedValueIsZero(%B, ((1 << (width(C2) - countLeadingZeros(((C2 - 1) ^ C2)))) - 1))| () (_ BitVec 1))
(declare-fun C2 () (_ BitVec 33))
(declare-fun C1 () (_ BitVec 33))
(declare-fun %B () (_ BitVec 33))
(assert
 (let (($x817 (and (distinct mem0 mem0) true)))
 (let (($x64669 (= |ana_MaskedValueIsZero(%B, ((1 << (width(C2) - countLeadingZeros(((C2 - 1) ^ C2)))) - 1))| (_ bv1 1))))
 (let ((?x13988 (bvsub C2 (_ bv1 33))))
 (let ((?x69106 (bvor ?x13988 C2)))
 (let (($x67000 (and (and (distinct ?x69106 (_ bv0 33)) true) (= (bvand (bvadd ?x69106 (_ bv1 33)) ?x69106) (_ bv0 33)) $x64669)))
 (let (($x68734 (or (= (bvand (bvadd C2 (_ bv1 33)) (bvsub (bvadd C2 (_ bv1 33)) (_ bv1 33))) (_ bv0 33)) $x67000)))
 (let ((?x52952 (bvand C1 C2)))
 (let (($x68888 (= ?x52952 C2)))
 (let ((?x67541 (ite (= ((_ extract 1 1) (bvxor ?x13988 C2)) (_ bv1 1)) (_ bv31 33) (ite (= ((_ extract 0 0) (bvxor ?x13988 C2)) (_ bv1 1)) (_ bv32 33) (_ bv33 33)))))
 (let ((?x67504 (ite (= ((_ extract 3 3) (bvxor ?x13988 C2)) (_ bv1 1)) (_ bv29 33) (ite (= ((_ extract 2 2) (bvxor ?x13988 C2)) (_ bv1 1)) (_ bv30 33) ?x67541))))
 (let ((?x68197 (ite (= ((_ extract 5 5) (bvxor ?x13988 C2)) (_ bv1 1)) (_ bv27 33) (ite (= ((_ extract 4 4) (bvxor ?x13988 C2)) (_ bv1 1)) (_ bv28 33) ?x67504))))
 (let ((?x68010 (ite (= ((_ extract 7 7) (bvxor ?x13988 C2)) (_ bv1 1)) (_ bv25 33) (ite (= ((_ extract 6 6) (bvxor ?x13988 C2)) (_ bv1 1)) (_ bv26 33) ?x68197))))
 (let ((?x68002 (ite (= ((_ extract 9 9) (bvxor ?x13988 C2)) (_ bv1 1)) (_ bv23 33) (ite (= ((_ extract 8 8) (bvxor ?x13988 C2)) (_ bv1 1)) (_ bv24 33) ?x68010))))
 (let ((?x68540 (ite (= ((_ extract 11 11) (bvxor ?x13988 C2)) (_ bv1 1)) (_ bv21 33) (ite (= ((_ extract 10 10) (bvxor ?x13988 C2)) (_ bv1 1)) (_ bv22 33) ?x68002))))
 (let ((?x68346 (ite (= ((_ extract 13 13) (bvxor ?x13988 C2)) (_ bv1 1)) (_ bv19 33) (ite (= ((_ extract 12 12) (bvxor ?x13988 C2)) (_ bv1 1)) (_ bv20 33) ?x68540))))
 (let ((?x68768 (ite (= ((_ extract 15 15) (bvxor ?x13988 C2)) (_ bv1 1)) (_ bv17 33) (ite (= ((_ extract 14 14) (bvxor ?x13988 C2)) (_ bv1 1)) (_ bv18 33) ?x68346))))
 (let ((?x58255 (ite (= ((_ extract 17 17) (bvxor ?x13988 C2)) (_ bv1 1)) (_ bv15 33) (ite (= ((_ extract 16 16) (bvxor ?x13988 C2)) (_ bv1 1)) (_ bv16 33) ?x68768))))
 (let ((?x70068 (ite (= ((_ extract 19 19) (bvxor ?x13988 C2)) (_ bv1 1)) (_ bv13 33) (ite (= ((_ extract 18 18) (bvxor ?x13988 C2)) (_ bv1 1)) (_ bv14 33) ?x58255))))
 (let ((?x69061 (ite (= ((_ extract 21 21) (bvxor ?x13988 C2)) (_ bv1 1)) (_ bv11 33) (ite (= ((_ extract 20 20) (bvxor ?x13988 C2)) (_ bv1 1)) (_ bv12 33) ?x70068))))
 (let ((?x69016 (ite (= ((_ extract 23 23) (bvxor ?x13988 C2)) (_ bv1 1)) (_ bv9 33) (ite (= ((_ extract 22 22) (bvxor ?x13988 C2)) (_ bv1 1)) (_ bv10 33) ?x69061))))
 (let ((?x68941 (ite (= ((_ extract 25 25) (bvxor ?x13988 C2)) (_ bv1 1)) (_ bv7 33) (ite (= ((_ extract 24 24) (bvxor ?x13988 C2)) (_ bv1 1)) (_ bv8 33) ?x69016))))
 (let ((?x68339 (ite (= ((_ extract 27 27) (bvxor ?x13988 C2)) (_ bv1 1)) (_ bv5 33) (ite (= ((_ extract 26 26) (bvxor ?x13988 C2)) (_ bv1 1)) (_ bv6 33) ?x68941))))
 (let ((?x68933 (ite (= ((_ extract 29 29) (bvxor ?x13988 C2)) (_ bv1 1)) (_ bv3 33) (ite (= ((_ extract 28 28) (bvxor ?x13988 C2)) (_ bv1 1)) (_ bv4 33) ?x68339))))
 (let ((?x65888 (ite (= ((_ extract 31 31) (bvxor ?x13988 C2)) (_ bv1 1)) (_ bv1 33) (ite (= ((_ extract 30 30) (bvxor ?x13988 C2)) (_ bv1 1)) (_ bv2 33) ?x68933))))
 (let ((?x67358 (bvshl (_ bv1 33) (bvsub (_ bv33 33) (ite (= ((_ extract 32 32) (bvxor ?x13988 C2)) (_ bv1 1)) (_ bv0 33) ?x65888)))))
 (let (($x68644 (=> $x64669 (= (bvand %B (bvsub ?x67358 (_ bv1 33))) (_ bv0 33)))))
 (and $x68644 $x68888 $x68734 $x817))))))))))))))))))))))))))))
(check-sat)
