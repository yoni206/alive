(set-info :status unknown)
(declare-fun mem0 () (_ BitVec 8))
(declare-fun %y () (_ BitVec 5))
(declare-fun %p2 () (_ BitVec 64))
(declare-fun idx () (_ BitVec 64))
(declare-fun %x () (_ BitVec 5))
(declare-fun %p1 () (_ BitVec 64))
(declare-fun |ana_equivalentAddressValues(%p1, %p2)| () (_ BitVec 1))
(assert
 (let ((?x284 (ite (and (and (distinct %p2 (_ bv0 64)) true) (or true true) (= idx %p2)) (concat ((_ extract 7 5) mem0) ((_ extract 4 0) %y)) mem0)))
 (let ((?x2401 (ite (and (and (distinct %p1 (_ bv0 64)) true) (or true true) (= idx %p1)) (concat ((_ extract 7 5) mem0) ((_ extract 4 0) %x)) mem0)))
 (let ((?x5626 (ite (and (and (distinct %p1 (_ bv0 64)) true) (or true true) (= %p2 %p1)) (concat ((_ extract 7 5) mem0) ((_ extract 4 0) %x)) mem0)))
 (let (($x8887 (or true true)))
 (let (($x1172 (and (distinct %p2 (_ bv0 64)) true)))
 (let (($x17212 (and (distinct %p1 (_ bv0 64)) true)))
 (let ((?x5036 (ite (and $x17212 $x8887 $x1172 $x8887 (= idx %p2)) (concat ((_ extract 7 5) ?x5626) ((_ extract 4 0) %y)) ?x2401)))
 (let (($x7172 (= |ana_equivalentAddressValues(%p1, %p2)| (_ bv1 1))))
 (and (=> $x7172 (= %p1 %p2)) $x7172 (and (distinct ?x5036 ?x284) true)))))))))))
(check-sat)
