(set-info :status unknown)
(declare-fun mem0 () (_ BitVec 8))
(declare-fun %x () (_ BitVec 31))
(declare-fun %p1 () (_ BitVec 64))
(declare-fun idx () (_ BitVec 64))
(declare-fun |ana_equivalentAddressValues(%p1, %p2)| () (_ BitVec 1))
(declare-fun %p2 () (_ BitVec 64))
(assert
 (let ((?x1585 (concat ((_ extract 7 7) mem0) ((_ extract 6 0) %x))))
 (let ((?x10275 (ite (and (and (distinct %p1 (_ bv0 64)) true) (or true true) (= idx %p1)) ?x1585 mem0)))
 (let ((?x10245 ((_ extract 14 7) %x)))
 (let (($x7310 (or true true)))
 (let (($x6023 (and (distinct %p1 (_ bv0 64)) true)))
 (let ((?x3169 (ite (and $x6023 $x7310 (= idx (bvadd (bvadd %p1 (_ bv1 64)) (_ bv0 64)))) ?x10245 ?x10275)))
 (let ((?x11474 ((_ extract 22 15) %x)))
 (let ((?x21807 (ite (and $x6023 $x7310 (= idx (bvadd (bvadd %p1 (_ bv1 64)) (_ bv1 64)))) ?x11474 ?x3169)))
 (let ((?x18058 ((_ extract 30 23) %x)))
 (let ((?x2376 (ite (and $x6023 $x7310 (= idx (bvadd (bvadd %p1 (_ bv1 64)) (_ bv2 64)))) ?x18058 ?x21807)))
 (let (($x10824 (= |ana_equivalentAddressValues(%p1, %p2)| (_ bv1 1))))
 (and (=> $x10824 (= %p1 %p2)) $x10824 (and (distinct ?x2376 ?x2376) true))))))))))))))
(check-sat)
