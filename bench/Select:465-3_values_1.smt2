(set-info :status unknown)
(declare-fun %Y () (_ BitVec 11))
(declare-fun C2 () (_ BitVec 11))
(declare-fun C1 () (_ BitVec 8))
(declare-fun %X () (_ BitVec 8))
(assert
 (let ((?x2921 (ite (and (distinct ((_ extract 2 2) C2) (_ bv0 1)) true) (_ bv2 8) (ite (and (distinct ((_ extract 1 1) C2) (_ bv0 1)) true) (_ bv1 8) (_ bv0 8)))))
 (let ((?x3882 (ite (and (distinct ((_ extract 5 5) C2) (_ bv0 1)) true) (_ bv5 8) (ite (and (distinct ((_ extract 4 4) C2) (_ bv0 1)) true) (_ bv4 8) (_ bv3 8)))))
 (let ((?x1206 (ite (and (distinct ((_ extract 8 8) C2) (_ bv0 1)) true) (_ bv8 8) (ite (and (distinct ((_ extract 7 7) C2) (_ bv0 1)) true) (_ bv7 8) (_ bv6 8)))))
 (let ((?x3147 (ite (and (distinct ((_ extract 10 9) C2) (_ bv0 2)) true) (ite (and (distinct ((_ extract 10 10) C2) (_ bv0 1)) true) (_ bv10 8) (_ bv9 8)) ?x1206)))
 (let ((?x3256 (ite (and (distinct ((_ extract 10 6) C2) (_ bv0 5)) true) ?x3147 (ite (and (distinct ((_ extract 5 3) C2) (_ bv0 3)) true) ?x3882 ?x2921))))
 (let ((?x4174 (ite (and (distinct ((_ extract 3 2) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 3 3) C1) (_ bv0 1)) true) (_ bv3 8) (_ bv2 8)) (ite (and (distinct ((_ extract 1 1) C1) (_ bv0 1)) true) (_ bv1 8) (_ bv0 8)))))
 (let ((?x1832 (ite (and (distinct ((_ extract 7 6) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 7 7) C1) (_ bv0 1)) true) (_ bv7 8) (_ bv6 8)) (ite (and (distinct ((_ extract 5 5) C1) (_ bv0 1)) true) (_ bv5 8) (_ bv4 8)))))
 (let ((?x4280 (bvsub (ite (and (distinct ((_ extract 7 4) C1) (_ bv0 4)) true) ?x1832 ?x4174) ?x3256)))
 (let ((?x1302 (bvand %X C1)))
 (let (($x3332 (and (distinct (ite (= (ite (= ?x1302 (_ bv0 8)) (_ bv1 1) (_ bv0 1)) (_ bv1 1)) %Y (bvor %Y C2)) (bvor ((_ zero_extend 3) (bvlshr ?x1302 ?x4280)) %Y)) true)))
 (let ((?x3367 (ite (and (distinct ((_ extract 3 2) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 3 3) C1) (_ bv0 1)) true) (_ bv3 32) (_ bv2 32)) (ite (and (distinct ((_ extract 1 1) C1) (_ bv0 1)) true) (_ bv1 32) (_ bv0 32)))))
 (let ((?x1121 (ite (and (distinct ((_ extract 7 6) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 7 7) C1) (_ bv0 1)) true) (_ bv7 32) (_ bv6 32)) (ite (and (distinct ((_ extract 5 5) C1) (_ bv0 1)) true) (_ bv5 32) (_ bv4 32)))))
 (let ((?x5593 (ite (and (distinct ((_ extract 2 2) C2) (_ bv0 1)) true) (_ bv2 32) (ite (and (distinct ((_ extract 1 1) C2) (_ bv0 1)) true) (_ bv1 32) (_ bv0 32)))))
 (let ((?x2259 (ite (and (distinct ((_ extract 5 5) C2) (_ bv0 1)) true) (_ bv5 32) (ite (and (distinct ((_ extract 4 4) C2) (_ bv0 1)) true) (_ bv4 32) (_ bv3 32)))))
 (let ((?x4151 (ite (and (distinct ((_ extract 8 8) C2) (_ bv0 1)) true) (_ bv8 32) (ite (and (distinct ((_ extract 7 7) C2) (_ bv0 1)) true) (_ bv7 32) (_ bv6 32)))))
 (let ((?x1694 (ite (and (distinct ((_ extract 10 9) C2) (_ bv0 2)) true) (ite (and (distinct ((_ extract 10 10) C2) (_ bv0 1)) true) (_ bv10 32) (_ bv9 32)) ?x4151)))
 (let ((?x5065 (ite (and (distinct ((_ extract 10 6) C2) (_ bv0 5)) true) ?x1694 (ite (and (distinct ((_ extract 5 3) C2) (_ bv0 3)) true) ?x2259 ?x5593))))
 (and (and (and (distinct C1 (_ bv0 8)) true) (= (bvand C1 (bvsub C1 (_ bv1 8))) (_ bv0 8))) (and (and (distinct C2 (_ bv0 11)) true) (= (bvand C2 (bvsub C2 (_ bv1 11))) (_ bv0 11))) (bvslt ?x5065 (ite (and (distinct ((_ extract 7 4) C1) (_ bv0 4)) true) ?x1121 ?x3367)) $x3332)))))))))))))))))))
(check-sat)
