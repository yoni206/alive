(set-info :status unknown)
(declare-fun %Y () (_ BitVec 11))
(declare-fun C2 () (_ BitVec 11))
(declare-fun C1 () (_ BitVec 48))
(declare-fun %X () (_ BitVec 48))
(assert
 (let ((?x7761 (ite (and (distinct ((_ extract 2 2) C2) (_ bv0 1)) true) (_ bv2 48) (ite (and (distinct ((_ extract 1 1) C2) (_ bv0 1)) true) (_ bv1 48) (_ bv0 48)))))
 (let ((?x3344 (ite (and (distinct ((_ extract 5 5) C2) (_ bv0 1)) true) (_ bv5 48) (ite (and (distinct ((_ extract 4 4) C2) (_ bv0 1)) true) (_ bv4 48) (_ bv3 48)))))
 (let ((?x17333 (ite (and (distinct ((_ extract 8 8) C2) (_ bv0 1)) true) (_ bv8 48) (ite (and (distinct ((_ extract 7 7) C2) (_ bv0 1)) true) (_ bv7 48) (_ bv6 48)))))
 (let ((?x23310 (ite (and (distinct ((_ extract 10 9) C2) (_ bv0 2)) true) (ite (and (distinct ((_ extract 10 10) C2) (_ bv0 1)) true) (_ bv10 48) (_ bv9 48)) ?x17333)))
 (let ((?x24897 (ite (and (distinct ((_ extract 10 6) C2) (_ bv0 5)) true) ?x23310 (ite (and (distinct ((_ extract 5 3) C2) (_ bv0 3)) true) ?x3344 ?x7761))))
 (let ((?x3274 (ite (and (distinct ((_ extract 2 2) C1) (_ bv0 1)) true) (_ bv2 48) (ite (and (distinct ((_ extract 1 1) C1) (_ bv0 1)) true) (_ bv1 48) (_ bv0 48)))))
 (let ((?x14489 (ite (and (distinct ((_ extract 5 5) C1) (_ bv0 1)) true) (_ bv5 48) (ite (and (distinct ((_ extract 4 4) C1) (_ bv0 1)) true) (_ bv4 48) (_ bv3 48)))))
 (let ((?x13877 (ite (and (distinct ((_ extract 8 8) C1) (_ bv0 1)) true) (_ bv8 48) (ite (and (distinct ((_ extract 7 7) C1) (_ bv0 1)) true) (_ bv7 48) (_ bv6 48)))))
 (let ((?x4430 (ite (and (distinct ((_ extract 11 11) C1) (_ bv0 1)) true) (_ bv11 48) (ite (and (distinct ((_ extract 10 10) C1) (_ bv0 1)) true) (_ bv10 48) (_ bv9 48)))))
 (let ((?x21917 (ite (and (distinct ((_ extract 11 6) C1) (_ bv0 6)) true) (ite (and (distinct ((_ extract 11 9) C1) (_ bv0 3)) true) ?x4430 ?x13877) (ite (and (distinct ((_ extract 5 3) C1) (_ bv0 3)) true) ?x14489 ?x3274))))
 (let ((?x12398 (ite (and (distinct ((_ extract 14 14) C1) (_ bv0 1)) true) (_ bv14 48) (ite (and (distinct ((_ extract 13 13) C1) (_ bv0 1)) true) (_ bv13 48) (_ bv12 48)))))
 (let ((?x12494 (ite (and (distinct ((_ extract 17 17) C1) (_ bv0 1)) true) (_ bv17 48) (ite (and (distinct ((_ extract 16 16) C1) (_ bv0 1)) true) (_ bv16 48) (_ bv15 48)))))
 (let ((?x491 (ite (and (distinct ((_ extract 20 20) C1) (_ bv0 1)) true) (_ bv20 48) (ite (and (distinct ((_ extract 19 19) C1) (_ bv0 1)) true) (_ bv19 48) (_ bv18 48)))))
 (let ((?x8998 (ite (and (distinct ((_ extract 23 23) C1) (_ bv0 1)) true) (_ bv23 48) (ite (and (distinct ((_ extract 22 22) C1) (_ bv0 1)) true) (_ bv22 48) (_ bv21 48)))))
 (let ((?x6004 (ite (and (distinct ((_ extract 23 18) C1) (_ bv0 6)) true) (ite (and (distinct ((_ extract 23 21) C1) (_ bv0 3)) true) ?x8998 ?x491) (ite (and (distinct ((_ extract 17 15) C1) (_ bv0 3)) true) ?x12494 ?x12398))))
 (let ((?x16980 (ite (and (distinct ((_ extract 26 26) C1) (_ bv0 1)) true) (_ bv26 48) (ite (and (distinct ((_ extract 25 25) C1) (_ bv0 1)) true) (_ bv25 48) (_ bv24 48)))))
 (let ((?x1131 (ite (and (distinct ((_ extract 29 29) C1) (_ bv0 1)) true) (_ bv29 48) (ite (and (distinct ((_ extract 28 28) C1) (_ bv0 1)) true) (_ bv28 48) (_ bv27 48)))))
 (let ((?x2007 (ite (and (distinct ((_ extract 32 32) C1) (_ bv0 1)) true) (_ bv32 48) (ite (and (distinct ((_ extract 31 31) C1) (_ bv0 1)) true) (_ bv31 48) (_ bv30 48)))))
 (let ((?x6864 (ite (and (distinct ((_ extract 35 35) C1) (_ bv0 1)) true) (_ bv35 48) (ite (and (distinct ((_ extract 34 34) C1) (_ bv0 1)) true) (_ bv34 48) (_ bv33 48)))))
 (let ((?x2575 (ite (and (distinct ((_ extract 35 30) C1) (_ bv0 6)) true) (ite (and (distinct ((_ extract 35 33) C1) (_ bv0 3)) true) ?x6864 ?x2007) (ite (and (distinct ((_ extract 29 27) C1) (_ bv0 3)) true) ?x1131 ?x16980))))
 (let ((?x2973 (ite (and (distinct ((_ extract 38 38) C1) (_ bv0 1)) true) (_ bv38 48) (ite (and (distinct ((_ extract 37 37) C1) (_ bv0 1)) true) (_ bv37 48) (_ bv36 48)))))
 (let ((?x692 (ite (and (distinct ((_ extract 41 41) C1) (_ bv0 1)) true) (_ bv41 48) (ite (and (distinct ((_ extract 40 40) C1) (_ bv0 1)) true) (_ bv40 48) (_ bv39 48)))))
 (let ((?x286 (ite (and (distinct ((_ extract 44 44) C1) (_ bv0 1)) true) (_ bv44 48) (ite (and (distinct ((_ extract 43 43) C1) (_ bv0 1)) true) (_ bv43 48) (_ bv42 48)))))
 (let ((?x10856 (ite (and (distinct ((_ extract 47 47) C1) (_ bv0 1)) true) (_ bv47 48) (ite (and (distinct ((_ extract 46 46) C1) (_ bv0 1)) true) (_ bv46 48) (_ bv45 48)))))
 (let ((?x15554 (ite (and (distinct ((_ extract 47 42) C1) (_ bv0 6)) true) (ite (and (distinct ((_ extract 47 45) C1) (_ bv0 3)) true) ?x10856 ?x286) (ite (and (distinct ((_ extract 41 39) C1) (_ bv0 3)) true) ?x692 ?x2973))))
 (let ((?x12508 (ite (and (distinct ((_ extract 47 24) C1) (_ bv0 24)) true) (ite (and (distinct ((_ extract 47 36) C1) (_ bv0 12)) true) ?x15554 ?x2575) (ite (and (distinct ((_ extract 23 12) C1) (_ bv0 12)) true) ?x6004 ?x21917))))
 (let ((?x11798 (bvsub ?x12508 ?x24897)))
 (let ((?x10263 (bvand %X C1)))
 (let ((?x7378 (bvor %Y C2)))
 (let (($x16346 (and (distinct (ite (= (ite (and (distinct ?x10263 (_ bv0 48)) true) (_ bv1 1) (_ bv0 1)) (_ bv1 1)) %Y ?x7378) (bvor (bvxor ((_ extract 10 0) (bvlshr ?x10263 ?x11798)) C2) %Y)) true)))
 (let ((?x20553 (ite (and (distinct ((_ extract 2 2) C1) (_ bv0 1)) true) (_ bv2 32) (ite (and (distinct ((_ extract 1 1) C1) (_ bv0 1)) true) (_ bv1 32) (_ bv0 32)))))
 (let ((?x5448 (ite (and (distinct ((_ extract 5 5) C1) (_ bv0 1)) true) (_ bv5 32) (ite (and (distinct ((_ extract 4 4) C1) (_ bv0 1)) true) (_ bv4 32) (_ bv3 32)))))
 (let ((?x5614 (ite (and (distinct ((_ extract 8 8) C1) (_ bv0 1)) true) (_ bv8 32) (ite (and (distinct ((_ extract 7 7) C1) (_ bv0 1)) true) (_ bv7 32) (_ bv6 32)))))
 (let ((?x23346 (ite (and (distinct ((_ extract 11 11) C1) (_ bv0 1)) true) (_ bv11 32) (ite (and (distinct ((_ extract 10 10) C1) (_ bv0 1)) true) (_ bv10 32) (_ bv9 32)))))
 (let ((?x3762 (ite (and (distinct ((_ extract 11 6) C1) (_ bv0 6)) true) (ite (and (distinct ((_ extract 11 9) C1) (_ bv0 3)) true) ?x23346 ?x5614) (ite (and (distinct ((_ extract 5 3) C1) (_ bv0 3)) true) ?x5448 ?x20553))))
 (let ((?x7097 (ite (and (distinct ((_ extract 14 14) C1) (_ bv0 1)) true) (_ bv14 32) (ite (and (distinct ((_ extract 13 13) C1) (_ bv0 1)) true) (_ bv13 32) (_ bv12 32)))))
 (let ((?x20046 (ite (and (distinct ((_ extract 17 17) C1) (_ bv0 1)) true) (_ bv17 32) (ite (and (distinct ((_ extract 16 16) C1) (_ bv0 1)) true) (_ bv16 32) (_ bv15 32)))))
 (let ((?x23788 (ite (and (distinct ((_ extract 20 20) C1) (_ bv0 1)) true) (_ bv20 32) (ite (and (distinct ((_ extract 19 19) C1) (_ bv0 1)) true) (_ bv19 32) (_ bv18 32)))))
 (let ((?x10714 (ite (and (distinct ((_ extract 23 23) C1) (_ bv0 1)) true) (_ bv23 32) (ite (and (distinct ((_ extract 22 22) C1) (_ bv0 1)) true) (_ bv22 32) (_ bv21 32)))))
 (let ((?x16842 (ite (and (distinct ((_ extract 23 18) C1) (_ bv0 6)) true) (ite (and (distinct ((_ extract 23 21) C1) (_ bv0 3)) true) ?x10714 ?x23788) (ite (and (distinct ((_ extract 17 15) C1) (_ bv0 3)) true) ?x20046 ?x7097))))
 (let ((?x8313 (ite (and (distinct ((_ extract 26 26) C1) (_ bv0 1)) true) (_ bv26 32) (ite (and (distinct ((_ extract 25 25) C1) (_ bv0 1)) true) (_ bv25 32) (_ bv24 32)))))
 (let ((?x14248 (ite (and (distinct ((_ extract 29 29) C1) (_ bv0 1)) true) (_ bv29 32) (ite (and (distinct ((_ extract 28 28) C1) (_ bv0 1)) true) (_ bv28 32) (_ bv27 32)))))
 (let ((?x7266 (ite (and (distinct ((_ extract 32 32) C1) (_ bv0 1)) true) (_ bv32 32) (ite (and (distinct ((_ extract 31 31) C1) (_ bv0 1)) true) (_ bv31 32) (_ bv30 32)))))
 (let ((?x4538 (ite (and (distinct ((_ extract 35 35) C1) (_ bv0 1)) true) (_ bv35 32) (ite (and (distinct ((_ extract 34 34) C1) (_ bv0 1)) true) (_ bv34 32) (_ bv33 32)))))
 (let ((?x6638 (ite (and (distinct ((_ extract 35 30) C1) (_ bv0 6)) true) (ite (and (distinct ((_ extract 35 33) C1) (_ bv0 3)) true) ?x4538 ?x7266) (ite (and (distinct ((_ extract 29 27) C1) (_ bv0 3)) true) ?x14248 ?x8313))))
 (let ((?x2141 (ite (and (distinct ((_ extract 38 38) C1) (_ bv0 1)) true) (_ bv38 32) (ite (and (distinct ((_ extract 37 37) C1) (_ bv0 1)) true) (_ bv37 32) (_ bv36 32)))))
 (let ((?x811 (ite (and (distinct ((_ extract 41 41) C1) (_ bv0 1)) true) (_ bv41 32) (ite (and (distinct ((_ extract 40 40) C1) (_ bv0 1)) true) (_ bv40 32) (_ bv39 32)))))
 (let ((?x1405 (ite (and (distinct ((_ extract 44 44) C1) (_ bv0 1)) true) (_ bv44 32) (ite (and (distinct ((_ extract 43 43) C1) (_ bv0 1)) true) (_ bv43 32) (_ bv42 32)))))
 (let ((?x13858 (ite (and (distinct ((_ extract 47 47) C1) (_ bv0 1)) true) (_ bv47 32) (ite (and (distinct ((_ extract 46 46) C1) (_ bv0 1)) true) (_ bv46 32) (_ bv45 32)))))
 (let ((?x1482 (ite (and (distinct ((_ extract 47 42) C1) (_ bv0 6)) true) (ite (and (distinct ((_ extract 47 45) C1) (_ bv0 3)) true) ?x13858 ?x1405) (ite (and (distinct ((_ extract 41 39) C1) (_ bv0 3)) true) ?x811 ?x2141))))
 (let ((?x16379 (ite (and (distinct ((_ extract 47 24) C1) (_ bv0 24)) true) (ite (and (distinct ((_ extract 47 36) C1) (_ bv0 12)) true) ?x1482 ?x6638) (ite (and (distinct ((_ extract 23 12) C1) (_ bv0 12)) true) ?x16842 ?x3762))))
 (let ((?x10876 (ite (and (distinct ((_ extract 2 2) C2) (_ bv0 1)) true) (_ bv2 32) (ite (and (distinct ((_ extract 1 1) C2) (_ bv0 1)) true) (_ bv1 32) (_ bv0 32)))))
 (let ((?x3410 (ite (and (distinct ((_ extract 5 5) C2) (_ bv0 1)) true) (_ bv5 32) (ite (and (distinct ((_ extract 4 4) C2) (_ bv0 1)) true) (_ bv4 32) (_ bv3 32)))))
 (let ((?x5546 (ite (and (distinct ((_ extract 8 8) C2) (_ bv0 1)) true) (_ bv8 32) (ite (and (distinct ((_ extract 7 7) C2) (_ bv0 1)) true) (_ bv7 32) (_ bv6 32)))))
 (let ((?x20966 (ite (and (distinct ((_ extract 10 9) C2) (_ bv0 2)) true) (ite (and (distinct ((_ extract 10 10) C2) (_ bv0 1)) true) (_ bv10 32) (_ bv9 32)) ?x5546)))
 (let ((?x3442 (ite (and (distinct ((_ extract 10 6) C2) (_ bv0 5)) true) ?x20966 (ite (and (distinct ((_ extract 5 3) C2) (_ bv0 3)) true) ?x3410 ?x10876))))
 (and (and (and (distinct C1 (_ bv0 48)) true) (= (bvand C1 (bvsub C1 (_ bv1 48))) (_ bv0 48))) (and (and (distinct C2 (_ bv0 11)) true) (= (bvand C2 (bvsub C2 (_ bv1 11))) (_ bv0 11))) (bvslt ?x3442 ?x16379) $x16346))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
