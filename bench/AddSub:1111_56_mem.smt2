(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun mem0 () (_ BitVec 8))
(declare-fun C2 () (_ BitVec 59))
(declare-fun C1 () (_ BitVec 59))
(assert
 (let (($x817 (and (distinct mem0 mem0) true)))
 (let ((?x25406 (ite (and (distinct ((_ extract 3 2) C2) (_ bv0 2)) true) (ite (and (distinct ((_ extract 3 3) C2) (_ bv0 1)) true) (_ bv3 59) (_ bv2 59)) (ite (and (distinct ((_ extract 1 1) C2) (_ bv0 1)) true) (_ bv1 59) (_ bv0 59)))))
 (let ((?x24446 (ite (and (distinct ((_ extract 7 6) C2) (_ bv0 2)) true) (ite (and (distinct ((_ extract 7 7) C2) (_ bv0 1)) true) (_ bv7 59) (_ bv6 59)) (ite (and (distinct ((_ extract 5 5) C2) (_ bv0 1)) true) (_ bv5 59) (_ bv4 59)))))
 (let ((?x23975 (ite (and (distinct ((_ extract 11 10) C2) (_ bv0 2)) true) (ite (and (distinct ((_ extract 11 11) C2) (_ bv0 1)) true) (_ bv11 59) (_ bv10 59)) (ite (and (distinct ((_ extract 9 9) C2) (_ bv0 1)) true) (_ bv9 59) (_ bv8 59)))))
 (let ((?x24756 (ite (and (distinct ((_ extract 14 14) C2) (_ bv0 1)) true) (_ bv14 59) (ite (and (distinct ((_ extract 13 13) C2) (_ bv0 1)) true) (_ bv13 59) (_ bv12 59)))))
 (let ((?x23939 (ite (and (distinct ((_ extract 14 8) C2) (_ bv0 7)) true) (ite (and (distinct ((_ extract 14 12) C2) (_ bv0 3)) true) ?x24756 ?x23975) (ite (and (distinct ((_ extract 7 4) C2) (_ bv0 4)) true) ?x24446 ?x25406))))
 (let ((?x17541 (ite (and (distinct ((_ extract 18 17) C2) (_ bv0 2)) true) (ite (and (distinct ((_ extract 18 18) C2) (_ bv0 1)) true) (_ bv18 59) (_ bv17 59)) (ite (and (distinct ((_ extract 16 16) C2) (_ bv0 1)) true) (_ bv16 59) (_ bv15 59)))))
 (let ((?x26121 (ite (and (distinct ((_ extract 22 21) C2) (_ bv0 2)) true) (ite (and (distinct ((_ extract 22 22) C2) (_ bv0 1)) true) (_ bv22 59) (_ bv21 59)) (ite (and (distinct ((_ extract 20 20) C2) (_ bv0 1)) true) (_ bv20 59) (_ bv19 59)))))
 (let ((?x25138 (ite (and (distinct ((_ extract 26 25) C2) (_ bv0 2)) true) (ite (and (distinct ((_ extract 26 26) C2) (_ bv0 1)) true) (_ bv26 59) (_ bv25 59)) (ite (and (distinct ((_ extract 24 24) C2) (_ bv0 1)) true) (_ bv24 59) (_ bv23 59)))))
 (let ((?x23841 (ite (and (distinct ((_ extract 29 29) C2) (_ bv0 1)) true) (_ bv29 59) (ite (and (distinct ((_ extract 28 28) C2) (_ bv0 1)) true) (_ bv28 59) (_ bv27 59)))))
 (let ((?x18458 (ite (and (distinct ((_ extract 29 23) C2) (_ bv0 7)) true) (ite (and (distinct ((_ extract 29 27) C2) (_ bv0 3)) true) ?x23841 ?x25138) (ite (and (distinct ((_ extract 22 19) C2) (_ bv0 4)) true) ?x26121 ?x17541))))
 (let ((?x24708 (ite (and (distinct ((_ extract 33 32) C2) (_ bv0 2)) true) (ite (and (distinct ((_ extract 33 33) C2) (_ bv0 1)) true) (_ bv33 59) (_ bv32 59)) (ite (and (distinct ((_ extract 31 31) C2) (_ bv0 1)) true) (_ bv31 59) (_ bv30 59)))))
 (let ((?x25403 (ite (and (distinct ((_ extract 37 36) C2) (_ bv0 2)) true) (ite (and (distinct ((_ extract 37 37) C2) (_ bv0 1)) true) (_ bv37 59) (_ bv36 59)) (ite (and (distinct ((_ extract 35 35) C2) (_ bv0 1)) true) (_ bv35 59) (_ bv34 59)))))
 (let ((?x24786 (ite (and (distinct ((_ extract 41 40) C2) (_ bv0 2)) true) (ite (and (distinct ((_ extract 41 41) C2) (_ bv0 1)) true) (_ bv41 59) (_ bv40 59)) (ite (and (distinct ((_ extract 39 39) C2) (_ bv0 1)) true) (_ bv39 59) (_ bv38 59)))))
 (let ((?x22602 (ite (and (distinct ((_ extract 44 44) C2) (_ bv0 1)) true) (_ bv44 59) (ite (and (distinct ((_ extract 43 43) C2) (_ bv0 1)) true) (_ bv43 59) (_ bv42 59)))))
 (let ((?x25452 (ite (and (distinct ((_ extract 44 38) C2) (_ bv0 7)) true) (ite (and (distinct ((_ extract 44 42) C2) (_ bv0 3)) true) ?x22602 ?x24786) (ite (and (distinct ((_ extract 37 34) C2) (_ bv0 4)) true) ?x25403 ?x24708))))
 (let ((?x18296 (ite (and (distinct ((_ extract 48 47) C2) (_ bv0 2)) true) (ite (and (distinct ((_ extract 48 48) C2) (_ bv0 1)) true) (_ bv48 59) (_ bv47 59)) (ite (and (distinct ((_ extract 46 46) C2) (_ bv0 1)) true) (_ bv46 59) (_ bv45 59)))))
 (let ((?x22616 (ite (and (distinct ((_ extract 51 51) C2) (_ bv0 1)) true) (_ bv51 59) (ite (and (distinct ((_ extract 50 50) C2) (_ bv0 1)) true) (_ bv50 59) (_ bv49 59)))))
 (let ((?x24532 (ite (and (distinct ((_ extract 55 54) C2) (_ bv0 2)) true) (ite (and (distinct ((_ extract 55 55) C2) (_ bv0 1)) true) (_ bv55 59) (_ bv54 59)) (ite (and (distinct ((_ extract 53 53) C2) (_ bv0 1)) true) (_ bv53 59) (_ bv52 59)))))
 (let ((?x25693 (ite (and (distinct ((_ extract 58 58) C2) (_ bv0 1)) true) (_ bv58 59) (ite (and (distinct ((_ extract 57 57) C2) (_ bv0 1)) true) (_ bv57 59) (_ bv56 59)))))
 (let ((?x21309 (ite (and (distinct ((_ extract 58 52) C2) (_ bv0 7)) true) (ite (and (distinct ((_ extract 58 56) C2) (_ bv0 3)) true) ?x25693 ?x24532) (ite (and (distinct ((_ extract 51 49) C2) (_ bv0 3)) true) ?x22616 ?x18296))))
 (let ((?x24260 (ite (and (distinct ((_ extract 58 30) C2) (_ bv0 29)) true) (ite (and (distinct ((_ extract 58 45) C2) (_ bv0 14)) true) ?x21309 ?x25452) (ite (and (distinct ((_ extract 29 15) C2) (_ bv0 15)) true) ?x18458 ?x23939))))
 (let ((?x25400 (bvsub (_ bv59 59) (bvsub (bvsub (_ bv59 59) ?x24260) (_ bv1 59)))))
 (let (($x23602 (not (= (bvand C2 (bvshl (_ bv576460752303423487 59) ?x25400)) (_ bv0 59)))))
 (let (($x19937 (and (and (distinct C2 (_ bv0 59)) true) (= (bvand C2 (bvsub C2 (_ bv1 59))) (_ bv0 59)))))
 (let (($x14522 (= C1 (bvneg C2))))
 (and $x14522 $x19937 $x23602 $x817))))))))))))))))))))))))))))
(check-sat)
