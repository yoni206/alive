(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun mem0 () (_ BitVec 8))
(declare-fun |ana_MaskedValueIsZero(%B, ((1 << (width(C2) - countLeadingZeros(((C2 - 1) ^ C2)))) - 1))| () (_ BitVec 1))
(declare-fun C2 () (_ BitVec 31))
(declare-fun C1 () (_ BitVec 31))
(declare-fun %B () (_ BitVec 31))
(assert
 (let (($x817 (and (distinct mem0 mem0) true)))
 (let (($x64669 (= |ana_MaskedValueIsZero(%B, ((1 << (width(C2) - countLeadingZeros(((C2 - 1) ^ C2)))) - 1))| (_ bv1 1))))
 (let ((?x13795 (bvsub C2 (_ bv1 31))))
 (let ((?x65518 (bvor ?x13795 C2)))
 (let (($x61431 (and (and (distinct ?x65518 (_ bv0 31)) true) (= (bvand (bvadd ?x65518 (_ bv1 31)) ?x65518) (_ bv0 31)) $x64669)))
 (let (($x67073 (or (= (bvand (bvadd C2 (_ bv1 31)) (bvsub (bvadd C2 (_ bv1 31)) (_ bv1 31))) (_ bv0 31)) $x61431)))
 (let ((?x52774 (bvand C1 C2)))
 (let (($x66009 (= ?x52774 C2)))
 (let ((?x66299 (ite (= ((_ extract 1 1) (bvxor ?x13795 C2)) (_ bv1 1)) (_ bv29 31) (ite (= ((_ extract 0 0) (bvxor ?x13795 C2)) (_ bv1 1)) (_ bv30 31) (_ bv31 31)))))
 (let ((?x67593 (ite (= ((_ extract 3 3) (bvxor ?x13795 C2)) (_ bv1 1)) (_ bv27 31) (ite (= ((_ extract 2 2) (bvxor ?x13795 C2)) (_ bv1 1)) (_ bv28 31) ?x66299))))
 (let ((?x67497 (ite (= ((_ extract 5 5) (bvxor ?x13795 C2)) (_ bv1 1)) (_ bv25 31) (ite (= ((_ extract 4 4) (bvxor ?x13795 C2)) (_ bv1 1)) (_ bv26 31) ?x67593))))
 (let ((?x67376 (ite (= ((_ extract 7 7) (bvxor ?x13795 C2)) (_ bv1 1)) (_ bv23 31) (ite (= ((_ extract 6 6) (bvxor ?x13795 C2)) (_ bv1 1)) (_ bv24 31) ?x67497))))
 (let ((?x56536 (ite (= ((_ extract 9 9) (bvxor ?x13795 C2)) (_ bv1 1)) (_ bv21 31) (ite (= ((_ extract 8 8) (bvxor ?x13795 C2)) (_ bv1 1)) (_ bv22 31) ?x67376))))
 (let ((?x66102 (ite (= ((_ extract 11 11) (bvxor ?x13795 C2)) (_ bv1 1)) (_ bv19 31) (ite (= ((_ extract 10 10) (bvxor ?x13795 C2)) (_ bv1 1)) (_ bv20 31) ?x56536))))
 (let ((?x67826 (ite (= ((_ extract 13 13) (bvxor ?x13795 C2)) (_ bv1 1)) (_ bv17 31) (ite (= ((_ extract 12 12) (bvxor ?x13795 C2)) (_ bv1 1)) (_ bv18 31) ?x66102))))
 (let ((?x67613 (ite (= ((_ extract 15 15) (bvxor ?x13795 C2)) (_ bv1 1)) (_ bv15 31) (ite (= ((_ extract 14 14) (bvxor ?x13795 C2)) (_ bv1 1)) (_ bv16 31) ?x67826))))
 (let ((?x68209 (ite (= ((_ extract 17 17) (bvxor ?x13795 C2)) (_ bv1 1)) (_ bv13 31) (ite (= ((_ extract 16 16) (bvxor ?x13795 C2)) (_ bv1 1)) (_ bv14 31) ?x67613))))
 (let ((?x68555 (ite (= ((_ extract 19 19) (bvxor ?x13795 C2)) (_ bv1 1)) (_ bv11 31) (ite (= ((_ extract 18 18) (bvxor ?x13795 C2)) (_ bv1 1)) (_ bv12 31) ?x68209))))
 (let ((?x68260 (ite (= ((_ extract 21 21) (bvxor ?x13795 C2)) (_ bv1 1)) (_ bv9 31) (ite (= ((_ extract 20 20) (bvxor ?x13795 C2)) (_ bv1 1)) (_ bv10 31) ?x68555))))
 (let ((?x68949 (ite (= ((_ extract 23 23) (bvxor ?x13795 C2)) (_ bv1 1)) (_ bv7 31) (ite (= ((_ extract 22 22) (bvxor ?x13795 C2)) (_ bv1 1)) (_ bv8 31) ?x68260))))
 (let ((?x68943 (ite (= ((_ extract 25 25) (bvxor ?x13795 C2)) (_ bv1 1)) (_ bv5 31) (ite (= ((_ extract 24 24) (bvxor ?x13795 C2)) (_ bv1 1)) (_ bv6 31) ?x68949))))
 (let ((?x68607 (ite (= ((_ extract 27 27) (bvxor ?x13795 C2)) (_ bv1 1)) (_ bv3 31) (ite (= ((_ extract 26 26) (bvxor ?x13795 C2)) (_ bv1 1)) (_ bv4 31) ?x68943))))
 (let ((?x69202 (ite (= ((_ extract 29 29) (bvxor ?x13795 C2)) (_ bv1 1)) (_ bv1 31) (ite (= ((_ extract 28 28) (bvxor ?x13795 C2)) (_ bv1 1)) (_ bv2 31) ?x68607))))
 (let ((?x68619 (bvshl (_ bv1 31) (bvsub (_ bv31 31) (ite (= ((_ extract 30 30) (bvxor ?x13795 C2)) (_ bv1 1)) (_ bv0 31) ?x69202)))))
 (let (($x66162 (=> $x64669 (= (bvand %B (bvsub ?x68619 (_ bv1 31))) (_ bv0 31)))))
 (and $x66162 $x66009 $x67073 $x817)))))))))))))))))))))))))))
(check-sat)
