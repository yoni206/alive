(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun mem0 () (_ BitVec 8))
(declare-fun |ana_MaskedValueIsZero(%Y, (-1 << (log2(C1) + 1)))| () (_ BitVec 1))
(declare-fun C1 () (_ BitVec 51))
(declare-fun C2 () (_ BitVec 51))
(declare-fun %Y () (_ BitVec 51))
(assert
 (let (($x817 (and (distinct mem0 mem0) true)))
 (let (($x462 (= |ana_MaskedValueIsZero(%Y, (-1 << (log2(C1) + 1)))| (_ bv1 1))))
 (let (($x26661 (and (and (distinct C1 (_ bv0 51)) true) (= (bvand C1 (bvsub C1 (_ bv1 51))) (_ bv0 51)))))
 (let (($x15231 (= C2 (bvneg C1))))
 (let ((?x29394 (ite (and (distinct ((_ extract 3 2) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 3 3) C1) (_ bv0 1)) true) (_ bv3 51) (_ bv2 51)) (ite (and (distinct ((_ extract 1 1) C1) (_ bv0 1)) true) (_ bv1 51) (_ bv0 51)))))
 (let ((?x30138 (ite (and (distinct ((_ extract 6 6) C1) (_ bv0 1)) true) (_ bv6 51) (ite (and (distinct ((_ extract 5 5) C1) (_ bv0 1)) true) (_ bv5 51) (_ bv4 51)))))
 (let ((?x24900 (ite (and (distinct ((_ extract 9 9) C1) (_ bv0 1)) true) (_ bv9 51) (ite (and (distinct ((_ extract 8 8) C1) (_ bv0 1)) true) (_ bv8 51) (_ bv7 51)))))
 (let ((?x14805 (ite (and (distinct ((_ extract 12 12) C1) (_ bv0 1)) true) (_ bv12 51) (ite (and (distinct ((_ extract 11 11) C1) (_ bv0 1)) true) (_ bv11 51) (_ bv10 51)))))
 (let ((?x26468 (ite (and (distinct ((_ extract 12 7) C1) (_ bv0 6)) true) (ite (and (distinct ((_ extract 12 10) C1) (_ bv0 3)) true) ?x14805 ?x24900) (ite (and (distinct ((_ extract 6 4) C1) (_ bv0 3)) true) ?x30138 ?x29394))))
 (let ((?x28174 (ite (and (distinct ((_ extract 16 15) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 16 16) C1) (_ bv0 1)) true) (_ bv16 51) (_ bv15 51)) (ite (and (distinct ((_ extract 14 14) C1) (_ bv0 1)) true) (_ bv14 51) (_ bv13 51)))))
 (let ((?x28898 (ite (and (distinct ((_ extract 19 19) C1) (_ bv0 1)) true) (_ bv19 51) (ite (and (distinct ((_ extract 18 18) C1) (_ bv0 1)) true) (_ bv18 51) (_ bv17 51)))))
 (let ((?x21662 (ite (and (distinct ((_ extract 22 22) C1) (_ bv0 1)) true) (_ bv22 51) (ite (and (distinct ((_ extract 21 21) C1) (_ bv0 1)) true) (_ bv21 51) (_ bv20 51)))))
 (let ((?x25917 (ite (and (distinct ((_ extract 25 25) C1) (_ bv0 1)) true) (_ bv25 51) (ite (and (distinct ((_ extract 24 24) C1) (_ bv0 1)) true) (_ bv24 51) (_ bv23 51)))))
 (let ((?x18727 (ite (and (distinct ((_ extract 25 20) C1) (_ bv0 6)) true) (ite (and (distinct ((_ extract 25 23) C1) (_ bv0 3)) true) ?x25917 ?x21662) (ite (and (distinct ((_ extract 19 17) C1) (_ bv0 3)) true) ?x28898 ?x28174))))
 (let ((?x24510 (ite (and (distinct ((_ extract 29 28) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 29 29) C1) (_ bv0 1)) true) (_ bv29 51) (_ bv28 51)) (ite (and (distinct ((_ extract 27 27) C1) (_ bv0 1)) true) (_ bv27 51) (_ bv26 51)))))
 (let ((?x26703 (ite (and (distinct ((_ extract 32 32) C1) (_ bv0 1)) true) (_ bv32 51) (ite (and (distinct ((_ extract 31 31) C1) (_ bv0 1)) true) (_ bv31 51) (_ bv30 51)))))
 (let ((?x19157 (ite (and (distinct ((_ extract 35 35) C1) (_ bv0 1)) true) (_ bv35 51) (ite (and (distinct ((_ extract 34 34) C1) (_ bv0 1)) true) (_ bv34 51) (_ bv33 51)))))
 (let ((?x7391 (ite (and (distinct ((_ extract 38 38) C1) (_ bv0 1)) true) (_ bv38 51) (ite (and (distinct ((_ extract 37 37) C1) (_ bv0 1)) true) (_ bv37 51) (_ bv36 51)))))
 (let ((?x29466 (ite (and (distinct ((_ extract 38 33) C1) (_ bv0 6)) true) (ite (and (distinct ((_ extract 38 36) C1) (_ bv0 3)) true) ?x7391 ?x19157) (ite (and (distinct ((_ extract 32 30) C1) (_ bv0 3)) true) ?x26703 ?x24510))))
 (let ((?x16650 (ite (and (distinct ((_ extract 41 41) C1) (_ bv0 1)) true) (_ bv41 51) (ite (and (distinct ((_ extract 40 40) C1) (_ bv0 1)) true) (_ bv40 51) (_ bv39 51)))))
 (let ((?x13105 (ite (and (distinct ((_ extract 44 44) C1) (_ bv0 1)) true) (_ bv44 51) (ite (and (distinct ((_ extract 43 43) C1) (_ bv0 1)) true) (_ bv43 51) (_ bv42 51)))))
 (let ((?x26182 (ite (and (distinct ((_ extract 47 47) C1) (_ bv0 1)) true) (_ bv47 51) (ite (and (distinct ((_ extract 46 46) C1) (_ bv0 1)) true) (_ bv46 51) (_ bv45 51)))))
 (let ((?x27716 (ite (and (distinct ((_ extract 50 50) C1) (_ bv0 1)) true) (_ bv50 51) (ite (and (distinct ((_ extract 49 49) C1) (_ bv0 1)) true) (_ bv49 51) (_ bv48 51)))))
 (let ((?x26563 (ite (and (distinct ((_ extract 50 45) C1) (_ bv0 6)) true) (ite (and (distinct ((_ extract 50 48) C1) (_ bv0 3)) true) ?x27716 ?x26182) (ite (and (distinct ((_ extract 44 42) C1) (_ bv0 3)) true) ?x13105 ?x16650))))
 (let ((?x4334 (ite (and (distinct ((_ extract 50 26) C1) (_ bv0 25)) true) (ite (and (distinct ((_ extract 50 39) C1) (_ bv0 12)) true) ?x26563 ?x29466) (ite (and (distinct ((_ extract 25 13) C1) (_ bv0 13)) true) ?x18727 ?x26468))))
 (let (($x20022 (=> $x462 (= (bvand %Y (bvshl (_ bv2251799813685247 51) (bvadd ?x4334 (_ bv1 51)))) (_ bv0 51)))))
 (and $x20022 $x15231 $x26661 $x462 $x817))))))))))))))))))))))))))))
(check-sat)
