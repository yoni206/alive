(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C2 () (_ BitVec 41))
(declare-fun %Y () (_ BitVec 41))
(declare-fun C1 () (_ BitVec 41))
(assert
 (let ((?x16585 (ite (and (distinct ((_ extract 2 2) C2) (_ bv0 1)) true) (_ bv2 41) (ite (and (distinct ((_ extract 1 1) C2) (_ bv0 1)) true) (_ bv1 41) (_ bv0 41)))))
 (let ((?x16410 (ite (and (distinct ((_ extract 5 5) C2) (_ bv0 1)) true) (_ bv5 41) (ite (and (distinct ((_ extract 4 4) C2) (_ bv0 1)) true) (_ bv4 41) (_ bv3 41)))))
 (let ((?x17014 (ite (and (distinct ((_ extract 8 8) C2) (_ bv0 1)) true) (_ bv8 41) (ite (and (distinct ((_ extract 7 7) C2) (_ bv0 1)) true) (_ bv7 41) (_ bv6 41)))))
 (let ((?x17579 (ite (and (distinct ((_ extract 10 9) C2) (_ bv0 2)) true) (ite (and (distinct ((_ extract 10 10) C2) (_ bv0 1)) true) (_ bv10 41) (_ bv9 41)) ?x17014)))
 (let ((?x18518 (ite (and (distinct ((_ extract 10 6) C2) (_ bv0 5)) true) ?x17579 (ite (and (distinct ((_ extract 5 3) C2) (_ bv0 3)) true) ?x16410 ?x16585))))
 (let ((?x17251 (ite (and (distinct ((_ extract 13 13) C2) (_ bv0 1)) true) (_ bv13 41) (ite (and (distinct ((_ extract 12 12) C2) (_ bv0 1)) true) (_ bv12 41) (_ bv11 41)))))
 (let ((?x17559 (ite (and (distinct ((_ extract 15 14) C2) (_ bv0 2)) true) (ite (and (distinct ((_ extract 15 15) C2) (_ bv0 1)) true) (_ bv15 41) (_ bv14 41)) ?x17251)))
 (let ((?x17938 (ite (and (distinct ((_ extract 18 18) C2) (_ bv0 1)) true) (_ bv18 41) (ite (and (distinct ((_ extract 17 17) C2) (_ bv0 1)) true) (_ bv17 41) (_ bv16 41)))))
 (let ((?x17821 (ite (and (distinct ((_ extract 20 19) C2) (_ bv0 2)) true) (ite (and (distinct ((_ extract 20 20) C2) (_ bv0 1)) true) (_ bv20 41) (_ bv19 41)) ?x17938)))
 (let ((?x16660 (ite (and (distinct ((_ extract 20 11) C2) (_ bv0 10)) true) (ite (and (distinct ((_ extract 20 16) C2) (_ bv0 5)) true) ?x17821 ?x17559) ?x18518)))
 (let ((?x16908 (ite (and (distinct ((_ extract 23 23) C2) (_ bv0 1)) true) (_ bv23 41) (ite (and (distinct ((_ extract 22 22) C2) (_ bv0 1)) true) (_ bv22 41) (_ bv21 41)))))
 (let ((?x16769 (ite (and (distinct ((_ extract 25 24) C2) (_ bv0 2)) true) (ite (and (distinct ((_ extract 25 25) C2) (_ bv0 1)) true) (_ bv25 41) (_ bv24 41)) ?x16908)))
 (let ((?x15198 (ite (and (distinct ((_ extract 28 28) C2) (_ bv0 1)) true) (_ bv28 41) (ite (and (distinct ((_ extract 27 27) C2) (_ bv0 1)) true) (_ bv27 41) (_ bv26 41)))))
 (let ((?x14841 (ite (and (distinct ((_ extract 30 29) C2) (_ bv0 2)) true) (ite (and (distinct ((_ extract 30 30) C2) (_ bv0 1)) true) (_ bv30 41) (_ bv29 41)) ?x15198)))
 (let ((?x16460 (ite (and (distinct ((_ extract 33 33) C2) (_ bv0 1)) true) (_ bv33 41) (ite (and (distinct ((_ extract 32 32) C2) (_ bv0 1)) true) (_ bv32 41) (_ bv31 41)))))
 (let ((?x15640 (ite (and (distinct ((_ extract 35 34) C2) (_ bv0 2)) true) (ite (and (distinct ((_ extract 35 35) C2) (_ bv0 1)) true) (_ bv35 41) (_ bv34 41)) ?x16460)))
 (let ((?x18440 (ite (and (distinct ((_ extract 38 38) C2) (_ bv0 1)) true) (_ bv38 41) (ite (and (distinct ((_ extract 37 37) C2) (_ bv0 1)) true) (_ bv37 41) (_ bv36 41)))))
 (let ((?x17514 (ite (and (distinct ((_ extract 40 39) C2) (_ bv0 2)) true) (ite (and (distinct ((_ extract 40 40) C2) (_ bv0 1)) true) (_ bv40 41) (_ bv39 41)) ?x18440)))
 (let ((?x16922 (ite (and (distinct ((_ extract 40 31) C2) (_ bv0 10)) true) (ite (and (distinct ((_ extract 40 36) C2) (_ bv0 5)) true) ?x17514 ?x15640) (ite (and (distinct ((_ extract 30 26) C2) (_ bv0 5)) true) ?x14841 ?x16769))))
 (let ((?x18389 (bvsub (bvsub (_ bv41 41) (ite (and (distinct ((_ extract 40 21) C2) (_ bv0 20)) true) ?x16922 ?x16660)) (_ bv1 41))))
 (let ((?x18035 (bvsub (_ bv41 41) ?x18389)))
 (let (($x18063 (and (distinct (bvadd (bvxor %Y C2) C1) (bvashr (bvshl %Y ?x18035) ?x18035)) true)))
 (let (($x17554 (not (= (bvand C2 (bvshl (_ bv2199023255551 41) ?x18035)) (_ bv0 41)))))
 (let (($x13186 (and (and (distinct C2 (_ bv0 41)) true) (= (bvand C2 (bvsub C2 (_ bv1 41))) (_ bv0 41)))))
 (let (($x15152 (= C1 (bvneg C2))))
 (and $x15152 $x13186 $x17554 $x18063)))))))))))))))))))))))))))
(check-sat)
