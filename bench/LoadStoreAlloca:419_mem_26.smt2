(set-info :status unknown)
(declare-fun mem0 () (_ BitVec 8))
(declare-fun %x () (_ BitVec 27))
(declare-fun %p1 () (_ BitVec 64))
(declare-fun idx () (_ BitVec 64))
(declare-fun |ana_equivalentAddressValues(%p1, %p2)| () (_ BitVec 1))
(declare-fun %p2 () (_ BitVec 64))
(assert
 (let ((?x2806 (concat ((_ extract 7 3) mem0) ((_ extract 2 0) %x))))
 (let ((?x11105 (ite (and (and (distinct %p1 (_ bv0 64)) true) (or true true) (= idx %p1)) ?x2806 mem0)))
 (let ((?x6835 ((_ extract 10 3) %x)))
 (let (($x1312 (or true true)))
 (let (($x318 (and (distinct %p1 (_ bv0 64)) true)))
 (let ((?x3562 (ite (and $x318 $x1312 (= idx (bvadd (bvadd %p1 (_ bv1 64)) (_ bv0 64)))) ?x6835 ?x11105)))
 (let ((?x22445 ((_ extract 18 11) %x)))
 (let ((?x1110 (ite (and $x318 $x1312 (= idx (bvadd (bvadd %p1 (_ bv1 64)) (_ bv1 64)))) ?x22445 ?x3562)))
 (let ((?x6124 ((_ extract 26 19) %x)))
 (let ((?x9168 (ite (and $x318 $x1312 (= idx (bvadd (bvadd %p1 (_ bv1 64)) (_ bv2 64)))) ?x6124 ?x1110)))
 (let (($x18058 (= |ana_equivalentAddressValues(%p1, %p2)| (_ bv1 1))))
 (and (=> $x18058 (= %p1 %p2)) $x18058 (and (distinct ?x9168 ?x9168) true))))))))))))))
(check-sat)
