(set-info :status unknown)
(declare-fun %Y () (_ BitVec 11))
(declare-fun C2 () (_ BitVec 11))
(declare-fun C1 () (_ BitVec 10))
(declare-fun %X () (_ BitVec 10))
(assert
 (let ((?x14429 (ite (and (distinct ((_ extract 2 2) C2) (_ bv0 1)) true) (_ bv2 10) (ite (and (distinct ((_ extract 1 1) C2) (_ bv0 1)) true) (_ bv1 10) (_ bv0 10)))))
 (let ((?x21033 (ite (and (distinct ((_ extract 5 5) C2) (_ bv0 1)) true) (_ bv5 10) (ite (and (distinct ((_ extract 4 4) C2) (_ bv0 1)) true) (_ bv4 10) (_ bv3 10)))))
 (let ((?x1317 (ite (and (distinct ((_ extract 8 8) C2) (_ bv0 1)) true) (_ bv8 10) (ite (and (distinct ((_ extract 7 7) C2) (_ bv0 1)) true) (_ bv7 10) (_ bv6 10)))))
 (let ((?x17709 (ite (and (distinct ((_ extract 10 9) C2) (_ bv0 2)) true) (ite (and (distinct ((_ extract 10 10) C2) (_ bv0 1)) true) (_ bv10 10) (_ bv9 10)) ?x1317)))
 (let ((?x21409 (ite (and (distinct ((_ extract 10 6) C2) (_ bv0 5)) true) ?x17709 (ite (and (distinct ((_ extract 5 3) C2) (_ bv0 3)) true) ?x21033 ?x14429))))
 (let ((?x5252 (ite (and (distinct ((_ extract 2 2) C1) (_ bv0 1)) true) (_ bv2 10) (ite (and (distinct ((_ extract 1 1) C1) (_ bv0 1)) true) (_ bv1 10) (_ bv0 10)))))
 (let ((?x993 (ite (and (distinct ((_ extract 4 3) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 4 4) C1) (_ bv0 1)) true) (_ bv4 10) (_ bv3 10)) ?x5252)))
 (let ((?x1700 (ite (and (distinct ((_ extract 7 7) C1) (_ bv0 1)) true) (_ bv7 10) (ite (and (distinct ((_ extract 6 6) C1) (_ bv0 1)) true) (_ bv6 10) (_ bv5 10)))))
 (let ((?x17706 (ite (and (distinct ((_ extract 9 8) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 9 9) C1) (_ bv0 1)) true) (_ bv9 10) (_ bv8 10)) ?x1700)))
 (let ((?x10466 (bvsub (ite (and (distinct ((_ extract 9 5) C1) (_ bv0 5)) true) ?x17706 ?x993) ?x21409)))
 (let ((?x1203 (bvand %X C1)))
 (let (($x23044 (and (distinct (ite (= (ite (= ?x1203 (_ bv0 10)) (_ bv1 1) (_ bv0 1)) (_ bv1 1)) %Y (bvor %Y C2)) (bvor ((_ zero_extend 1) (bvlshr ?x1203 ?x10466)) %Y)) true)))
 (let ((?x22614 (ite (and (distinct ((_ extract 2 2) C1) (_ bv0 1)) true) (_ bv2 32) (ite (and (distinct ((_ extract 1 1) C1) (_ bv0 1)) true) (_ bv1 32) (_ bv0 32)))))
 (let ((?x13481 (ite (and (distinct ((_ extract 4 3) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 4 4) C1) (_ bv0 1)) true) (_ bv4 32) (_ bv3 32)) ?x22614)))
 (let ((?x16236 (ite (and (distinct ((_ extract 7 7) C1) (_ bv0 1)) true) (_ bv7 32) (ite (and (distinct ((_ extract 6 6) C1) (_ bv0 1)) true) (_ bv6 32) (_ bv5 32)))))
 (let ((?x15236 (ite (and (distinct ((_ extract 9 8) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 9 9) C1) (_ bv0 1)) true) (_ bv9 32) (_ bv8 32)) ?x16236)))
 (let ((?x7175 (ite (and (distinct ((_ extract 2 2) C2) (_ bv0 1)) true) (_ bv2 32) (ite (and (distinct ((_ extract 1 1) C2) (_ bv0 1)) true) (_ bv1 32) (_ bv0 32)))))
 (let ((?x2350 (ite (and (distinct ((_ extract 5 5) C2) (_ bv0 1)) true) (_ bv5 32) (ite (and (distinct ((_ extract 4 4) C2) (_ bv0 1)) true) (_ bv4 32) (_ bv3 32)))))
 (let ((?x17047 (ite (and (distinct ((_ extract 8 8) C2) (_ bv0 1)) true) (_ bv8 32) (ite (and (distinct ((_ extract 7 7) C2) (_ bv0 1)) true) (_ bv7 32) (_ bv6 32)))))
 (let ((?x11964 (ite (and (distinct ((_ extract 10 9) C2) (_ bv0 2)) true) (ite (and (distinct ((_ extract 10 10) C2) (_ bv0 1)) true) (_ bv10 32) (_ bv9 32)) ?x17047)))
 (let ((?x12459 (ite (and (distinct ((_ extract 10 6) C2) (_ bv0 5)) true) ?x11964 (ite (and (distinct ((_ extract 5 3) C2) (_ bv0 3)) true) ?x2350 ?x7175))))
 (and (and (and (distinct C1 (_ bv0 10)) true) (= (bvand C1 (bvsub C1 (_ bv1 10))) (_ bv0 10))) (and (and (distinct C2 (_ bv0 11)) true) (= (bvand C2 (bvsub C2 (_ bv1 11))) (_ bv0 11))) (bvslt ?x12459 (ite (and (distinct ((_ extract 9 5) C1) (_ bv0 5)) true) ?x15236 ?x13481)) $x23044)))))))))))))))))))))))
(check-sat)
