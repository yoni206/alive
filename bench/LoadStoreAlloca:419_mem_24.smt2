(set-info :status unknown)
(declare-fun mem0 () (_ BitVec 8))
(declare-fun %x () (_ BitVec 25))
(declare-fun %p1 () (_ BitVec 64))
(declare-fun idx () (_ BitVec 64))
(declare-fun |ana_equivalentAddressValues(%p1, %p2)| () (_ BitVec 1))
(declare-fun %p2 () (_ BitVec 64))
(assert
 (let ((?x6231 (concat ((_ extract 7 1) mem0) ((_ extract 0 0) %x))))
 (let ((?x16514 (ite (and (and (distinct %p1 (_ bv0 64)) true) (or true true) (= idx %p1)) ?x6231 mem0)))
 (let ((?x6517 ((_ extract 8 1) %x)))
 (let (($x4119 (or true true)))
 (let (($x11105 (and (distinct %p1 (_ bv0 64)) true)))
 (let ((?x11969 (ite (and $x11105 $x4119 (= idx (bvadd (bvadd %p1 (_ bv1 64)) (_ bv0 64)))) ?x6517 ?x16514)))
 (let ((?x3169 ((_ extract 16 9) %x)))
 (let ((?x11225 (ite (and $x11105 $x4119 (= idx (bvadd (bvadd %p1 (_ bv1 64)) (_ bv1 64)))) ?x3169 ?x11969)))
 (let ((?x1110 ((_ extract 24 17) %x)))
 (let ((?x19815 (ite (and $x11105 $x4119 (= idx (bvadd (bvadd %p1 (_ bv1 64)) (_ bv2 64)))) ?x1110 ?x11225)))
 (let (($x21807 (= |ana_equivalentAddressValues(%p1, %p2)| (_ bv1 1))))
 (and (=> $x21807 (= %p1 %p2)) $x21807 (and (distinct ?x19815 ?x19815) true))))))))))))))
(check-sat)
