(set-info :status unknown)
(declare-fun mem0 () (_ BitVec 8))
(declare-fun %x () (_ BitVec 48))
(declare-fun %p1 () (_ BitVec 64))
(declare-fun idx () (_ BitVec 64))
(declare-fun |ana_equivalentAddressValues(%p1, %p2)| () (_ BitVec 1))
(declare-fun %p2 () (_ BitVec 64))
(assert
 (let ((?x8483 ((_ extract 7 0) %x)))
 (let (($x21475 (or true true)))
 (let (($x20396 (and (distinct %p1 (_ bv0 64)) true)))
 (let ((?x19589 ((_ extract 15 8) %x)))
 (let ((?x5733 (ite (and $x20396 $x21475 (= idx (bvadd %p1 (_ bv1 64)))) ?x19589 (ite (and $x20396 $x21475 (= idx (bvadd %p1 (_ bv0 64)))) ?x8483 mem0))))
 (let ((?x23953 ((_ extract 23 16) %x)))
 (let ((?x23214 ((_ extract 31 24) %x)))
 (let ((?x20203 (ite (and $x20396 $x21475 (= idx (bvadd %p1 (_ bv3 64)))) ?x23214 (ite (and $x20396 $x21475 (= idx (bvadd %p1 (_ bv2 64)))) ?x23953 ?x5733))))
 (let ((?x6193 ((_ extract 39 32) %x)))
 (let ((?x4998 ((_ extract 47 40) %x)))
 (let ((?x17826 (ite (and $x20396 $x21475 (= idx (bvadd %p1 (_ bv5 64)))) ?x4998 (ite (and $x20396 $x21475 (= idx (bvadd %p1 (_ bv4 64)))) ?x6193 ?x20203))))
 (let (($x19973 (= |ana_equivalentAddressValues(%p1, %p2)| (_ bv1 1))))
 (and (=> $x19973 (= %p1 %p2)) $x19973 (and (distinct ?x17826 ?x17826) true)))))))))))))))
(check-sat)
