(set-info :status unknown)
(declare-fun mem0 () (_ BitVec 8))
(declare-fun %x () (_ BitVec 56))
(declare-fun %p1 () (_ BitVec 64))
(declare-fun idx () (_ BitVec 64))
(declare-fun |ana_equivalentAddressValues(%p1, %p2)| () (_ BitVec 1))
(declare-fun %p2 () (_ BitVec 64))
(assert
 (let ((?x11922 ((_ extract 7 0) %x)))
 (let (($x8765 (or true true)))
 (let (($x2633 (and (distinct %p1 (_ bv0 64)) true)))
 (let ((?x9814 ((_ extract 15 8) %x)))
 (let ((?x12629 (ite (and $x2633 $x8765 (= idx (bvadd %p1 (_ bv1 64)))) ?x9814 (ite (and $x2633 $x8765 (= idx (bvadd %p1 (_ bv0 64)))) ?x11922 mem0))))
 (let ((?x15467 ((_ extract 23 16) %x)))
 (let ((?x1914 ((_ extract 31 24) %x)))
 (let ((?x13447 (ite (and $x2633 $x8765 (= idx (bvadd %p1 (_ bv3 64)))) ?x1914 (ite (and $x2633 $x8765 (= idx (bvadd %p1 (_ bv2 64)))) ?x15467 ?x12629))))
 (let ((?x21161 ((_ extract 39 32) %x)))
 (let ((?x17907 ((_ extract 47 40) %x)))
 (let ((?x21475 (ite (and $x2633 $x8765 (= idx (bvadd %p1 (_ bv5 64)))) ?x17907 (ite (and $x2633 $x8765 (= idx (bvadd %p1 (_ bv4 64)))) ?x21161 ?x13447))))
 (let ((?x7441 ((_ extract 55 48) %x)))
 (let ((?x18741 (ite (and $x2633 $x8765 (= idx (bvadd %p1 (_ bv6 64)))) ?x7441 ?x21475)))
 (let (($x19021 (= |ana_equivalentAddressValues(%p1, %p2)| (_ bv1 1))))
 (and (=> $x19021 (= %p1 %p2)) $x19021 (and (distinct ?x18741 ?x18741) true)))))))))))))))))
(check-sat)
