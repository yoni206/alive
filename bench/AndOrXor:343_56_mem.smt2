(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun mem0 () (_ BitVec 8))
(declare-fun |ana_MaskedValueIsZero(%B, ((1 << (width(C2) - countLeadingZeros(((C2 - 1) ^ C2)))) - 1))| () (_ BitVec 1))
(declare-fun C2 () (_ BitVec 58))
(declare-fun C1 () (_ BitVec 58))
(declare-fun %B () (_ BitVec 58))
(assert
 (let (($x817 (and (distinct mem0 mem0) true)))
 (let (($x64669 (= |ana_MaskedValueIsZero(%B, ((1 << (width(C2) - countLeadingZeros(((C2 - 1) ^ C2)))) - 1))| (_ bv1 1))))
 (let ((?x23012 (bvsub C2 (_ bv1 58))))
 (let ((?x77613 (bvor ?x23012 C2)))
 (let (($x80011 (and (and (distinct ?x77613 (_ bv0 58)) true) (= (bvand (bvadd ?x77613 (_ bv1 58)) ?x77613) (_ bv0 58)) $x64669)))
 (let (($x77794 (or (= (bvand (bvadd C2 (_ bv1 58)) (bvsub (bvadd C2 (_ bv1 58)) (_ bv1 58))) (_ bv0 58)) $x80011)))
 (let ((?x53037 (bvand C1 C2)))
 (let (($x65191 (= ?x53037 C2)))
 (let ((?x74803 (ite (= ((_ extract 1 1) (bvxor ?x23012 C2)) (_ bv1 1)) (_ bv56 58) (ite (= ((_ extract 0 0) (bvxor ?x23012 C2)) (_ bv1 1)) (_ bv57 58) (_ bv58 58)))))
 (let ((?x76820 (ite (= ((_ extract 3 3) (bvxor ?x23012 C2)) (_ bv1 1)) (_ bv54 58) (ite (= ((_ extract 2 2) (bvxor ?x23012 C2)) (_ bv1 1)) (_ bv55 58) ?x74803))))
 (let ((?x79935 (ite (= ((_ extract 5 5) (bvxor ?x23012 C2)) (_ bv1 1)) (_ bv52 58) (ite (= ((_ extract 4 4) (bvxor ?x23012 C2)) (_ bv1 1)) (_ bv53 58) ?x76820))))
 (let ((?x76753 (ite (= ((_ extract 7 7) (bvxor ?x23012 C2)) (_ bv1 1)) (_ bv50 58) (ite (= ((_ extract 6 6) (bvxor ?x23012 C2)) (_ bv1 1)) (_ bv51 58) ?x79935))))
 (let ((?x75013 (ite (= ((_ extract 9 9) (bvxor ?x23012 C2)) (_ bv1 1)) (_ bv48 58) (ite (= ((_ extract 8 8) (bvxor ?x23012 C2)) (_ bv1 1)) (_ bv49 58) ?x76753))))
 (let ((?x75846 (ite (= ((_ extract 11 11) (bvxor ?x23012 C2)) (_ bv1 1)) (_ bv46 58) (ite (= ((_ extract 10 10) (bvxor ?x23012 C2)) (_ bv1 1)) (_ bv47 58) ?x75013))))
 (let ((?x73522 (ite (= ((_ extract 13 13) (bvxor ?x23012 C2)) (_ bv1 1)) (_ bv44 58) (ite (= ((_ extract 12 12) (bvxor ?x23012 C2)) (_ bv1 1)) (_ bv45 58) ?x75846))))
 (let ((?x72737 (ite (= ((_ extract 15 15) (bvxor ?x23012 C2)) (_ bv1 1)) (_ bv42 58) (ite (= ((_ extract 14 14) (bvxor ?x23012 C2)) (_ bv1 1)) (_ bv43 58) ?x73522))))
 (let ((?x79154 (ite (= ((_ extract 17 17) (bvxor ?x23012 C2)) (_ bv1 1)) (_ bv40 58) (ite (= ((_ extract 16 16) (bvxor ?x23012 C2)) (_ bv1 1)) (_ bv41 58) ?x72737))))
 (let ((?x80878 (ite (= ((_ extract 19 19) (bvxor ?x23012 C2)) (_ bv1 1)) (_ bv38 58) (ite (= ((_ extract 18 18) (bvxor ?x23012 C2)) (_ bv1 1)) (_ bv39 58) ?x79154))))
 (let ((?x72723 (ite (= ((_ extract 21 21) (bvxor ?x23012 C2)) (_ bv1 1)) (_ bv36 58) (ite (= ((_ extract 20 20) (bvxor ?x23012 C2)) (_ bv1 1)) (_ bv37 58) ?x80878))))
 (let ((?x69132 (ite (= ((_ extract 23 23) (bvxor ?x23012 C2)) (_ bv1 1)) (_ bv34 58) (ite (= ((_ extract 22 22) (bvxor ?x23012 C2)) (_ bv1 1)) (_ bv35 58) ?x72723))))
 (let ((?x79834 (ite (= ((_ extract 25 25) (bvxor ?x23012 C2)) (_ bv1 1)) (_ bv32 58) (ite (= ((_ extract 24 24) (bvxor ?x23012 C2)) (_ bv1 1)) (_ bv33 58) ?x69132))))
 (let ((?x74364 (ite (= ((_ extract 27 27) (bvxor ?x23012 C2)) (_ bv1 1)) (_ bv30 58) (ite (= ((_ extract 26 26) (bvxor ?x23012 C2)) (_ bv1 1)) (_ bv31 58) ?x79834))))
 (let ((?x75769 (ite (= ((_ extract 29 29) (bvxor ?x23012 C2)) (_ bv1 1)) (_ bv28 58) (ite (= ((_ extract 28 28) (bvxor ?x23012 C2)) (_ bv1 1)) (_ bv29 58) ?x74364))))
 (let ((?x71636 (ite (= ((_ extract 31 31) (bvxor ?x23012 C2)) (_ bv1 1)) (_ bv26 58) (ite (= ((_ extract 30 30) (bvxor ?x23012 C2)) (_ bv1 1)) (_ bv27 58) ?x75769))))
 (let ((?x79344 (ite (= ((_ extract 33 33) (bvxor ?x23012 C2)) (_ bv1 1)) (_ bv24 58) (ite (= ((_ extract 32 32) (bvxor ?x23012 C2)) (_ bv1 1)) (_ bv25 58) ?x71636))))
 (let ((?x73212 (ite (= ((_ extract 35 35) (bvxor ?x23012 C2)) (_ bv1 1)) (_ bv22 58) (ite (= ((_ extract 34 34) (bvxor ?x23012 C2)) (_ bv1 1)) (_ bv23 58) ?x79344))))
 (let ((?x77700 (ite (= ((_ extract 37 37) (bvxor ?x23012 C2)) (_ bv1 1)) (_ bv20 58) (ite (= ((_ extract 36 36) (bvxor ?x23012 C2)) (_ bv1 1)) (_ bv21 58) ?x73212))))
 (let ((?x74436 (ite (= ((_ extract 39 39) (bvxor ?x23012 C2)) (_ bv1 1)) (_ bv18 58) (ite (= ((_ extract 38 38) (bvxor ?x23012 C2)) (_ bv1 1)) (_ bv19 58) ?x77700))))
 (let ((?x76338 (ite (= ((_ extract 41 41) (bvxor ?x23012 C2)) (_ bv1 1)) (_ bv16 58) (ite (= ((_ extract 40 40) (bvxor ?x23012 C2)) (_ bv1 1)) (_ bv17 58) ?x74436))))
 (let ((?x74676 (ite (= ((_ extract 43 43) (bvxor ?x23012 C2)) (_ bv1 1)) (_ bv14 58) (ite (= ((_ extract 42 42) (bvxor ?x23012 C2)) (_ bv1 1)) (_ bv15 58) ?x76338))))
 (let ((?x76014 (ite (= ((_ extract 45 45) (bvxor ?x23012 C2)) (_ bv1 1)) (_ bv12 58) (ite (= ((_ extract 44 44) (bvxor ?x23012 C2)) (_ bv1 1)) (_ bv13 58) ?x74676))))
 (let ((?x76484 (ite (= ((_ extract 47 47) (bvxor ?x23012 C2)) (_ bv1 1)) (_ bv10 58) (ite (= ((_ extract 46 46) (bvxor ?x23012 C2)) (_ bv1 1)) (_ bv11 58) ?x76014))))
 (let ((?x70237 (ite (= ((_ extract 49 49) (bvxor ?x23012 C2)) (_ bv1 1)) (_ bv8 58) (ite (= ((_ extract 48 48) (bvxor ?x23012 C2)) (_ bv1 1)) (_ bv9 58) ?x76484))))
 (let ((?x79613 (ite (= ((_ extract 51 51) (bvxor ?x23012 C2)) (_ bv1 1)) (_ bv6 58) (ite (= ((_ extract 50 50) (bvxor ?x23012 C2)) (_ bv1 1)) (_ bv7 58) ?x70237))))
 (let ((?x78471 (ite (= ((_ extract 53 53) (bvxor ?x23012 C2)) (_ bv1 1)) (_ bv4 58) (ite (= ((_ extract 52 52) (bvxor ?x23012 C2)) (_ bv1 1)) (_ bv5 58) ?x79613))))
 (let ((?x77238 (ite (= ((_ extract 55 55) (bvxor ?x23012 C2)) (_ bv1 1)) (_ bv2 58) (ite (= ((_ extract 54 54) (bvxor ?x23012 C2)) (_ bv1 1)) (_ bv3 58) ?x78471))))
 (let ((?x77766 (ite (= ((_ extract 57 57) (bvxor ?x23012 C2)) (_ bv1 1)) (_ bv0 58) (ite (= ((_ extract 56 56) (bvxor ?x23012 C2)) (_ bv1 1)) (_ bv1 58) ?x77238))))
 (let (($x76277 (=> $x64669 (= (bvand %B (bvsub (bvshl (_ bv1 58) (bvsub (_ bv58 58) ?x77766)) (_ bv1 58))) (_ bv0 58)))))
 (and $x76277 $x65191 $x77794 $x817))))))))))))))))))))))))))))))))))))))))
(check-sat)
