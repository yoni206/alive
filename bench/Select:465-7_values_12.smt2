(set-info :status unknown)
(declare-fun %Y () (_ BitVec 11))
(declare-fun C2 () (_ BitVec 11))
(declare-fun C1 () (_ BitVec 20))
(declare-fun %X () (_ BitVec 20))
(assert
 (let ((?x2297 (ite (and (distinct ((_ extract 2 2) C2) (_ bv0 1)) true) (_ bv2 20) (ite (and (distinct ((_ extract 1 1) C2) (_ bv0 1)) true) (_ bv1 20) (_ bv0 20)))))
 (let ((?x6090 (ite (and (distinct ((_ extract 5 5) C2) (_ bv0 1)) true) (_ bv5 20) (ite (and (distinct ((_ extract 4 4) C2) (_ bv0 1)) true) (_ bv4 20) (_ bv3 20)))))
 (let ((?x2126 (ite (and (distinct ((_ extract 8 8) C2) (_ bv0 1)) true) (_ bv8 20) (ite (and (distinct ((_ extract 7 7) C2) (_ bv0 1)) true) (_ bv7 20) (_ bv6 20)))))
 (let ((?x2118 (ite (and (distinct ((_ extract 10 9) C2) (_ bv0 2)) true) (ite (and (distinct ((_ extract 10 10) C2) (_ bv0 1)) true) (_ bv10 20) (_ bv9 20)) ?x2126)))
 (let ((?x2053 (ite (and (distinct ((_ extract 10 6) C2) (_ bv0 5)) true) ?x2118 (ite (and (distinct ((_ extract 5 3) C2) (_ bv0 3)) true) ?x6090 ?x2297))))
 (let ((?x3023 (ite (and (distinct ((_ extract 2 2) C1) (_ bv0 1)) true) (_ bv2 20) (ite (and (distinct ((_ extract 1 1) C1) (_ bv0 1)) true) (_ bv1 20) (_ bv0 20)))))
 (let ((?x6035 (ite (and (distinct ((_ extract 4 3) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 4 4) C1) (_ bv0 1)) true) (_ bv4 20) (_ bv3 20)) ?x3023)))
 (let ((?x4451 (ite (and (distinct ((_ extract 7 7) C1) (_ bv0 1)) true) (_ bv7 20) (ite (and (distinct ((_ extract 6 6) C1) (_ bv0 1)) true) (_ bv6 20) (_ bv5 20)))))
 (let ((?x3762 (ite (and (distinct ((_ extract 9 8) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 9 9) C1) (_ bv0 1)) true) (_ bv9 20) (_ bv8 20)) ?x4451)))
 (let ((?x1875 (ite (and (distinct ((_ extract 12 12) C1) (_ bv0 1)) true) (_ bv12 20) (ite (and (distinct ((_ extract 11 11) C1) (_ bv0 1)) true) (_ bv11 20) (_ bv10 20)))))
 (let ((?x3763 (ite (and (distinct ((_ extract 14 13) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 14 14) C1) (_ bv0 1)) true) (_ bv14 20) (_ bv13 20)) ?x1875)))
 (let ((?x4906 (ite (and (distinct ((_ extract 17 17) C1) (_ bv0 1)) true) (_ bv17 20) (ite (and (distinct ((_ extract 16 16) C1) (_ bv0 1)) true) (_ bv16 20) (_ bv15 20)))))
 (let ((?x4459 (ite (and (distinct ((_ extract 19 18) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 19 19) C1) (_ bv0 1)) true) (_ bv19 20) (_ bv18 20)) ?x4906)))
 (let ((?x6571 (ite (and (distinct ((_ extract 19 10) C1) (_ bv0 10)) true) (ite (and (distinct ((_ extract 19 15) C1) (_ bv0 5)) true) ?x4459 ?x3763) (ite (and (distinct ((_ extract 9 5) C1) (_ bv0 5)) true) ?x3762 ?x6035))))
 (let ((?x1211 (bvsub ?x6571 ?x2053)))
 (let ((?x4667 (bvand %X C1)))
 (let (($x4280 (and (distinct (ite (= (ite (= ?x4667 (_ bv0 20)) (_ bv1 1) (_ bv0 1)) (_ bv1 1)) (bvor %Y C2) %Y) (bvor (bvxor ((_ extract 10 0) (bvlshr ?x4667 ?x1211)) C2) %Y)) true)))
 (let ((?x2460 (ite (and (distinct ((_ extract 2 2) C1) (_ bv0 1)) true) (_ bv2 32) (ite (and (distinct ((_ extract 1 1) C1) (_ bv0 1)) true) (_ bv1 32) (_ bv0 32)))))
 (let ((?x2356 (ite (and (distinct ((_ extract 4 3) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 4 4) C1) (_ bv0 1)) true) (_ bv4 32) (_ bv3 32)) ?x2460)))
 (let ((?x4831 (ite (and (distinct ((_ extract 7 7) C1) (_ bv0 1)) true) (_ bv7 32) (ite (and (distinct ((_ extract 6 6) C1) (_ bv0 1)) true) (_ bv6 32) (_ bv5 32)))))
 (let ((?x2235 (ite (and (distinct ((_ extract 9 8) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 9 9) C1) (_ bv0 1)) true) (_ bv9 32) (_ bv8 32)) ?x4831)))
 (let ((?x2244 (ite (and (distinct ((_ extract 12 12) C1) (_ bv0 1)) true) (_ bv12 32) (ite (and (distinct ((_ extract 11 11) C1) (_ bv0 1)) true) (_ bv11 32) (_ bv10 32)))))
 (let ((?x2193 (ite (and (distinct ((_ extract 14 13) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 14 14) C1) (_ bv0 1)) true) (_ bv14 32) (_ bv13 32)) ?x2244)))
 (let ((?x4077 (ite (and (distinct ((_ extract 17 17) C1) (_ bv0 1)) true) (_ bv17 32) (ite (and (distinct ((_ extract 16 16) C1) (_ bv0 1)) true) (_ bv16 32) (_ bv15 32)))))
 (let ((?x2326 (ite (and (distinct ((_ extract 19 18) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 19 19) C1) (_ bv0 1)) true) (_ bv19 32) (_ bv18 32)) ?x4077)))
 (let ((?x4277 (ite (and (distinct ((_ extract 19 10) C1) (_ bv0 10)) true) (ite (and (distinct ((_ extract 19 15) C1) (_ bv0 5)) true) ?x2326 ?x2193) (ite (and (distinct ((_ extract 9 5) C1) (_ bv0 5)) true) ?x2235 ?x2356))))
 (let ((?x1173 (ite (and (distinct ((_ extract 2 2) C2) (_ bv0 1)) true) (_ bv2 32) (ite (and (distinct ((_ extract 1 1) C2) (_ bv0 1)) true) (_ bv1 32) (_ bv0 32)))))
 (let ((?x2397 (ite (and (distinct ((_ extract 5 5) C2) (_ bv0 1)) true) (_ bv5 32) (ite (and (distinct ((_ extract 4 4) C2) (_ bv0 1)) true) (_ bv4 32) (_ bv3 32)))))
 (let ((?x1703 (ite (and (distinct ((_ extract 8 8) C2) (_ bv0 1)) true) (_ bv8 32) (ite (and (distinct ((_ extract 7 7) C2) (_ bv0 1)) true) (_ bv7 32) (_ bv6 32)))))
 (let ((?x5225 (ite (and (distinct ((_ extract 10 9) C2) (_ bv0 2)) true) (ite (and (distinct ((_ extract 10 10) C2) (_ bv0 1)) true) (_ bv10 32) (_ bv9 32)) ?x1703)))
 (let ((?x4539 (ite (and (distinct ((_ extract 10 6) C2) (_ bv0 5)) true) ?x5225 (ite (and (distinct ((_ extract 5 3) C2) (_ bv0 3)) true) ?x2397 ?x1173))))
 (and (and (and (distinct C1 (_ bv0 20)) true) (= (bvand C1 (bvsub C1 (_ bv1 20))) (_ bv0 20))) (and (and (distinct C2 (_ bv0 11)) true) (= (bvand C2 (bvsub C2 (_ bv1 11))) (_ bv0 11))) (bvslt ?x4539 ?x4277) $x4280)))))))))))))))))))))))))))))))))
(check-sat)
