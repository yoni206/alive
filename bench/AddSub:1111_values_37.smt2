(set-info :status unknown)
(declare-fun C2 () (_ BitVec 43))
(declare-fun %Y () (_ BitVec 43))
(declare-fun C1 () (_ BitVec 43))
(assert
 (let ((?x5427 (ite (and (distinct ((_ extract 2 2) C2) (_ bv0 1)) true) (_ bv2 43) (ite (and (distinct ((_ extract 1 1) C2) (_ bv0 1)) true) (_ bv1 43) (_ bv0 43)))))
 (let ((?x4505 (ite (and (distinct ((_ extract 5 5) C2) (_ bv0 1)) true) (_ bv5 43) (ite (and (distinct ((_ extract 4 4) C2) (_ bv0 1)) true) (_ bv4 43) (_ bv3 43)))))
 (let ((?x3908 (ite (and (distinct ((_ extract 8 8) C2) (_ bv0 1)) true) (_ bv8 43) (ite (and (distinct ((_ extract 7 7) C2) (_ bv0 1)) true) (_ bv7 43) (_ bv6 43)))))
 (let ((?x5380 (ite (and (distinct ((_ extract 10 9) C2) (_ bv0 2)) true) (ite (and (distinct ((_ extract 10 10) C2) (_ bv0 1)) true) (_ bv10 43) (_ bv9 43)) ?x3908)))
 (let ((?x5092 (ite (and (distinct ((_ extract 10 6) C2) (_ bv0 5)) true) ?x5380 (ite (and (distinct ((_ extract 5 3) C2) (_ bv0 3)) true) ?x4505 ?x5427))))
 (let ((?x4499 (ite (and (distinct ((_ extract 13 13) C2) (_ bv0 1)) true) (_ bv13 43) (ite (and (distinct ((_ extract 12 12) C2) (_ bv0 1)) true) (_ bv12 43) (_ bv11 43)))))
 (let ((?x4349 (ite (and (distinct ((_ extract 16 16) C2) (_ bv0 1)) true) (_ bv16 43) (ite (and (distinct ((_ extract 15 15) C2) (_ bv0 1)) true) (_ bv15 43) (_ bv14 43)))))
 (let ((?x4738 (ite (and (distinct ((_ extract 19 19) C2) (_ bv0 1)) true) (_ bv19 43) (ite (and (distinct ((_ extract 18 18) C2) (_ bv0 1)) true) (_ bv18 43) (_ bv17 43)))))
 (let ((?x4643 (ite (and (distinct ((_ extract 21 20) C2) (_ bv0 2)) true) (ite (and (distinct ((_ extract 21 21) C2) (_ bv0 1)) true) (_ bv21 43) (_ bv20 43)) ?x4738)))
 (let ((?x1991 (ite (and (distinct ((_ extract 21 17) C2) (_ bv0 5)) true) ?x4643 (ite (and (distinct ((_ extract 16 14) C2) (_ bv0 3)) true) ?x4349 ?x4499))))
 (let ((?x1652 (ite (and (distinct ((_ extract 24 24) C2) (_ bv0 1)) true) (_ bv24 43) (ite (and (distinct ((_ extract 23 23) C2) (_ bv0 1)) true) (_ bv23 43) (_ bv22 43)))))
 (let ((?x5872 (ite (and (distinct ((_ extract 27 27) C2) (_ bv0 1)) true) (_ bv27 43) (ite (and (distinct ((_ extract 26 26) C2) (_ bv0 1)) true) (_ bv26 43) (_ bv25 43)))))
 (let ((?x3727 (ite (and (distinct ((_ extract 30 30) C2) (_ bv0 1)) true) (_ bv30 43) (ite (and (distinct ((_ extract 29 29) C2) (_ bv0 1)) true) (_ bv29 43) (_ bv28 43)))))
 (let ((?x6034 (ite (and (distinct ((_ extract 32 31) C2) (_ bv0 2)) true) (ite (and (distinct ((_ extract 32 32) C2) (_ bv0 1)) true) (_ bv32 43) (_ bv31 43)) ?x3727)))
 (let ((?x5525 (ite (and (distinct ((_ extract 32 28) C2) (_ bv0 5)) true) ?x6034 (ite (and (distinct ((_ extract 27 25) C2) (_ bv0 3)) true) ?x5872 ?x1652))))
 (let ((?x6543 (ite (and (distinct ((_ extract 35 35) C2) (_ bv0 1)) true) (_ bv35 43) (ite (and (distinct ((_ extract 34 34) C2) (_ bv0 1)) true) (_ bv34 43) (_ bv33 43)))))
 (let ((?x4460 (ite (and (distinct ((_ extract 37 36) C2) (_ bv0 2)) true) (ite (and (distinct ((_ extract 37 37) C2) (_ bv0 1)) true) (_ bv37 43) (_ bv36 43)) ?x6543)))
 (let ((?x6999 (ite (and (distinct ((_ extract 40 40) C2) (_ bv0 1)) true) (_ bv40 43) (ite (and (distinct ((_ extract 39 39) C2) (_ bv0 1)) true) (_ bv39 43) (_ bv38 43)))))
 (let ((?x2140 (ite (and (distinct ((_ extract 42 41) C2) (_ bv0 2)) true) (ite (and (distinct ((_ extract 42 42) C2) (_ bv0 1)) true) (_ bv42 43) (_ bv41 43)) ?x6999)))
 (let ((?x5540 (ite (and (distinct ((_ extract 42 33) C2) (_ bv0 10)) true) (ite (and (distinct ((_ extract 42 38) C2) (_ bv0 5)) true) ?x2140 ?x4460) ?x5525)))
 (let ((?x5299 (ite (and (distinct ((_ extract 42 22) C2) (_ bv0 21)) true) ?x5540 (ite (and (distinct ((_ extract 21 11) C2) (_ bv0 11)) true) ?x1991 ?x5092))))
 (let ((?x3691 (bvsub (_ bv43 43) (bvsub (bvsub (_ bv43 43) ?x5299) (_ bv1 43)))))
 (let (($x7694 (and (distinct (bvadd (bvxor %Y C2) C1) (bvashr (bvshl %Y ?x3691) ?x3691)) true)))
 (and (= C1 (bvneg C2)) (and (and (distinct C2 (_ bv0 43)) true) (= (bvand C2 (bvsub C2 (_ bv1 43))) (_ bv0 43))) (not (= (bvand C2 (bvshl (_ bv8796093022207 43) ?x3691)) (_ bv0 43))) $x7694)))))))))))))))))))))))))
(check-sat)
