(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun mem0 () (_ BitVec 8))
(declare-fun |ana_MaskedValueIsZero(%B, ((1 << (width(C2) - countLeadingZeros(((C2 - 1) ^ C2)))) - 1))| () (_ BitVec 1))
(declare-fun C2 () (_ BitVec 47))
(declare-fun C1 () (_ BitVec 47))
(declare-fun %B () (_ BitVec 47))
(assert
 (let (($x817 (and (distinct mem0 mem0) true)))
 (let (($x64669 (= |ana_MaskedValueIsZero(%B, ((1 << (width(C2) - countLeadingZeros(((C2 - 1) ^ C2)))) - 1))| (_ bv1 1))))
 (let ((?x15512 (bvsub C2 (_ bv1 47))))
 (let ((?x75818 (bvor ?x15512 C2)))
 (let (($x74983 (and (and (distinct ?x75818 (_ bv0 47)) true) (= (bvand (bvadd ?x75818 (_ bv1 47)) ?x75818) (_ bv0 47)) $x64669)))
 (let (($x73134 (or (= (bvand (bvadd C2 (_ bv1 47)) (bvsub (bvadd C2 (_ bv1 47)) (_ bv1 47))) (_ bv0 47)) $x74983)))
 (let ((?x54198 (bvand C1 C2)))
 (let (($x71904 (= ?x54198 C2)))
 (let ((?x73846 (ite (= ((_ extract 1 1) (bvxor ?x15512 C2)) (_ bv1 1)) (_ bv45 47) (ite (= ((_ extract 0 0) (bvxor ?x15512 C2)) (_ bv1 1)) (_ bv46 47) (_ bv47 47)))))
 (let ((?x72028 (ite (= ((_ extract 3 3) (bvxor ?x15512 C2)) (_ bv1 1)) (_ bv43 47) (ite (= ((_ extract 2 2) (bvxor ?x15512 C2)) (_ bv1 1)) (_ bv44 47) ?x73846))))
 (let ((?x73924 (ite (= ((_ extract 5 5) (bvxor ?x15512 C2)) (_ bv1 1)) (_ bv41 47) (ite (= ((_ extract 4 4) (bvxor ?x15512 C2)) (_ bv1 1)) (_ bv42 47) ?x72028))))
 (let ((?x74206 (ite (= ((_ extract 7 7) (bvxor ?x15512 C2)) (_ bv1 1)) (_ bv39 47) (ite (= ((_ extract 6 6) (bvxor ?x15512 C2)) (_ bv1 1)) (_ bv40 47) ?x73924))))
 (let ((?x75317 (ite (= ((_ extract 9 9) (bvxor ?x15512 C2)) (_ bv1 1)) (_ bv37 47) (ite (= ((_ extract 8 8) (bvxor ?x15512 C2)) (_ bv1 1)) (_ bv38 47) ?x74206))))
 (let ((?x71567 (ite (= ((_ extract 11 11) (bvxor ?x15512 C2)) (_ bv1 1)) (_ bv35 47) (ite (= ((_ extract 10 10) (bvxor ?x15512 C2)) (_ bv1 1)) (_ bv36 47) ?x75317))))
 (let ((?x74754 (ite (= ((_ extract 13 13) (bvxor ?x15512 C2)) (_ bv1 1)) (_ bv33 47) (ite (= ((_ extract 12 12) (bvxor ?x15512 C2)) (_ bv1 1)) (_ bv34 47) ?x71567))))
 (let ((?x75495 (ite (= ((_ extract 15 15) (bvxor ?x15512 C2)) (_ bv1 1)) (_ bv31 47) (ite (= ((_ extract 14 14) (bvxor ?x15512 C2)) (_ bv1 1)) (_ bv32 47) ?x74754))))
 (let ((?x71935 (ite (= ((_ extract 17 17) (bvxor ?x15512 C2)) (_ bv1 1)) (_ bv29 47) (ite (= ((_ extract 16 16) (bvxor ?x15512 C2)) (_ bv1 1)) (_ bv30 47) ?x75495))))
 (let ((?x71880 (ite (= ((_ extract 19 19) (bvxor ?x15512 C2)) (_ bv1 1)) (_ bv27 47) (ite (= ((_ extract 18 18) (bvxor ?x15512 C2)) (_ bv1 1)) (_ bv28 47) ?x71935))))
 (let ((?x70103 (ite (= ((_ extract 21 21) (bvxor ?x15512 C2)) (_ bv1 1)) (_ bv25 47) (ite (= ((_ extract 20 20) (bvxor ?x15512 C2)) (_ bv1 1)) (_ bv26 47) ?x71880))))
 (let ((?x72317 (ite (= ((_ extract 23 23) (bvxor ?x15512 C2)) (_ bv1 1)) (_ bv23 47) (ite (= ((_ extract 22 22) (bvxor ?x15512 C2)) (_ bv1 1)) (_ bv24 47) ?x70103))))
 (let ((?x73622 (ite (= ((_ extract 25 25) (bvxor ?x15512 C2)) (_ bv1 1)) (_ bv21 47) (ite (= ((_ extract 24 24) (bvxor ?x15512 C2)) (_ bv1 1)) (_ bv22 47) ?x72317))))
 (let ((?x74088 (ite (= ((_ extract 27 27) (bvxor ?x15512 C2)) (_ bv1 1)) (_ bv19 47) (ite (= ((_ extract 26 26) (bvxor ?x15512 C2)) (_ bv1 1)) (_ bv20 47) ?x73622))))
 (let ((?x64139 (ite (= ((_ extract 29 29) (bvxor ?x15512 C2)) (_ bv1 1)) (_ bv17 47) (ite (= ((_ extract 28 28) (bvxor ?x15512 C2)) (_ bv1 1)) (_ bv18 47) ?x74088))))
 (let ((?x74761 (ite (= ((_ extract 31 31) (bvxor ?x15512 C2)) (_ bv1 1)) (_ bv15 47) (ite (= ((_ extract 30 30) (bvxor ?x15512 C2)) (_ bv1 1)) (_ bv16 47) ?x64139))))
 (let ((?x65993 (ite (= ((_ extract 33 33) (bvxor ?x15512 C2)) (_ bv1 1)) (_ bv13 47) (ite (= ((_ extract 32 32) (bvxor ?x15512 C2)) (_ bv1 1)) (_ bv14 47) ?x74761))))
 (let ((?x66103 (ite (= ((_ extract 35 35) (bvxor ?x15512 C2)) (_ bv1 1)) (_ bv11 47) (ite (= ((_ extract 34 34) (bvxor ?x15512 C2)) (_ bv1 1)) (_ bv12 47) ?x65993))))
 (let ((?x73234 (ite (= ((_ extract 37 37) (bvxor ?x15512 C2)) (_ bv1 1)) (_ bv9 47) (ite (= ((_ extract 36 36) (bvxor ?x15512 C2)) (_ bv1 1)) (_ bv10 47) ?x66103))))
 (let ((?x72762 (ite (= ((_ extract 39 39) (bvxor ?x15512 C2)) (_ bv1 1)) (_ bv7 47) (ite (= ((_ extract 38 38) (bvxor ?x15512 C2)) (_ bv1 1)) (_ bv8 47) ?x73234))))
 (let ((?x74672 (ite (= ((_ extract 41 41) (bvxor ?x15512 C2)) (_ bv1 1)) (_ bv5 47) (ite (= ((_ extract 40 40) (bvxor ?x15512 C2)) (_ bv1 1)) (_ bv6 47) ?x72762))))
 (let ((?x72715 (ite (= ((_ extract 43 43) (bvxor ?x15512 C2)) (_ bv1 1)) (_ bv3 47) (ite (= ((_ extract 42 42) (bvxor ?x15512 C2)) (_ bv1 1)) (_ bv4 47) ?x74672))))
 (let ((?x74795 (ite (= ((_ extract 45 45) (bvxor ?x15512 C2)) (_ bv1 1)) (_ bv1 47) (ite (= ((_ extract 44 44) (bvxor ?x15512 C2)) (_ bv1 1)) (_ bv2 47) ?x72715))))
 (let ((?x74776 (bvshl (_ bv1 47) (bvsub (_ bv47 47) (ite (= ((_ extract 46 46) (bvxor ?x15512 C2)) (_ bv1 1)) (_ bv0 47) ?x74795)))))
 (let (($x74912 (=> $x64669 (= (bvand %B (bvsub ?x74776 (_ bv1 47))) (_ bv0 47)))))
 (and $x74912 $x71904 $x73134 $x817)))))))))))))))))))))))))))))))))))
(check-sat)
