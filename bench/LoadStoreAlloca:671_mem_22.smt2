(set-info :status unknown)
(declare-fun mem0 () (_ BitVec 8))
(declare-fun %y () (_ BitVec 24))
(declare-fun %p2 () (_ BitVec 64))
(declare-fun idx () (_ BitVec 64))
(declare-fun %x () (_ BitVec 24))
(declare-fun %p1 () (_ BitVec 64))
(declare-fun |ana_equivalentAddressValues(%p1, %p2)| () (_ BitVec 1))
(assert
 (let (($x8696 (or true true)))
 (let (($x11371 (and (distinct %p2 (_ bv0 64)) true)))
 (let ((?x9066 (ite (and $x11371 $x8696 (= idx (bvadd %p2 (_ bv0 64)))) ((_ extract 7 0) %y) mem0)))
 (let ((?x19961 (ite (and $x11371 $x8696 (= idx (bvadd %p2 (_ bv1 64)))) ((_ extract 15 8) %y) ?x9066)))
 (let ((?x18598 (ite (and $x11371 $x8696 (= idx (bvadd %p2 (_ bv2 64)))) ((_ extract 23 16) %y) ?x19961)))
 (let ((?x2401 (ite (and (and (distinct %p1 (_ bv0 64)) true) $x8696 (= idx (bvadd %p1 (_ bv0 64)))) ((_ extract 7 0) %x) mem0)))
 (let ((?x17538 (ite (and (and (distinct %p1 (_ bv0 64)) true) $x8696 (= idx (bvadd %p1 (_ bv1 64)))) ((_ extract 15 8) %x) ?x2401)))
 (let ((?x16781 (ite (and (and (distinct %p1 (_ bv0 64)) true) $x8696 (= idx (bvadd %p1 (_ bv2 64)))) ((_ extract 23 16) %x) ?x17538)))
 (let (($x17212 (and (distinct %p1 (_ bv0 64)) true)))
 (let ((?x21710 (ite (and $x17212 $x8696 $x11371 $x8696 (= idx (bvadd %p2 (_ bv0 64)))) ((_ extract 7 0) %y) ?x16781)))
 (let ((?x8887 (ite (and $x17212 $x8696 $x11371 $x8696 (= idx (bvadd %p2 (_ bv1 64)))) ((_ extract 15 8) %y) ?x21710)))
 (let ((?x23767 (ite (and $x17212 $x8696 $x11371 $x8696 (= idx (bvadd %p2 (_ bv2 64)))) ((_ extract 23 16) %y) ?x8887)))
 (let (($x17912 (= |ana_equivalentAddressValues(%p1, %p2)| (_ bv1 1))))
 (and (=> $x17912 (= %p1 %p2)) $x17912 (and (distinct ?x23767 ?x18598) true))))))))))))))))
(check-sat)
