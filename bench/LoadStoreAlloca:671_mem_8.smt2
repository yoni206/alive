(set-info :status unknown)
(declare-fun mem0 () (_ BitVec 8))
(declare-fun %y () (_ BitVec 10))
(declare-fun %p2 () (_ BitVec 64))
(declare-fun idx () (_ BitVec 64))
(declare-fun %x () (_ BitVec 10))
(declare-fun %p1 () (_ BitVec 64))
(declare-fun |ana_equivalentAddressValues(%p1, %p2)| () (_ BitVec 1))
(assert
 (let ((?x1070 (ite (and (and (distinct %p2 (_ bv0 64)) true) (or true true) (= idx %p2)) (concat ((_ extract 7 2) mem0) ((_ extract 1 0) %y)) mem0)))
 (let (($x7172 (or true true)))
 (let (($x284 (and (distinct %p2 (_ bv0 64)) true)))
 (let ((?x10461 (ite (and $x284 $x7172 (= idx (bvadd (bvadd %p2 (_ bv1 64)) (_ bv0 64)))) ((_ extract 9 2) %y) ?x1070)))
 (let ((?x22023 (ite (and (and (distinct %p1 (_ bv0 64)) true) $x7172 (= idx %p1)) (concat ((_ extract 7 2) mem0) ((_ extract 1 0) %x)) mem0)))
 (let (($x17212 (and (distinct %p1 (_ bv0 64)) true)))
 (let ((?x7397 (ite (and $x17212 $x7172 (= idx (bvadd (bvadd %p1 (_ bv1 64)) (_ bv0 64)))) ((_ extract 9 2) %x) ?x22023)))
 (let ((?x14222 (ite (and $x17212 $x7172 (= %p2 %p1)) (concat ((_ extract 7 2) mem0) ((_ extract 1 0) %x)) mem0)))
 (let ((?x10663 (ite (and $x17212 $x7172 (= %p2 (bvadd (bvadd %p1 (_ bv1 64)) (_ bv0 64)))) ((_ extract 9 2) %x) ?x14222)))
 (let ((?x11965 (ite (and $x17212 $x7172 $x284 $x7172 (= idx %p2)) (concat ((_ extract 7 2) ?x10663) ((_ extract 1 0) %y)) ?x7397)))
 (let ((?x16308 (ite (and $x17212 $x7172 $x284 $x7172 (= idx (bvadd (bvadd %p2 (_ bv1 64)) (_ bv0 64)))) ((_ extract 9 2) %y) ?x11965)))
 (let (($x12067 (= |ana_equivalentAddressValues(%p1, %p2)| (_ bv1 1))))
 (and (=> $x12067 (= %p1 %p2)) $x12067 (and (distinct ?x16308 ?x10461) true)))))))))))))))
(check-sat)
