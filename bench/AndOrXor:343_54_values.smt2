(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C2 () (_ BitVec 56))
(declare-fun %B () (_ BitVec 56))
(declare-fun %A () (_ BitVec 56))
(declare-fun C1 () (_ BitVec 56))
(declare-fun |ana_MaskedValueIsZero(%B, ((1 << (width(C2) - countLeadingZeros(((C2 - 1) ^ C2)))) - 1))| () (_ BitVec 1))
(assert
 (let (($x75422 (and (distinct (bvand (bvadd (bvand %A C1) %B) C2) (bvand (bvadd %A %B) C2)) true)))
 (let (($x64669 (= |ana_MaskedValueIsZero(%B, ((1 << (width(C2) - countLeadingZeros(((C2 - 1) ^ C2)))) - 1))| (_ bv1 1))))
 (let ((?x22996 (bvsub C2 (_ bv1 56))))
 (let ((?x74298 (bvor ?x22996 C2)))
 (let (($x77806 (and (and (distinct ?x74298 (_ bv0 56)) true) (= (bvand (bvadd ?x74298 (_ bv1 56)) ?x74298) (_ bv0 56)) $x64669)))
 (let (($x74546 (or (= (bvand (bvadd C2 (_ bv1 56)) (bvsub (bvadd C2 (_ bv1 56)) (_ bv1 56))) (_ bv0 56)) $x77806)))
 (let ((?x54967 (bvand C1 C2)))
 (let (($x76175 (= ?x54967 C2)))
 (let ((?x79750 (ite (= ((_ extract 1 1) (bvxor ?x22996 C2)) (_ bv1 1)) (_ bv54 56) (ite (= ((_ extract 0 0) (bvxor ?x22996 C2)) (_ bv1 1)) (_ bv55 56) (_ bv56 56)))))
 (let ((?x68274 (ite (= ((_ extract 3 3) (bvxor ?x22996 C2)) (_ bv1 1)) (_ bv52 56) (ite (= ((_ extract 2 2) (bvxor ?x22996 C2)) (_ bv1 1)) (_ bv53 56) ?x79750))))
 (let ((?x76206 (ite (= ((_ extract 5 5) (bvxor ?x22996 C2)) (_ bv1 1)) (_ bv50 56) (ite (= ((_ extract 4 4) (bvxor ?x22996 C2)) (_ bv1 1)) (_ bv51 56) ?x68274))))
 (let ((?x73481 (ite (= ((_ extract 7 7) (bvxor ?x22996 C2)) (_ bv1 1)) (_ bv48 56) (ite (= ((_ extract 6 6) (bvxor ?x22996 C2)) (_ bv1 1)) (_ bv49 56) ?x76206))))
 (let ((?x79056 (ite (= ((_ extract 9 9) (bvxor ?x22996 C2)) (_ bv1 1)) (_ bv46 56) (ite (= ((_ extract 8 8) (bvxor ?x22996 C2)) (_ bv1 1)) (_ bv47 56) ?x73481))))
 (let ((?x68832 (ite (= ((_ extract 11 11) (bvxor ?x22996 C2)) (_ bv1 1)) (_ bv44 56) (ite (= ((_ extract 10 10) (bvxor ?x22996 C2)) (_ bv1 1)) (_ bv45 56) ?x79056))))
 (let ((?x78694 (ite (= ((_ extract 13 13) (bvxor ?x22996 C2)) (_ bv1 1)) (_ bv42 56) (ite (= ((_ extract 12 12) (bvxor ?x22996 C2)) (_ bv1 1)) (_ bv43 56) ?x68832))))
 (let ((?x78898 (ite (= ((_ extract 15 15) (bvxor ?x22996 C2)) (_ bv1 1)) (_ bv40 56) (ite (= ((_ extract 14 14) (bvxor ?x22996 C2)) (_ bv1 1)) (_ bv41 56) ?x78694))))
 (let ((?x76204 (ite (= ((_ extract 17 17) (bvxor ?x22996 C2)) (_ bv1 1)) (_ bv38 56) (ite (= ((_ extract 16 16) (bvxor ?x22996 C2)) (_ bv1 1)) (_ bv39 56) ?x78898))))
 (let ((?x72395 (ite (= ((_ extract 19 19) (bvxor ?x22996 C2)) (_ bv1 1)) (_ bv36 56) (ite (= ((_ extract 18 18) (bvxor ?x22996 C2)) (_ bv1 1)) (_ bv37 56) ?x76204))))
 (let ((?x76586 (ite (= ((_ extract 21 21) (bvxor ?x22996 C2)) (_ bv1 1)) (_ bv34 56) (ite (= ((_ extract 20 20) (bvxor ?x22996 C2)) (_ bv1 1)) (_ bv35 56) ?x72395))))
 (let ((?x78912 (ite (= ((_ extract 23 23) (bvxor ?x22996 C2)) (_ bv1 1)) (_ bv32 56) (ite (= ((_ extract 22 22) (bvxor ?x22996 C2)) (_ bv1 1)) (_ bv33 56) ?x76586))))
 (let ((?x76764 (ite (= ((_ extract 25 25) (bvxor ?x22996 C2)) (_ bv1 1)) (_ bv30 56) (ite (= ((_ extract 24 24) (bvxor ?x22996 C2)) (_ bv1 1)) (_ bv31 56) ?x78912))))
 (let ((?x78700 (ite (= ((_ extract 27 27) (bvxor ?x22996 C2)) (_ bv1 1)) (_ bv28 56) (ite (= ((_ extract 26 26) (bvxor ?x22996 C2)) (_ bv1 1)) (_ bv29 56) ?x76764))))
 (let ((?x75934 (ite (= ((_ extract 29 29) (bvxor ?x22996 C2)) (_ bv1 1)) (_ bv26 56) (ite (= ((_ extract 28 28) (bvxor ?x22996 C2)) (_ bv1 1)) (_ bv27 56) ?x78700))))
 (let ((?x79462 (ite (= ((_ extract 31 31) (bvxor ?x22996 C2)) (_ bv1 1)) (_ bv24 56) (ite (= ((_ extract 30 30) (bvxor ?x22996 C2)) (_ bv1 1)) (_ bv25 56) ?x75934))))
 (let ((?x75658 (ite (= ((_ extract 33 33) (bvxor ?x22996 C2)) (_ bv1 1)) (_ bv22 56) (ite (= ((_ extract 32 32) (bvxor ?x22996 C2)) (_ bv1 1)) (_ bv23 56) ?x79462))))
 (let ((?x77857 (ite (= ((_ extract 35 35) (bvxor ?x22996 C2)) (_ bv1 1)) (_ bv20 56) (ite (= ((_ extract 34 34) (bvxor ?x22996 C2)) (_ bv1 1)) (_ bv21 56) ?x75658))))
 (let ((?x75178 (ite (= ((_ extract 37 37) (bvxor ?x22996 C2)) (_ bv1 1)) (_ bv18 56) (ite (= ((_ extract 36 36) (bvxor ?x22996 C2)) (_ bv1 1)) (_ bv19 56) ?x77857))))
 (let ((?x77464 (ite (= ((_ extract 39 39) (bvxor ?x22996 C2)) (_ bv1 1)) (_ bv16 56) (ite (= ((_ extract 38 38) (bvxor ?x22996 C2)) (_ bv1 1)) (_ bv17 56) ?x75178))))
 (let ((?x77241 (ite (= ((_ extract 41 41) (bvxor ?x22996 C2)) (_ bv1 1)) (_ bv14 56) (ite (= ((_ extract 40 40) (bvxor ?x22996 C2)) (_ bv1 1)) (_ bv15 56) ?x77464))))
 (let ((?x69577 (ite (= ((_ extract 43 43) (bvxor ?x22996 C2)) (_ bv1 1)) (_ bv12 56) (ite (= ((_ extract 42 42) (bvxor ?x22996 C2)) (_ bv1 1)) (_ bv13 56) ?x77241))))
 (let ((?x70935 (ite (= ((_ extract 45 45) (bvxor ?x22996 C2)) (_ bv1 1)) (_ bv10 56) (ite (= ((_ extract 44 44) (bvxor ?x22996 C2)) (_ bv1 1)) (_ bv11 56) ?x69577))))
 (let ((?x70749 (ite (= ((_ extract 47 47) (bvxor ?x22996 C2)) (_ bv1 1)) (_ bv8 56) (ite (= ((_ extract 46 46) (bvxor ?x22996 C2)) (_ bv1 1)) (_ bv9 56) ?x70935))))
 (let ((?x78194 (ite (= ((_ extract 49 49) (bvxor ?x22996 C2)) (_ bv1 1)) (_ bv6 56) (ite (= ((_ extract 48 48) (bvxor ?x22996 C2)) (_ bv1 1)) (_ bv7 56) ?x70749))))
 (let ((?x78874 (ite (= ((_ extract 51 51) (bvxor ?x22996 C2)) (_ bv1 1)) (_ bv4 56) (ite (= ((_ extract 50 50) (bvxor ?x22996 C2)) (_ bv1 1)) (_ bv5 56) ?x78194))))
 (let ((?x78772 (ite (= ((_ extract 53 53) (bvxor ?x22996 C2)) (_ bv1 1)) (_ bv2 56) (ite (= ((_ extract 52 52) (bvxor ?x22996 C2)) (_ bv1 1)) (_ bv3 56) ?x78874))))
 (let ((?x72771 (ite (= ((_ extract 55 55) (bvxor ?x22996 C2)) (_ bv1 1)) (_ bv0 56) (ite (= ((_ extract 54 54) (bvxor ?x22996 C2)) (_ bv1 1)) (_ bv1 56) ?x78772))))
 (let (($x78249 (=> $x64669 (= (bvand %B (bvsub (bvshl (_ bv1 56) (bvsub (_ bv56 56) ?x72771)) (_ bv1 56))) (_ bv0 56)))))
 (and $x78249 $x76175 $x74546 $x75422)))))))))))))))))))))))))))))))))))))))
(check-sat)
