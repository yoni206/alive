(set-info :status unknown)
(declare-fun %Y () (_ BitVec 11))
(declare-fun C2 () (_ BitVec 11))
(declare-fun C1 () (_ BitVec 50))
(declare-fun %X () (_ BitVec 50))
(assert
 (let ((?x6236 (ite (and (distinct ((_ extract 2 2) C2) (_ bv0 1)) true) (_ bv2 50) (ite (and (distinct ((_ extract 1 1) C2) (_ bv0 1)) true) (_ bv1 50) (_ bv0 50)))))
 (let ((?x2846 (ite (and (distinct ((_ extract 5 5) C2) (_ bv0 1)) true) (_ bv5 50) (ite (and (distinct ((_ extract 4 4) C2) (_ bv0 1)) true) (_ bv4 50) (_ bv3 50)))))
 (let ((?x3902 (ite (and (distinct ((_ extract 8 8) C2) (_ bv0 1)) true) (_ bv8 50) (ite (and (distinct ((_ extract 7 7) C2) (_ bv0 1)) true) (_ bv7 50) (_ bv6 50)))))
 (let ((?x1374 (ite (and (distinct ((_ extract 10 9) C2) (_ bv0 2)) true) (ite (and (distinct ((_ extract 10 10) C2) (_ bv0 1)) true) (_ bv10 50) (_ bv9 50)) ?x3902)))
 (let ((?x1865 (ite (and (distinct ((_ extract 10 6) C2) (_ bv0 5)) true) ?x1374 (ite (and (distinct ((_ extract 5 3) C2) (_ bv0 3)) true) ?x2846 ?x6236))))
 (let ((?x6260 (ite (and (distinct ((_ extract 3 2) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 3 3) C1) (_ bv0 1)) true) (_ bv3 50) (_ bv2 50)) (ite (and (distinct ((_ extract 1 1) C1) (_ bv0 1)) true) (_ bv1 50) (_ bv0 50)))))
 (let ((?x4245 (ite (and (distinct ((_ extract 6 6) C1) (_ bv0 1)) true) (_ bv6 50) (ite (and (distinct ((_ extract 5 5) C1) (_ bv0 1)) true) (_ bv5 50) (_ bv4 50)))))
 (let ((?x4632 (ite (and (distinct ((_ extract 9 9) C1) (_ bv0 1)) true) (_ bv9 50) (ite (and (distinct ((_ extract 8 8) C1) (_ bv0 1)) true) (_ bv8 50) (_ bv7 50)))))
 (let ((?x3339 (ite (and (distinct ((_ extract 12 12) C1) (_ bv0 1)) true) (_ bv12 50) (ite (and (distinct ((_ extract 11 11) C1) (_ bv0 1)) true) (_ bv11 50) (_ bv10 50)))))
 (let ((?x2216 (ite (and (distinct ((_ extract 12 7) C1) (_ bv0 6)) true) (ite (and (distinct ((_ extract 12 10) C1) (_ bv0 3)) true) ?x3339 ?x4632) (ite (and (distinct ((_ extract 6 4) C1) (_ bv0 3)) true) ?x4245 ?x6260))))
 (let ((?x5792 (ite (and (distinct ((_ extract 15 15) C1) (_ bv0 1)) true) (_ bv15 50) (ite (and (distinct ((_ extract 14 14) C1) (_ bv0 1)) true) (_ bv14 50) (_ bv13 50)))))
 (let ((?x4145 (ite (and (distinct ((_ extract 18 18) C1) (_ bv0 1)) true) (_ bv18 50) (ite (and (distinct ((_ extract 17 17) C1) (_ bv0 1)) true) (_ bv17 50) (_ bv16 50)))))
 (let ((?x1901 (ite (and (distinct ((_ extract 21 21) C1) (_ bv0 1)) true) (_ bv21 50) (ite (and (distinct ((_ extract 20 20) C1) (_ bv0 1)) true) (_ bv20 50) (_ bv19 50)))))
 (let ((?x2961 (ite (and (distinct ((_ extract 24 24) C1) (_ bv0 1)) true) (_ bv24 50) (ite (and (distinct ((_ extract 23 23) C1) (_ bv0 1)) true) (_ bv23 50) (_ bv22 50)))))
 (let ((?x4085 (ite (and (distinct ((_ extract 24 19) C1) (_ bv0 6)) true) (ite (and (distinct ((_ extract 24 22) C1) (_ bv0 3)) true) ?x2961 ?x1901) (ite (and (distinct ((_ extract 18 16) C1) (_ bv0 3)) true) ?x4145 ?x5792))))
 (let ((?x2426 (ite (and (distinct ((_ extract 28 27) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 28 28) C1) (_ bv0 1)) true) (_ bv28 50) (_ bv27 50)) (ite (and (distinct ((_ extract 26 26) C1) (_ bv0 1)) true) (_ bv26 50) (_ bv25 50)))))
 (let ((?x1347 (ite (and (distinct ((_ extract 31 31) C1) (_ bv0 1)) true) (_ bv31 50) (ite (and (distinct ((_ extract 30 30) C1) (_ bv0 1)) true) (_ bv30 50) (_ bv29 50)))))
 (let ((?x5343 (ite (and (distinct ((_ extract 34 34) C1) (_ bv0 1)) true) (_ bv34 50) (ite (and (distinct ((_ extract 33 33) C1) (_ bv0 1)) true) (_ bv33 50) (_ bv32 50)))))
 (let ((?x3862 (ite (and (distinct ((_ extract 37 37) C1) (_ bv0 1)) true) (_ bv37 50) (ite (and (distinct ((_ extract 36 36) C1) (_ bv0 1)) true) (_ bv36 50) (_ bv35 50)))))
 (let ((?x3621 (ite (and (distinct ((_ extract 37 32) C1) (_ bv0 6)) true) (ite (and (distinct ((_ extract 37 35) C1) (_ bv0 3)) true) ?x3862 ?x5343) (ite (and (distinct ((_ extract 31 29) C1) (_ bv0 3)) true) ?x1347 ?x2426))))
 (let ((?x4570 (ite (and (distinct ((_ extract 40 40) C1) (_ bv0 1)) true) (_ bv40 50) (ite (and (distinct ((_ extract 39 39) C1) (_ bv0 1)) true) (_ bv39 50) (_ bv38 50)))))
 (let ((?x4599 (ite (and (distinct ((_ extract 43 43) C1) (_ bv0 1)) true) (_ bv43 50) (ite (and (distinct ((_ extract 42 42) C1) (_ bv0 1)) true) (_ bv42 50) (_ bv41 50)))))
 (let ((?x4270 (ite (and (distinct ((_ extract 46 46) C1) (_ bv0 1)) true) (_ bv46 50) (ite (and (distinct ((_ extract 45 45) C1) (_ bv0 1)) true) (_ bv45 50) (_ bv44 50)))))
 (let ((?x6054 (ite (and (distinct ((_ extract 49 49) C1) (_ bv0 1)) true) (_ bv49 50) (ite (and (distinct ((_ extract 48 48) C1) (_ bv0 1)) true) (_ bv48 50) (_ bv47 50)))))
 (let ((?x3391 (ite (and (distinct ((_ extract 49 44) C1) (_ bv0 6)) true) (ite (and (distinct ((_ extract 49 47) C1) (_ bv0 3)) true) ?x6054 ?x4270) (ite (and (distinct ((_ extract 43 41) C1) (_ bv0 3)) true) ?x4599 ?x4570))))
 (let ((?x4100 (ite (and (distinct ((_ extract 49 25) C1) (_ bv0 25)) true) (ite (and (distinct ((_ extract 49 38) C1) (_ bv0 12)) true) ?x3391 ?x3621) (ite (and (distinct ((_ extract 24 13) C1) (_ bv0 12)) true) ?x4085 ?x2216))))
 (let ((?x6163 (bvsub ?x4100 ?x1865)))
 (let ((?x6632 (bvand %X C1)))
 (let ((?x5666 (bvor %Y C2)))
 (let (($x3775 (and (distinct (ite (= (ite (and (distinct ?x6632 (_ bv0 50)) true) (_ bv1 1) (_ bv0 1)) (_ bv1 1)) %Y ?x5666) (bvor (bvxor ((_ extract 10 0) (bvlshr ?x6632 ?x6163)) C2) %Y)) true)))
 (let ((?x6712 (ite (and (distinct ((_ extract 3 2) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 3 3) C1) (_ bv0 1)) true) (_ bv3 32) (_ bv2 32)) (ite (and (distinct ((_ extract 1 1) C1) (_ bv0 1)) true) (_ bv1 32) (_ bv0 32)))))
 (let ((?x5465 (ite (and (distinct ((_ extract 6 6) C1) (_ bv0 1)) true) (_ bv6 32) (ite (and (distinct ((_ extract 5 5) C1) (_ bv0 1)) true) (_ bv5 32) (_ bv4 32)))))
 (let ((?x6628 (ite (and (distinct ((_ extract 9 9) C1) (_ bv0 1)) true) (_ bv9 32) (ite (and (distinct ((_ extract 8 8) C1) (_ bv0 1)) true) (_ bv8 32) (_ bv7 32)))))
 (let ((?x6151 (ite (and (distinct ((_ extract 12 12) C1) (_ bv0 1)) true) (_ bv12 32) (ite (and (distinct ((_ extract 11 11) C1) (_ bv0 1)) true) (_ bv11 32) (_ bv10 32)))))
 (let ((?x3519 (ite (and (distinct ((_ extract 12 7) C1) (_ bv0 6)) true) (ite (and (distinct ((_ extract 12 10) C1) (_ bv0 3)) true) ?x6151 ?x6628) (ite (and (distinct ((_ extract 6 4) C1) (_ bv0 3)) true) ?x5465 ?x6712))))
 (let ((?x6252 (ite (and (distinct ((_ extract 15 15) C1) (_ bv0 1)) true) (_ bv15 32) (ite (and (distinct ((_ extract 14 14) C1) (_ bv0 1)) true) (_ bv14 32) (_ bv13 32)))))
 (let ((?x5194 (ite (and (distinct ((_ extract 18 18) C1) (_ bv0 1)) true) (_ bv18 32) (ite (and (distinct ((_ extract 17 17) C1) (_ bv0 1)) true) (_ bv17 32) (_ bv16 32)))))
 (let ((?x6060 (ite (and (distinct ((_ extract 21 21) C1) (_ bv0 1)) true) (_ bv21 32) (ite (and (distinct ((_ extract 20 20) C1) (_ bv0 1)) true) (_ bv20 32) (_ bv19 32)))))
 (let ((?x4991 (ite (and (distinct ((_ extract 24 24) C1) (_ bv0 1)) true) (_ bv24 32) (ite (and (distinct ((_ extract 23 23) C1) (_ bv0 1)) true) (_ bv23 32) (_ bv22 32)))))
 (let ((?x2803 (ite (and (distinct ((_ extract 24 19) C1) (_ bv0 6)) true) (ite (and (distinct ((_ extract 24 22) C1) (_ bv0 3)) true) ?x4991 ?x6060) (ite (and (distinct ((_ extract 18 16) C1) (_ bv0 3)) true) ?x5194 ?x6252))))
 (let ((?x4156 (ite (and (distinct ((_ extract 28 27) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 28 28) C1) (_ bv0 1)) true) (_ bv28 32) (_ bv27 32)) (ite (and (distinct ((_ extract 26 26) C1) (_ bv0 1)) true) (_ bv26 32) (_ bv25 32)))))
 (let ((?x4014 (ite (and (distinct ((_ extract 31 31) C1) (_ bv0 1)) true) (_ bv31 32) (ite (and (distinct ((_ extract 30 30) C1) (_ bv0 1)) true) (_ bv30 32) (_ bv29 32)))))
 (let ((?x3201 (ite (and (distinct ((_ extract 34 34) C1) (_ bv0 1)) true) (_ bv34 32) (ite (and (distinct ((_ extract 33 33) C1) (_ bv0 1)) true) (_ bv33 32) (_ bv32 32)))))
 (let ((?x2870 (ite (and (distinct ((_ extract 37 37) C1) (_ bv0 1)) true) (_ bv37 32) (ite (and (distinct ((_ extract 36 36) C1) (_ bv0 1)) true) (_ bv36 32) (_ bv35 32)))))
 (let ((?x4648 (ite (and (distinct ((_ extract 37 32) C1) (_ bv0 6)) true) (ite (and (distinct ((_ extract 37 35) C1) (_ bv0 3)) true) ?x2870 ?x3201) (ite (and (distinct ((_ extract 31 29) C1) (_ bv0 3)) true) ?x4014 ?x4156))))
 (let ((?x2718 (ite (and (distinct ((_ extract 40 40) C1) (_ bv0 1)) true) (_ bv40 32) (ite (and (distinct ((_ extract 39 39) C1) (_ bv0 1)) true) (_ bv39 32) (_ bv38 32)))))
 (let ((?x1429 (ite (and (distinct ((_ extract 43 43) C1) (_ bv0 1)) true) (_ bv43 32) (ite (and (distinct ((_ extract 42 42) C1) (_ bv0 1)) true) (_ bv42 32) (_ bv41 32)))))
 (let ((?x1687 (ite (and (distinct ((_ extract 46 46) C1) (_ bv0 1)) true) (_ bv46 32) (ite (and (distinct ((_ extract 45 45) C1) (_ bv0 1)) true) (_ bv45 32) (_ bv44 32)))))
 (let ((?x3085 (ite (and (distinct ((_ extract 49 49) C1) (_ bv0 1)) true) (_ bv49 32) (ite (and (distinct ((_ extract 48 48) C1) (_ bv0 1)) true) (_ bv48 32) (_ bv47 32)))))
 (let ((?x2131 (ite (and (distinct ((_ extract 49 44) C1) (_ bv0 6)) true) (ite (and (distinct ((_ extract 49 47) C1) (_ bv0 3)) true) ?x3085 ?x1687) (ite (and (distinct ((_ extract 43 41) C1) (_ bv0 3)) true) ?x1429 ?x2718))))
 (let ((?x6247 (ite (and (distinct ((_ extract 49 25) C1) (_ bv0 25)) true) (ite (and (distinct ((_ extract 49 38) C1) (_ bv0 12)) true) ?x2131 ?x4648) (ite (and (distinct ((_ extract 24 13) C1) (_ bv0 12)) true) ?x2803 ?x3519))))
 (let ((?x4513 (ite (and (distinct ((_ extract 2 2) C2) (_ bv0 1)) true) (_ bv2 32) (ite (and (distinct ((_ extract 1 1) C2) (_ bv0 1)) true) (_ bv1 32) (_ bv0 32)))))
 (let ((?x2533 (ite (and (distinct ((_ extract 5 5) C2) (_ bv0 1)) true) (_ bv5 32) (ite (and (distinct ((_ extract 4 4) C2) (_ bv0 1)) true) (_ bv4 32) (_ bv3 32)))))
 (let ((?x3629 (ite (and (distinct ((_ extract 8 8) C2) (_ bv0 1)) true) (_ bv8 32) (ite (and (distinct ((_ extract 7 7) C2) (_ bv0 1)) true) (_ bv7 32) (_ bv6 32)))))
 (let ((?x2373 (ite (and (distinct ((_ extract 10 9) C2) (_ bv0 2)) true) (ite (and (distinct ((_ extract 10 10) C2) (_ bv0 1)) true) (_ bv10 32) (_ bv9 32)) ?x3629)))
 (let ((?x3891 (ite (and (distinct ((_ extract 10 6) C2) (_ bv0 5)) true) ?x2373 (ite (and (distinct ((_ extract 5 3) C2) (_ bv0 3)) true) ?x2533 ?x4513))))
 (and (and (and (distinct C1 (_ bv0 50)) true) (= (bvand C1 (bvsub C1 (_ bv1 50))) (_ bv0 50))) (and (and (distinct C2 (_ bv0 11)) true) (= (bvand C2 (bvsub C2 (_ bv1 11))) (_ bv0 11))) (bvslt ?x3891 ?x6247) $x3775))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
