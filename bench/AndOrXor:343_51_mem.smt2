(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun mem0 () (_ BitVec 8))
(declare-fun |ana_MaskedValueIsZero(%B, ((1 << (width(C2) - countLeadingZeros(((C2 - 1) ^ C2)))) - 1))| () (_ BitVec 1))
(declare-fun C2 () (_ BitVec 53))
(declare-fun C1 () (_ BitVec 53))
(declare-fun %B () (_ BitVec 53))
(assert
 (let (($x817 (and (distinct mem0 mem0) true)))
 (let (($x64669 (= |ana_MaskedValueIsZero(%B, ((1 << (width(C2) - countLeadingZeros(((C2 - 1) ^ C2)))) - 1))| (_ bv1 1))))
 (let ((?x22467 (bvsub C2 (_ bv1 53))))
 (let ((?x74453 (bvor ?x22467 C2)))
 (let (($x76790 (and (and (distinct ?x74453 (_ bv0 53)) true) (= (bvand (bvadd ?x74453 (_ bv1 53)) ?x74453) (_ bv0 53)) $x64669)))
 (let (($x74942 (or (= (bvand (bvadd C2 (_ bv1 53)) (bvsub (bvadd C2 (_ bv1 53)) (_ bv1 53))) (_ bv0 53)) $x76790)))
 (let ((?x54805 (bvand C1 C2)))
 (let (($x78461 (= ?x54805 C2)))
 (let ((?x70112 (ite (= ((_ extract 1 1) (bvxor ?x22467 C2)) (_ bv1 1)) (_ bv51 53) (ite (= ((_ extract 0 0) (bvxor ?x22467 C2)) (_ bv1 1)) (_ bv52 53) (_ bv53 53)))))
 (let ((?x76154 (ite (= ((_ extract 3 3) (bvxor ?x22467 C2)) (_ bv1 1)) (_ bv49 53) (ite (= ((_ extract 2 2) (bvxor ?x22467 C2)) (_ bv1 1)) (_ bv50 53) ?x70112))))
 (let ((?x72078 (ite (= ((_ extract 5 5) (bvxor ?x22467 C2)) (_ bv1 1)) (_ bv47 53) (ite (= ((_ extract 4 4) (bvxor ?x22467 C2)) (_ bv1 1)) (_ bv48 53) ?x76154))))
 (let ((?x71874 (ite (= ((_ extract 7 7) (bvxor ?x22467 C2)) (_ bv1 1)) (_ bv45 53) (ite (= ((_ extract 6 6) (bvxor ?x22467 C2)) (_ bv1 1)) (_ bv46 53) ?x72078))))
 (let ((?x72773 (ite (= ((_ extract 9 9) (bvxor ?x22467 C2)) (_ bv1 1)) (_ bv43 53) (ite (= ((_ extract 8 8) (bvxor ?x22467 C2)) (_ bv1 1)) (_ bv44 53) ?x71874))))
 (let ((?x77234 (ite (= ((_ extract 11 11) (bvxor ?x22467 C2)) (_ bv1 1)) (_ bv41 53) (ite (= ((_ extract 10 10) (bvxor ?x22467 C2)) (_ bv1 1)) (_ bv42 53) ?x72773))))
 (let ((?x73957 (ite (= ((_ extract 13 13) (bvxor ?x22467 C2)) (_ bv1 1)) (_ bv39 53) (ite (= ((_ extract 12 12) (bvxor ?x22467 C2)) (_ bv1 1)) (_ bv40 53) ?x77234))))
 (let ((?x74360 (ite (= ((_ extract 15 15) (bvxor ?x22467 C2)) (_ bv1 1)) (_ bv37 53) (ite (= ((_ extract 14 14) (bvxor ?x22467 C2)) (_ bv1 1)) (_ bv38 53) ?x73957))))
 (let ((?x75966 (ite (= ((_ extract 17 17) (bvxor ?x22467 C2)) (_ bv1 1)) (_ bv35 53) (ite (= ((_ extract 16 16) (bvxor ?x22467 C2)) (_ bv1 1)) (_ bv36 53) ?x74360))))
 (let ((?x72413 (ite (= ((_ extract 19 19) (bvxor ?x22467 C2)) (_ bv1 1)) (_ bv33 53) (ite (= ((_ extract 18 18) (bvxor ?x22467 C2)) (_ bv1 1)) (_ bv34 53) ?x75966))))
 (let ((?x75742 (ite (= ((_ extract 21 21) (bvxor ?x22467 C2)) (_ bv1 1)) (_ bv31 53) (ite (= ((_ extract 20 20) (bvxor ?x22467 C2)) (_ bv1 1)) (_ bv32 53) ?x72413))))
 (let ((?x76041 (ite (= ((_ extract 23 23) (bvxor ?x22467 C2)) (_ bv1 1)) (_ bv29 53) (ite (= ((_ extract 22 22) (bvxor ?x22467 C2)) (_ bv1 1)) (_ bv30 53) ?x75742))))
 (let ((?x72112 (ite (= ((_ extract 25 25) (bvxor ?x22467 C2)) (_ bv1 1)) (_ bv27 53) (ite (= ((_ extract 24 24) (bvxor ?x22467 C2)) (_ bv1 1)) (_ bv28 53) ?x76041))))
 (let ((?x70201 (ite (= ((_ extract 27 27) (bvxor ?x22467 C2)) (_ bv1 1)) (_ bv25 53) (ite (= ((_ extract 26 26) (bvxor ?x22467 C2)) (_ bv1 1)) (_ bv26 53) ?x72112))))
 (let ((?x67552 (ite (= ((_ extract 29 29) (bvxor ?x22467 C2)) (_ bv1 1)) (_ bv23 53) (ite (= ((_ extract 28 28) (bvxor ?x22467 C2)) (_ bv1 1)) (_ bv24 53) ?x70201))))
 (let ((?x78594 (ite (= ((_ extract 31 31) (bvxor ?x22467 C2)) (_ bv1 1)) (_ bv21 53) (ite (= ((_ extract 30 30) (bvxor ?x22467 C2)) (_ bv1 1)) (_ bv22 53) ?x67552))))
 (let ((?x77871 (ite (= ((_ extract 33 33) (bvxor ?x22467 C2)) (_ bv1 1)) (_ bv19 53) (ite (= ((_ extract 32 32) (bvxor ?x22467 C2)) (_ bv1 1)) (_ bv20 53) ?x78594))))
 (let ((?x74258 (ite (= ((_ extract 35 35) (bvxor ?x22467 C2)) (_ bv1 1)) (_ bv17 53) (ite (= ((_ extract 34 34) (bvxor ?x22467 C2)) (_ bv1 1)) (_ bv18 53) ?x77871))))
 (let ((?x69421 (ite (= ((_ extract 37 37) (bvxor ?x22467 C2)) (_ bv1 1)) (_ bv15 53) (ite (= ((_ extract 36 36) (bvxor ?x22467 C2)) (_ bv1 1)) (_ bv16 53) ?x74258))))
 (let ((?x68994 (ite (= ((_ extract 39 39) (bvxor ?x22467 C2)) (_ bv1 1)) (_ bv13 53) (ite (= ((_ extract 38 38) (bvxor ?x22467 C2)) (_ bv1 1)) (_ bv14 53) ?x69421))))
 (let ((?x77324 (ite (= ((_ extract 41 41) (bvxor ?x22467 C2)) (_ bv1 1)) (_ bv11 53) (ite (= ((_ extract 40 40) (bvxor ?x22467 C2)) (_ bv1 1)) (_ bv12 53) ?x68994))))
 (let ((?x75790 (ite (= ((_ extract 43 43) (bvxor ?x22467 C2)) (_ bv1 1)) (_ bv9 53) (ite (= ((_ extract 42 42) (bvxor ?x22467 C2)) (_ bv1 1)) (_ bv10 53) ?x77324))))
 (let ((?x77406 (ite (= ((_ extract 45 45) (bvxor ?x22467 C2)) (_ bv1 1)) (_ bv7 53) (ite (= ((_ extract 44 44) (bvxor ?x22467 C2)) (_ bv1 1)) (_ bv8 53) ?x75790))))
 (let ((?x69893 (ite (= ((_ extract 47 47) (bvxor ?x22467 C2)) (_ bv1 1)) (_ bv5 53) (ite (= ((_ extract 46 46) (bvxor ?x22467 C2)) (_ bv1 1)) (_ bv6 53) ?x77406))))
 (let ((?x72093 (ite (= ((_ extract 49 49) (bvxor ?x22467 C2)) (_ bv1 1)) (_ bv3 53) (ite (= ((_ extract 48 48) (bvxor ?x22467 C2)) (_ bv1 1)) (_ bv4 53) ?x69893))))
 (let ((?x76239 (ite (= ((_ extract 51 51) (bvxor ?x22467 C2)) (_ bv1 1)) (_ bv1 53) (ite (= ((_ extract 50 50) (bvxor ?x22467 C2)) (_ bv1 1)) (_ bv2 53) ?x72093))))
 (let ((?x71417 (bvshl (_ bv1 53) (bvsub (_ bv53 53) (ite (= ((_ extract 52 52) (bvxor ?x22467 C2)) (_ bv1 1)) (_ bv0 53) ?x76239)))))
 (let (($x77517 (=> $x64669 (= (bvand %B (bvsub ?x71417 (_ bv1 53))) (_ bv0 53)))))
 (and $x77517 $x78461 $x74942 $x817))))))))))))))))))))))))))))))))))))))
(check-sat)
