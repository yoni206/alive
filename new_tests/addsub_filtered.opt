Name: AddSub:1040
Pre: C2 == ~C1
%Y = or %Z, C2
%X = xor %Y, C1
%LHS = add %X, 1
%r = add %LHS, %RHS
=>
%and = and %Z, C1
%r = sub %RHS, %and


Name: AddSub:1043
%Y = and %Z, C1
%X = xor %Y, C1
%LHS = add %X, 1
%r = add %LHS, %RHS
=>
%or = or %Z, ~C1
%r = sub %RHS, %or


Name: AddSub:1063
Pre: countTrailingZeros(C1) == 0 && C1 == C2+1
%Y = and %Z, C2
%LHS = xor %Y, C1
%r = add %LHS, %RHS
=>
%or = or %Z, ~C2
%r = sub %RHS, %or


Name: AddSub:1088
Pre: isSignBit(C)
%a = add %x, C
=>
%a = xor %x, C


Name: AddSub:1111
Pre: C1 == -C2 && isPowerOf2(C2) && !MaskedValueIsZero(C2, -1 << (width(C1)-(width(C1) - log2(C2) - 1)))
%LHS = xor %Y, C2
%r = add %LHS, C1
=>
%ShAmt = width(C1) - (width(C1) - log2(C2) - 1)
%shl = shl %Y, %ShAmt
%r = ashr %shl, %ShAmt


Name: AddSub:1126-1
Pre: C2 == -C1 && isPowerOf2(C1) && MaskedValueIsZero(%Y, -1 << (log2(C1) + 1))
%LHS = xor %Y, C2
%r = add %LHS, C1
=>
%ShAmt = width(C1) - log2(C1) - 1
%shl = shl %Y, %ShAmt
%r = ashr %shl, %ShAmt


Name: AddSub:1126-2
Pre: C2 == -C1 && isPowerOf2(C2) && MaskedValueIsZero(%Y, -1 << (log2(C2) + 1))
%LHS = xor %Y, C2
%r = add %LHS, C1
=>
%ShAmt = width(C2) - log2(C2) - 1
%shl = shl %Y, %ShAmt
%r = ashr %shl, %ShAmt


Name: AddSub:1131
Pre: hasOneUse(%LHS) && isPowerOf2(C2+1) && (C2 | computeKnownZeroBits(%Y)) == -1
%LHS = xor %Y, C2
%r = add %LHS, C1
=>
%r = sub C1+C2, %Y


Name: AddSub:1142
Pre: isSignBit(C1)
%b = xor %a, C1
%d = add %b, C2
=>
%d = add %a, C1^C2


Name: AddSub:1152
%r = add i1 %x, %y
=>
%r = xor %x, %y


Name: AddSub:1156
%a = add %b, %b
=>
%a = shl %b, 1


Name: AddSub:1156-2
%a = add nsw %b, %b
=>
%a = shl nsw %b, 1


Name: AddSub:1156-3
%a = add nuw %b, %b
=>
%a = shl nuw %b, 1


Name: AddSub:1164
%na = sub 0, %a
%c = add %na, %b
=>
%c = sub %b, %a


Name: AddSub:1165
%na = sub 0, %a
%nb = sub 0, %b
%c = add %na, %nb
=>
%ab = add %a, %b
%c = sub 0, %ab


Name: AddSub:1176
%nb = sub 0, %b
%c = add %a, %nb
=>
%c = sub %a, %b


Name: AddSub:1184
Pre: (computeKnownZeroBits(%x) | computeKnownZeroBits(%y)) == -1
%r = add %x, %y
=>
%r = or %x, %y


Name: AddSub:1202
%nx = xor %x, -1
%r = add %nx, C
=>
%r = sub C-1, %x


Name: AddSub:1206
Pre: hasOneUse(%xc2) && ~((C1 & -C1)-1) == ~((C1 & -C1)-1) & C2
%xc2 = and %x, C2
%r = add %xc2, C1
=>
%xc1 = add %x, C1
%r = and %xc1, C2


Name: AddSub:1251
Pre: hasOneUse(%s)
%na = sub %n, %a
%s = select %x, 0, %na
%r = add %s, %a
=>
%r = select %x, %a, %n


Name: AddSub:1255
Pre: hasOneUse(%s)
%na = sub %n, %a
%s = select %x, %na, 0
%r = add %s, %a
=>
%r = select %x, %n, %a


Name: AddSub:1295
%aab = and %a, %b
%aob = xor %a, %b
%c = add %aab, %aob
=>
%c = or %a, %b


Name: AddSub:1309
%lhs = and %a, %b
%rhs = or %a, %b
%c = add %lhs, %rhs
=>
%c = add %a, %b

Name: AddSub:1309-2
%lhs = and %a, %b
%rhs = or %a, %b
%c = add nsw %lhs, %rhs
=>
%c = add nsw %a, %b


Name: AddSub:1309-3
%lhs = and %a, %b
%rhs = or %a, %b
%c = add nuw %lhs, %rhs
=>
%c = add nuw %a, %b


Name: AddSub:1334
Pre: WillNotOverflowSignedAdd(%lhs, %rhs)
%r = add %lhs, %rhs
=>
%r = add nsw %lhs, %rhs


Name: AddSub:1338
Pre: WillNotOverflowUnsignedAdd(%lhs, %rhs)
%r = add %lhs, %rhs
=>
%r = add nuw %lhs, %rhs


; TODO: GEP stuff


Name: AddSub:1539
%na = sub 0, %a
%r = sub %x, %na
=>
%r = add %x, %a


Name: AddSub:1539-2
%r = sub %x, C
=>
%r = add %x, -C


Name: AddSub:1546
%na = sub nsw 0, %a
%r = sub nsw %x, %na
=>
%r = add nsw %x, %a


Name: AddSub:1549
Pre: C != 1 << (width(C)-1)
%r = sub nsw %x, C
=>
%r = add nsw %x, -C


Name: AddSub:1556
%r = sub i1 %x, %y
=>
%r = xor %x, %y


Name: AddSub:1560
%r = sub -1, %a
=>
%r = xor %a, -1


Name: AddSub:1564
%nx = xor %x, -1
%r = sub C, %nx
=>
%r = add %x, C+1


Name: AddSub:1574
%rhs = add %X, C2
%r = sub C, %rhs
=>
%r = sub C-C2, %X


Name: AddSub:1599
Pre: C == width(%a) - 1
%a = lshr %x, C
%r = sub 0, %a
=>
%r = ashr %x, C


Name: AddSub:1604
Pre: C == width(%a) - 1
%a = ashr %x, C
%r = sub 0, %a
=>
%r = lshr %x, C


Name: AddSub:1614
%Op1 = add %X, %Y
%r = sub %X, %Op1
=>
%r = sub 0, %Y


Name: AddSub:1619
%Op0 = sub %X, %Y
%r = sub %Op0, %X
=>
%r = sub 0, %Y


Name: AddSub:1624
%Op0 = or %A, %B
%Op1 = xor %A, %B
%r = sub %Op0, %Op1
=>
%r = and %A, %B


Name: AddSub:1633
Pre: hasOneUse(%Op0)
%Op0 = or %Y, %Op1 ; TODO: commute
%r = sub %Op0, %Op1
=>
%not = xor %Op1, -1
%r = and %not, %Y


Name: AddSub:1648
Pre: hasOneUse(%Op1)
%Op1 = sub %Y, %Z
%r = sub %X, %Op1
=>
%s = sub %Z, %Y
%r = add %X, %s


Name: AddSub:1654
Pre: hasOneUse(%Op1)
%Op1 = and %X, %Y ; TODO: commute
%r = sub %X, %Op1
=>
%not = xor %Y, -1
%r = and %X, %not


Name: AddSub:1660
Pre: hasOneUse(%Op1) && C != 1 && C != 1 << (width(C)-1)
%Op1 = sdiv i9 %X, C
%r = sub 0, %Op1
=>
%r = sdiv %X, -C


Name: AddSub:1665
Pre: hasOneUse(%Op1)
%Op1 = shl C, %Y
%r = sub 0, %Op1
=>
%r = shl -C, %Y


Name: AddSub:1665-2
Pre: hasOneUse(%Op1)
%neg = sub 0, %X
%Op1 = shl %neg, %Y
%r = sub 0, %Op1
=>
%r = shl %X, %Y


Name: AddSub:1672
Pre: hasOneUse(%Op1)
%neg = sub 0, %B
%Op1 = mul %A, %neg ; TODO: commute
%r = sub %X, %Op1
=>
%m = mul %A, %B
%r = add %X, %m


Name: AddSub:1678
Pre: hasOneUse(%Op1)
%Op1 = mul %A, C ; TODO: commute
%r = sub %X, %Op1
=>
%m = mul %A, -C
%r = add %X, %m


Name: AddSub:1693
Pre: WillNotOverflowSignedSub(%A, %B)
%r = sub %A, %B
=>
%r = sub nsw %A, %B


Name: AddSub:1697
Pre: WillNotOverflowUnsignedSub(%A, %B)
%r = sub %A, %B
=>
%r = sub nuw %A, %B
