Name: InstCombineShift: 46
Pre: isPowerOf2(C)
%Op1 = srem i31 %A, C
%r = shl %Op0, %Op1
=>
%a = and %A, C-1
%r = shl %Op0, %a
Name: InstCombineShift: 46-2
Pre: isPowerOf2(C)
%Op1 = srem i29 %A, C
%r = ashr %Op0, %Op1
=>
%a = and %A, C-1
%r = ashr %Op0, %a
Name: InstCombineShift: 46-3
Pre: isPowerOf2(C)
%Op1 = srem i27 %A, C
%r = lshr %Op0, %Op1
=>
%a = and %A, C-1
%r = lshr %Op0, %a
Name: InstCombineShift: 239
%Op0 = shl %X, C
%r = lshr %Op0, C
=>
%r = and %X, -1 u>> C
Name: InstCombineShift: 252
Pre: C1 > C2 && MaskedValueIsZero(%X, (-1 u>> (width(C2)-C2)) << (width(C1)-C1))
%Op0 = shl i27 %X, C1
%r = lshr %Op0, C2
=>
%r = shl %X, C1-C2
Name: InstCombineShift: 279
%Op0 = lshr %X, C
%r = shl %Op0, C
=>
%r = and %X, -1 << C
Name: InstCombineShift: 292
Pre: C1 > C2 && MaskedValueIsZero(%X, (-1 u>> (width(C2)-C2))<<(C1-C2))
%Op0 = lshr i31 %X, C1
%r = shl %Op0, C2
=>
%r = lshr %X, C1-C2
Name: InstCombineShift: 351
%Op0 = mul i7 %X, C1
%r = shl %Op0, C2
=>
%r = mul %X, C1 << C2
Name: InstCombineShift: 422-1
%Op1 = lshr i31 %X, C
%Op0 = add %Y, %Op1
%r = shl %Op0, C
=>
%s = shl %Y, C
%a = add %s, %X
%r = and %a, -1 << C
Name: InstCombineShift: 422-2
%Op1 = ashr i31 %X, C
%Op0 = add %Y, %Op1
%r = shl %Op0, C
=>
%s = shl %Y, C
%a = add %s, %X
%r = and %a, -1 << C
Name: InstCombineShift: 440
%s = lshr %X, C
%Op1 = and %s, C2
%Op0 = xor %Y, %Op1
%r = shl %Op0, C
=>
%a = and %X, C2 << C
%y2 = shl %Y, C
%r = xor %a, %y2
Name: InstCombineShift: 458
%s = ashr i31 %X, C
%Op0 = sub %s, %Y
%r = shl %Op0, C
=>
%s2 = shl %Y, C
%a = sub %X, %s2
%r = and %a, -1<<C
Name: InstCombineShift: 476
%shr = lshr %X, C
%s = and %shr, C2
%Op0 = or %s, %Y
%r = shl %Op0, C
=>
%s2 = shl %Y, C
%a = and %X, C2<<C
%r = or %a, %s2
Name: InstCombineShift: 497a
%Op0 = xor %X, C2
%r = lshr %Op0, C
=>
%s2 = lshr %X, C
%r = xor %s2, C2 u>> C
Name: InstCombineShift: 497b
Pre: C2 u>> (width(C)-1) == 0
%Op0 = xor %X, C2
%r = ashr %Op0, C
=>
%s2 = ashr %X, C
%r = xor %s2, C2 >> C
Name: InstCombineShift: 497c
Pre: C2 u>> (width(C)-1) == 1
%Op0 = and %X, C2
%r = ashr %Op0, C
=>
%s2 = ashr %X, C
%r = and %s2, C2 >> C
Name: InstCombineShift: 497d
%Op0 = add %X, C2
%r = shl %Op0, C
=>
%s2 = shl %X, C
%r = add %s2, C2 << C
Name: InstCombineShift: 582
%Op0 = shl %X, C
%r = lshr %Op0, C
=>
%r = and %X, -1 u>> C
Name: InstCombineShift: 592a
Pre: C1 < C2
%Op0 = ashr exact %X, C1
%r = shl i33 %Op0, C2
=>
%r = shl %X, C2-C1
Name: InstCombineShift: 592b
Pre: C1 < C2
%Op0 = ashr exact %X, C1
%r = shl nsw i31 %Op0, C2
=>
%r = shl nsw %X, C2-C1
Name: InstCombineShift: 592c
Pre: C1 < C2
%Op0 = ashr exact %X, C1
%r = shl nuw %Op0, C2
=>
%r = shl nuw i27 %X, C2-C1
Name: InstCombineShift: 592d
Pre: C1 < C2
%Op0 = lshr exact %X, C1
%r = shl i33 %Op0, C2
=>
%r = shl %X, C2-C1
Name: InstCombineShift: 592e
Pre: C1 < C2
%Op0 = lshr exact %X, C1
%r = shl nsw i31 %Op0, C2
=>
%r = shl nsw %X, C2-C1
Name: InstCombineShift: 592f
Pre: C1 < C2
%Op0 = lshr exact %X, C1
%r = shl nuw %Op0, C2
=>
%r = shl nuw i27 %X, C2-C1
Name: InstCombineShift: 612a
Pre: C1 < C2
%Op0 = shl nuw %X, C1
%r =  lshr i33 %Op0, C2
=>
%r = lshr %X, C2-C1
Name: InstCombineShift: 612b
Pre: C1 < C2
%Op0 = shl nuw %X, C1
%r =  lshr exact %Op0, C2
=>
%r = lshr exact i31 %X, C2-C1
Name: InstCombineShift: 622
Pre: C1 < C2
%Op0 = shl %X, C1
%r =  lshr i33 %Op0, C2
=>
%s = lshr %X, C2-C1
%r = and %s, -1 u>> C2
Name: InstCombineShift: 628
Pre: C1 < C2
%Op0 = shl nsw %X, C1
%r = ashr i33 %Op0, C2
=>
%r = ashr %X, C2-C1
Name: InstCombineShift: 628-2
Pre: C1 < C2
%Op0 = shl nsw %X, C1
%r = ashr exact i33 %Op0, C2
=>
%r = ashr exact %X, C2-C1
Name: InstCombineShift: 646
Pre: C1 > C2
%Op0 = lshr exact %X, C1
%r = shl i33 %Op0, C2
=>
%r = lshr exact %X, C1-C2
Name: InstCombineShift: 646-2
Pre: C1 > C2
%Op0 = ashr exact %X, C1
%r = shl i33 %Op0, C2
=>
%r = ashr exact %X, C1-C2
Name: InstCombineShift: 661
Pre: C1 > C2
%Op0 = shl nuw %X, C1
%r = lshr i33 %Op0, C2
=>
%r = shl nuw %X, C1-C2
Name: InstCombineShift: 670
Pre: C1 > C2
%Op0 = shl %X, C1
%r = lshr i33 %Op0, C2
=>
%s = shl %X, C1-C2
%r = and %s, -1 u>> C2
Name: InstCombineShift: 676
Pre: C1 > C2
%Op0 = shl nsw %X, C1
%r = ashr i33 %Op0, C2
=>
%r = shl nsw %X, C1-C2
Name: InstCombineShift: 708
Pre: MaskedValueIsZero(%Op0, -1<<(width(C)-C))
%r = shl %Op0, C
=>
%r = shl nuw %Op0, C
Name: InstCombineShift: 717
Pre: ComputeNumSignBits(%Op0) > C
%r = shl %Op0, C
=>
%r = shl nsw %Op0, C
Name: InstCombineShift: 724
%Op0 = shl i31 C1, %A
%r = shl %Op0, C2
=>
%r = shl C1<<C2, %A
Name: InstCombineShift: 767
Pre: MaskedValueIsZero(%Op0, (1<<C)-1)
%r = lshr %Op0, C
=>
%r = lshr exact %Op0, C
Name: InstCombineShift: 812
Pre: MaskedValueIsZero(%Op0, (1<<C)-1)
%r = ashr %Op0, C
=>
%r = ashr exact %Op0, C
Name: InstCombineShift: 821
Pre: MaskedValueIsZero(%Op0, 1<<(width(%r)-1))
%r = ashr %Op0, %Op1
=>
%r = lshr %Op0, %Op1
