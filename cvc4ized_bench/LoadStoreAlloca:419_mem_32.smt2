
(declare-fun mem0 () (_ BitVec 8))
(declare-fun %x () (_ BitVec 33))
(declare-fun %p1 () (_ BitVec 64))
(declare-fun idx () (_ BitVec 64))
(declare-fun |ana_equivalentAddressValues(%p1, %p2)| () (_ BitVec 1))
(declare-fun %p2 () (_ BitVec 64))
(assert (let ((_let_0 (bvadd %p1 (_ bv1 64)))) (let ((_let_1 (= |ana_equivalentAddressValues(%p1, %p2)| (_ bv1 1)))) (let ((_let_2 (not (= %p1 (_ bv0 64))))) (let ((_let_3 (ite (and (= idx (bvadd _let_0 (_ bv3 64))) _let_2) ((_ extract 32 25) %x) (ite (and (= idx (bvadd _let_0 (_ bv2 64))) _let_2) ((_ extract 24 17) %x) (ite (and (= idx (bvadd _let_0 (_ bv1 64))) _let_2) ((_ extract 16 9) %x) (ite (and (= idx (bvadd _let_0 (_ bv0 64))) _let_2) ((_ extract 8 1) %x) (ite (and (= idx %p1) _let_2) (concat ((_ extract 7 1) mem0) ((_ extract 0 0) %x)) mem0))))))) (and (=> _let_1 (= %p1 %p2)) _let_1 (not (= _let_3 _let_3))))))))
(assert true)
(check-sat)