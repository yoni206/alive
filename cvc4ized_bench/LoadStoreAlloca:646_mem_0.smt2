
(declare-fun mem0 () (_ BitVec 8))
(declare-fun alloca%Ptr_2941 () (_ BitVec 16))
(declare-fun %Ptr () (_ BitVec 64))
(declare-fun idx () (_ BitVec 64))
(declare-fun %x () (_ BitVec 9))
(declare-fun u_%Ptr () (_ BitVec 8))
(assert (and (bvult %Ptr (bvadd %Ptr (_ bv1 64))) (= u_%Ptr (_ bv1 8)) (not (= %Ptr (_ bv0 64))) (forall ((alloca%Ptr_2940 (_ BitVec 16)) (alloca%Ptr_2942 (_ BitVec 16))) (let ((_let_0 (bvadd %Ptr (_ bv1 64)))) (let ((_let_1 (= idx _let_0))) (let ((_let_2 (bvadd %Ptr (_ bv0 64)))) (let ((_let_3 (= idx _let_2))) (let ((_let_4 (bvuge %Ptr %Ptr))) (let ((_let_5 (bvuge (_ bv0 64) (bvsub %Ptr %Ptr)))) (let ((_let_6 (bvult %Ptr _let_0))) (let ((_let_7 (not (= %Ptr (_ bv0 64))))) (not (= (ite _let_1 ((_ extract 15 8) alloca%Ptr_2942) (ite _let_3 ((_ extract 7 0) alloca%Ptr_2942) (ite (and _let_6 (= idx (bvadd _let_0 (_ bv0 64))) _let_7 _let_4 _let_5) ((_ extract 8 1) %x) (ite (and _let_6 (= idx %Ptr) _let_7 _let_4 _let_5) (concat ((_ extract 7 1) (ite (= %Ptr _let_0) ((_ extract 15 8) alloca%Ptr_2940) (ite (= %Ptr _let_2) ((_ extract 7 0) alloca%Ptr_2940) mem0))) ((_ extract 0 0) %x)) mem0)))) (ite _let_1 ((_ extract 15 8) alloca%Ptr_2941) (ite _let_3 ((_ extract 7 0) alloca%Ptr_2941) mem0)))))))))))) )))
(assert true)
(declare-fun g_1 () Bool)
(declare-fun ek_2 () (_ BitVec 8))
(declare-fun ek_3 () (_ BitVec 8))
(declare-fun ek_4 () (_ BitVec 8))
(declare-fun ek_5 () (_ BitVec 8))
(declare-fun termITE_6 () (_ BitVec 8))
(declare-fun termITE_7 () (_ BitVec 8))
(declare-fun termITE_8 () (_ BitVec 8))
(declare-fun termITE_9 () (_ BitVec 8))
(declare-fun termITE_10 () (_ BitVec 8))
(declare-fun termITE_11 () (_ BitVec 8))
(declare-fun termITE_12 () (_ BitVec 8))
(declare-fun termITE_13 () (_ BitVec 8))
(check-sat)