
(declare-fun C2 () (_ BitVec 11))
(declare-fun C3 () (_ BitVec 11))
(declare-fun C () (_ BitVec 2))
(declare-fun %Op () (_ BitVec 2))
(assert (let ((_let_0 (bvsub C3 C2))) (let ((_let_1 (bvand %Op C))) (let ((_let_2 (bvsub (ite (not (= ((_ extract 10 6) _let_0) (_ bv0 5))) (ite (not (= ((_ extract 10 9) _let_0) (_ bv0 2))) (ite (not (= ((_ extract 10 10) _let_0) (_ bv0 1))) (_ bv10 11) (_ bv9 11)) (ite (not (= ((_ extract 8 8) _let_0) (_ bv0 1))) (_ bv8 11) (ite (not (= ((_ extract 7 7) _let_0) (_ bv0 1))) (_ bv7 11) (_ bv6 11)))) (ite (not (= ((_ extract 5 3) _let_0) (_ bv0 3))) (ite (not (= ((_ extract 5 5) _let_0) (_ bv0 1))) (_ bv5 11) (ite (not (= ((_ extract 4 4) _let_0) (_ bv0 1))) (_ bv4 11) (_ bv3 11))) (ite (not (= ((_ extract 2 2) _let_0) (_ bv0 1))) (_ bv2 11) (ite (not (= ((_ extract 1 1) _let_0) (_ bv0 1))) (_ bv1 11) (_ bv0 11))))) (ite (not (= ((_ extract 1 1) C) (_ bv0 1))) (_ bv1 11) (_ bv0 11))))) (let ((_let_3 (bvsub (ite (not (= ((_ extract 1 1) C) (_ bv0 1))) (_ bv1 11) (_ bv0 11)) (ite (not (= ((_ extract 10 6) _let_0) (_ bv0 5))) (ite (not (= ((_ extract 10 9) _let_0) (_ bv0 2))) (ite (not (= ((_ extract 10 10) _let_0) (_ bv0 1))) (_ bv10 11) (_ bv9 11)) (ite (not (= ((_ extract 8 8) _let_0) (_ bv0 1))) (_ bv8 11) (ite (not (= ((_ extract 7 7) _let_0) (_ bv0 1))) (_ bv7 11) (_ bv6 11)))) (ite (not (= ((_ extract 5 3) _let_0) (_ bv0 3))) (ite (not (= ((_ extract 5 5) _let_0) (_ bv0 1))) (_ bv5 11) (ite (not (= ((_ extract 4 4) _let_0) (_ bv0 1))) (_ bv4 11) (_ bv3 11))) (ite (not (= ((_ extract 2 2) _let_0) (_ bv0 1))) (_ bv2 11) (ite (not (= ((_ extract 1 1) _let_0) (_ bv0 1))) (_ bv1 11) (_ bv0 11)))))))) (and (bvslt (ite (not (= ((_ extract 1 1) C) (_ bv0 1))) (_ bv1 32) (_ bv0 32)) (_ bv11 32)) (= (bvand C (bvsub C (_ bv1 2))) (_ bv0 2)) (= (bvand _let_0 (bvsub _let_0 (_ bv1 11))) (_ bv0 11)) (not (= (ite (= (ite (not (= _let_1 (_ bv0 2))) (_ bv1 1) (_ bv0 1)) (_ bv1 1)) C2 C3) (bvadd (bvxor (bvlshr (bvshl ((_ zero_extend 9) _let_1) (ite (bvsgt (_ bv0 11) _let_2) (_ bv0 11) _let_2)) (ite (bvsgt (_ bv0 11) _let_3) (_ bv0 11) _let_3)) _let_0) C2))) (not (= C (_ bv0 2))) (not (= _let_0 (_ bv0 11)))))))))
(assert true)
(check-sat)