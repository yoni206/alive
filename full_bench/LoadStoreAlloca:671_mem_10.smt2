(set-info :status unknown)
(declare-fun mem0 () (_ BitVec 8))
(declare-fun %y () (_ BitVec 12))
(declare-fun %p2 () (_ BitVec 64))
(declare-fun idx () (_ BitVec 64))
(declare-fun %x () (_ BitVec 12))
(declare-fun %p1 () (_ BitVec 64))
(declare-fun |ana_equivalentAddressValues(%p1, %p2)| () (_ BitVec 1))
(assert
 (let ((?x23767 (ite (and (and (distinct %p2 (_ bv0 64)) true) (or true true) (= idx %p2)) (concat ((_ extract 7 4) mem0) ((_ extract 3 0) %y)) mem0)))
 (let (($x14457 (or true true)))
 (let (($x11570 (and (distinct %p2 (_ bv0 64)) true)))
 (let ((?x10461 (ite (and $x11570 $x14457 (= idx (bvadd (bvadd %p2 (_ bv1 64)) (_ bv0 64)))) ((_ extract 11 4) %y) ?x23767)))
 (let ((?x284 (ite (and (and (distinct %p1 (_ bv0 64)) true) $x14457 (= idx %p1)) (concat ((_ extract 7 4) mem0) ((_ extract 3 0) %x)) mem0)))
 (let (($x17212 (and (distinct %p1 (_ bv0 64)) true)))
 (let ((?x18598 (ite (and $x17212 $x14457 (= idx (bvadd (bvadd %p1 (_ bv1 64)) (_ bv0 64)))) ((_ extract 11 4) %x) ?x284)))
 (let ((?x1172 (ite (and $x17212 $x14457 (= %p2 %p1)) (concat ((_ extract 7 4) mem0) ((_ extract 3 0) %x)) mem0)))
 (let ((?x14160 (ite (and $x17212 $x14457 (= %p2 (bvadd (bvadd %p1 (_ bv1 64)) (_ bv0 64)))) ((_ extract 11 4) %x) ?x1172)))
 (let ((?x5553 (ite (and $x17212 $x14457 $x11570 $x14457 (= idx %p2)) (concat ((_ extract 7 4) ?x14160) ((_ extract 3 0) %y)) ?x18598)))
 (let ((?x12694 (ite (and $x17212 $x14457 $x11570 $x14457 (= idx (bvadd (bvadd %p2 (_ bv1 64)) (_ bv0 64)))) ((_ extract 11 4) %y) ?x5553)))
 (let (($x4916 (= |ana_equivalentAddressValues(%p1, %p2)| (_ bv1 1))))
 (and (=> $x4916 (= %p1 %p2)) $x4916 (and (distinct ?x12694 ?x10461) true)))))))))))))))
(check-sat)
