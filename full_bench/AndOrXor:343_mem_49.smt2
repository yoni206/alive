(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun mem0 () (_ BitVec 8))
(declare-fun |ana_MaskedValueIsZero(%B, ((1 << (width(C2) - countLeadingZeros(((C2 - 1) ^ C2)))) - 1))| () (_ BitVec 1))
(declare-fun C2 () (_ BitVec 51))
(declare-fun C1 () (_ BitVec 51))
(declare-fun %B () (_ BitVec 51))
(assert
 (let (($x927 (and (distinct mem0 mem0) true)))
 (let (($x131713 (= |ana_MaskedValueIsZero(%B, ((1 << (width(C2) - countLeadingZeros(((C2 - 1) ^ C2)))) - 1))| (_ bv1 1))))
 (let ((?x27100 (bvsub C2 (_ bv1 51))))
 (let ((?x154981 (bvor ?x27100 C2)))
 (let (($x154959 (and (and (distinct ?x154981 (_ bv0 51)) true) (= (bvand (bvadd ?x154981 (_ bv1 51)) ?x154981) (_ bv0 51)) $x131713)))
 (let (($x154960 (or (= (bvand (bvadd C2 (_ bv1 51)) (bvsub (bvadd C2 (_ bv1 51)) (_ bv1 51))) (_ bv0 51)) $x154959)))
 (let ((?x131765 (bvand C1 C2)))
 (let (($x154986 (= ?x131765 C2)))
 (let ((?x154984 (ite (= ((_ extract 1 1) (bvxor ?x27100 C2)) (_ bv1 1)) (_ bv49 51) (ite (= ((_ extract 0 0) (bvxor ?x27100 C2)) (_ bv1 1)) (_ bv50 51) (_ bv51 51)))))
 (let ((?x154974 (ite (= ((_ extract 3 3) (bvxor ?x27100 C2)) (_ bv1 1)) (_ bv47 51) (ite (= ((_ extract 2 2) (bvxor ?x27100 C2)) (_ bv1 1)) (_ bv48 51) ?x154984))))
 (let ((?x154962 (ite (= ((_ extract 5 5) (bvxor ?x27100 C2)) (_ bv1 1)) (_ bv45 51) (ite (= ((_ extract 4 4) (bvxor ?x27100 C2)) (_ bv1 1)) (_ bv46 51) ?x154974))))
 (let ((?x154954 (ite (= ((_ extract 7 7) (bvxor ?x27100 C2)) (_ bv1 1)) (_ bv43 51) (ite (= ((_ extract 6 6) (bvxor ?x27100 C2)) (_ bv1 1)) (_ bv44 51) ?x154962))))
 (let ((?x154946 (ite (= ((_ extract 9 9) (bvxor ?x27100 C2)) (_ bv1 1)) (_ bv41 51) (ite (= ((_ extract 8 8) (bvxor ?x27100 C2)) (_ bv1 1)) (_ bv42 51) ?x154954))))
 (let ((?x154933 (ite (= ((_ extract 11 11) (bvxor ?x27100 C2)) (_ bv1 1)) (_ bv39 51) (ite (= ((_ extract 10 10) (bvxor ?x27100 C2)) (_ bv1 1)) (_ bv40 51) ?x154946))))
 (let ((?x154924 (ite (= ((_ extract 13 13) (bvxor ?x27100 C2)) (_ bv1 1)) (_ bv37 51) (ite (= ((_ extract 12 12) (bvxor ?x27100 C2)) (_ bv1 1)) (_ bv38 51) ?x154933))))
 (let ((?x154911 (ite (= ((_ extract 15 15) (bvxor ?x27100 C2)) (_ bv1 1)) (_ bv35 51) (ite (= ((_ extract 14 14) (bvxor ?x27100 C2)) (_ bv1 1)) (_ bv36 51) ?x154924))))
 (let ((?x154897 (ite (= ((_ extract 17 17) (bvxor ?x27100 C2)) (_ bv1 1)) (_ bv33 51) (ite (= ((_ extract 16 16) (bvxor ?x27100 C2)) (_ bv1 1)) (_ bv34 51) ?x154911))))
 (let ((?x154885 (ite (= ((_ extract 19 19) (bvxor ?x27100 C2)) (_ bv1 1)) (_ bv31 51) (ite (= ((_ extract 18 18) (bvxor ?x27100 C2)) (_ bv1 1)) (_ bv32 51) ?x154897))))
 (let ((?x154875 (ite (= ((_ extract 21 21) (bvxor ?x27100 C2)) (_ bv1 1)) (_ bv29 51) (ite (= ((_ extract 20 20) (bvxor ?x27100 C2)) (_ bv1 1)) (_ bv30 51) ?x154885))))
 (let ((?x154280 (ite (= ((_ extract 23 23) (bvxor ?x27100 C2)) (_ bv1 1)) (_ bv27 51) (ite (= ((_ extract 22 22) (bvxor ?x27100 C2)) (_ bv1 1)) (_ bv28 51) ?x154875))))
 (let ((?x153917 (ite (= ((_ extract 25 25) (bvxor ?x27100 C2)) (_ bv1 1)) (_ bv25 51) (ite (= ((_ extract 24 24) (bvxor ?x27100 C2)) (_ bv1 1)) (_ bv26 51) ?x154280))))
 (let ((?x154582 (ite (= ((_ extract 27 27) (bvxor ?x27100 C2)) (_ bv1 1)) (_ bv23 51) (ite (= ((_ extract 26 26) (bvxor ?x27100 C2)) (_ bv1 1)) (_ bv24 51) ?x153917))))
 (let ((?x154596 (ite (= ((_ extract 29 29) (bvxor ?x27100 C2)) (_ bv1 1)) (_ bv21 51) (ite (= ((_ extract 28 28) (bvxor ?x27100 C2)) (_ bv1 1)) (_ bv22 51) ?x154582))))
 (let ((?x155062 (ite (= ((_ extract 31 31) (bvxor ?x27100 C2)) (_ bv1 1)) (_ bv19 51) (ite (= ((_ extract 30 30) (bvxor ?x27100 C2)) (_ bv1 1)) (_ bv20 51) ?x154596))))
 (let ((?x155058 (ite (= ((_ extract 33 33) (bvxor ?x27100 C2)) (_ bv1 1)) (_ bv17 51) (ite (= ((_ extract 32 32) (bvxor ?x27100 C2)) (_ bv1 1)) (_ bv18 51) ?x155062))))
 (let ((?x155054 (ite (= ((_ extract 35 35) (bvxor ?x27100 C2)) (_ bv1 1)) (_ bv15 51) (ite (= ((_ extract 34 34) (bvxor ?x27100 C2)) (_ bv1 1)) (_ bv16 51) ?x155058))))
 (let ((?x155050 (ite (= ((_ extract 37 37) (bvxor ?x27100 C2)) (_ bv1 1)) (_ bv13 51) (ite (= ((_ extract 36 36) (bvxor ?x27100 C2)) (_ bv1 1)) (_ bv14 51) ?x155054))))
 (let ((?x155046 (ite (= ((_ extract 39 39) (bvxor ?x27100 C2)) (_ bv1 1)) (_ bv11 51) (ite (= ((_ extract 38 38) (bvxor ?x27100 C2)) (_ bv1 1)) (_ bv12 51) ?x155050))))
 (let ((?x155039 (ite (= ((_ extract 41 41) (bvxor ?x27100 C2)) (_ bv1 1)) (_ bv9 51) (ite (= ((_ extract 40 40) (bvxor ?x27100 C2)) (_ bv1 1)) (_ bv10 51) ?x155046))))
 (let ((?x155032 (ite (= ((_ extract 43 43) (bvxor ?x27100 C2)) (_ bv1 1)) (_ bv7 51) (ite (= ((_ extract 42 42) (bvxor ?x27100 C2)) (_ bv1 1)) (_ bv8 51) ?x155039))))
 (let ((?x155025 (ite (= ((_ extract 45 45) (bvxor ?x27100 C2)) (_ bv1 1)) (_ bv5 51) (ite (= ((_ extract 44 44) (bvxor ?x27100 C2)) (_ bv1 1)) (_ bv6 51) ?x155032))))
 (let ((?x155021 (ite (= ((_ extract 47 47) (bvxor ?x27100 C2)) (_ bv1 1)) (_ bv3 51) (ite (= ((_ extract 46 46) (bvxor ?x27100 C2)) (_ bv1 1)) (_ bv4 51) ?x155025))))
 (let ((?x155017 (ite (= ((_ extract 49 49) (bvxor ?x27100 C2)) (_ bv1 1)) (_ bv1 51) (ite (= ((_ extract 48 48) (bvxor ?x27100 C2)) (_ bv1 1)) (_ bv2 51) ?x155021))))
 (let ((?x155014 (bvshl (_ bv1 51) (bvsub (_ bv51 51) (ite (= ((_ extract 50 50) (bvxor ?x27100 C2)) (_ bv1 1)) (_ bv0 51) ?x155017)))))
 (let (($x154964 (=> $x131713 (= (bvand %B (bvsub ?x155014 (_ bv1 51))) (_ bv0 51)))))
 (and $x154964 $x154986 $x154960 $x927)))))))))))))))))))))))))))))))))))))
(check-sat)
