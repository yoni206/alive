(set-info :status unknown)
(declare-fun C2 () (_ BitVec 11))
(declare-fun C1 () (_ BitVec 51))
(assert
 (let ((?x1373 (ite (and (distinct ((_ extract 2 2) C2) (_ bv0 1)) true) (_ bv2 51) (ite (and (distinct ((_ extract 1 1) C2) (_ bv0 1)) true) (_ bv1 51) (_ bv0 51)))))
 (let ((?x2096 (ite (and (distinct ((_ extract 5 5) C2) (_ bv0 1)) true) (_ bv5 51) (ite (and (distinct ((_ extract 4 4) C2) (_ bv0 1)) true) (_ bv4 51) (_ bv3 51)))))
 (let ((?x5108 (ite (and (distinct ((_ extract 8 8) C2) (_ bv0 1)) true) (_ bv8 51) (ite (and (distinct ((_ extract 7 7) C2) (_ bv0 1)) true) (_ bv7 51) (_ bv6 51)))))
 (let ((?x1593 (ite (and (distinct ((_ extract 10 9) C2) (_ bv0 2)) true) (ite (and (distinct ((_ extract 10 10) C2) (_ bv0 1)) true) (_ bv10 51) (_ bv9 51)) ?x5108)))
 (let ((?x1982 (ite (and (distinct ((_ extract 10 6) C2) (_ bv0 5)) true) ?x1593 (ite (and (distinct ((_ extract 5 3) C2) (_ bv0 3)) true) ?x2096 ?x1373))))
 (let ((?x1241 (ite (and (distinct ((_ extract 3 2) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 3 3) C1) (_ bv0 1)) true) (_ bv3 51) (_ bv2 51)) (ite (and (distinct ((_ extract 1 1) C1) (_ bv0 1)) true) (_ bv1 51) (_ bv0 51)))))
 (let ((?x4796 (ite (and (distinct ((_ extract 6 6) C1) (_ bv0 1)) true) (_ bv6 51) (ite (and (distinct ((_ extract 5 5) C1) (_ bv0 1)) true) (_ bv5 51) (_ bv4 51)))))
 (let ((?x5569 (ite (and (distinct ((_ extract 9 9) C1) (_ bv0 1)) true) (_ bv9 51) (ite (and (distinct ((_ extract 8 8) C1) (_ bv0 1)) true) (_ bv8 51) (_ bv7 51)))))
 (let ((?x4795 (ite (and (distinct ((_ extract 12 12) C1) (_ bv0 1)) true) (_ bv12 51) (ite (and (distinct ((_ extract 11 11) C1) (_ bv0 1)) true) (_ bv11 51) (_ bv10 51)))))
 (let ((?x5030 (ite (and (distinct ((_ extract 12 7) C1) (_ bv0 6)) true) (ite (and (distinct ((_ extract 12 10) C1) (_ bv0 3)) true) ?x4795 ?x5569) (ite (and (distinct ((_ extract 6 4) C1) (_ bv0 3)) true) ?x4796 ?x1241))))
 (let ((?x2517 (ite (and (distinct ((_ extract 16 15) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 16 16) C1) (_ bv0 1)) true) (_ bv16 51) (_ bv15 51)) (ite (and (distinct ((_ extract 14 14) C1) (_ bv0 1)) true) (_ bv14 51) (_ bv13 51)))))
 (let ((?x2036 (ite (and (distinct ((_ extract 19 19) C1) (_ bv0 1)) true) (_ bv19 51) (ite (and (distinct ((_ extract 18 18) C1) (_ bv0 1)) true) (_ bv18 51) (_ bv17 51)))))
 (let ((?x5292 (ite (and (distinct ((_ extract 22 22) C1) (_ bv0 1)) true) (_ bv22 51) (ite (and (distinct ((_ extract 21 21) C1) (_ bv0 1)) true) (_ bv21 51) (_ bv20 51)))))
 (let ((?x2953 (ite (and (distinct ((_ extract 25 25) C1) (_ bv0 1)) true) (_ bv25 51) (ite (and (distinct ((_ extract 24 24) C1) (_ bv0 1)) true) (_ bv24 51) (_ bv23 51)))))
 (let ((?x2326 (ite (and (distinct ((_ extract 25 20) C1) (_ bv0 6)) true) (ite (and (distinct ((_ extract 25 23) C1) (_ bv0 3)) true) ?x2953 ?x5292) (ite (and (distinct ((_ extract 19 17) C1) (_ bv0 3)) true) ?x2036 ?x2517))))
 (let ((?x4297 (ite (and (distinct ((_ extract 29 28) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 29 29) C1) (_ bv0 1)) true) (_ bv29 51) (_ bv28 51)) (ite (and (distinct ((_ extract 27 27) C1) (_ bv0 1)) true) (_ bv27 51) (_ bv26 51)))))
 (let ((?x1405 (ite (and (distinct ((_ extract 32 32) C1) (_ bv0 1)) true) (_ bv32 51) (ite (and (distinct ((_ extract 31 31) C1) (_ bv0 1)) true) (_ bv31 51) (_ bv30 51)))))
 (let ((?x1924 (ite (and (distinct ((_ extract 35 35) C1) (_ bv0 1)) true) (_ bv35 51) (ite (and (distinct ((_ extract 34 34) C1) (_ bv0 1)) true) (_ bv34 51) (_ bv33 51)))))
 (let ((?x1154 (ite (and (distinct ((_ extract 38 38) C1) (_ bv0 1)) true) (_ bv38 51) (ite (and (distinct ((_ extract 37 37) C1) (_ bv0 1)) true) (_ bv37 51) (_ bv36 51)))))
 (let ((?x5353 (ite (and (distinct ((_ extract 38 33) C1) (_ bv0 6)) true) (ite (and (distinct ((_ extract 38 36) C1) (_ bv0 3)) true) ?x1154 ?x1924) (ite (and (distinct ((_ extract 32 30) C1) (_ bv0 3)) true) ?x1405 ?x4297))))
 (let ((?x5058 (ite (and (distinct ((_ extract 41 41) C1) (_ bv0 1)) true) (_ bv41 51) (ite (and (distinct ((_ extract 40 40) C1) (_ bv0 1)) true) (_ bv40 51) (_ bv39 51)))))
 (let ((?x5516 (ite (and (distinct ((_ extract 44 44) C1) (_ bv0 1)) true) (_ bv44 51) (ite (and (distinct ((_ extract 43 43) C1) (_ bv0 1)) true) (_ bv43 51) (_ bv42 51)))))
 (let ((?x5640 (ite (and (distinct ((_ extract 47 47) C1) (_ bv0 1)) true) (_ bv47 51) (ite (and (distinct ((_ extract 46 46) C1) (_ bv0 1)) true) (_ bv46 51) (_ bv45 51)))))
 (let ((?x5519 (ite (and (distinct ((_ extract 50 50) C1) (_ bv0 1)) true) (_ bv50 51) (ite (and (distinct ((_ extract 49 49) C1) (_ bv0 1)) true) (_ bv49 51) (_ bv48 51)))))
 (let ((?x2812 (ite (and (distinct ((_ extract 50 45) C1) (_ bv0 6)) true) (ite (and (distinct ((_ extract 50 48) C1) (_ bv0 3)) true) ?x5519 ?x5640) (ite (and (distinct ((_ extract 44 42) C1) (_ bv0 3)) true) ?x5516 ?x5058))))
 (let ((?x3375 (ite (and (distinct ((_ extract 50 26) C1) (_ bv0 25)) true) (ite (and (distinct ((_ extract 50 39) C1) (_ bv0 12)) true) ?x2812 ?x5353) (ite (and (distinct ((_ extract 25 13) C1) (_ bv0 13)) true) ?x2326 ?x5030))))
 (let ((?x5466 (bvsub ?x3375 ?x1982)))
 (let ((?x5040 (ite (and (distinct ((_ extract 3 2) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 3 3) C1) (_ bv0 1)) true) (_ bv3 32) (_ bv2 32)) (ite (and (distinct ((_ extract 1 1) C1) (_ bv0 1)) true) (_ bv1 32) (_ bv0 32)))))
 (let ((?x4681 (ite (and (distinct ((_ extract 6 6) C1) (_ bv0 1)) true) (_ bv6 32) (ite (and (distinct ((_ extract 5 5) C1) (_ bv0 1)) true) (_ bv5 32) (_ bv4 32)))))
 (let ((?x5189 (ite (and (distinct ((_ extract 9 9) C1) (_ bv0 1)) true) (_ bv9 32) (ite (and (distinct ((_ extract 8 8) C1) (_ bv0 1)) true) (_ bv8 32) (_ bv7 32)))))
 (let ((?x5173 (ite (and (distinct ((_ extract 12 12) C1) (_ bv0 1)) true) (_ bv12 32) (ite (and (distinct ((_ extract 11 11) C1) (_ bv0 1)) true) (_ bv11 32) (_ bv10 32)))))
 (let ((?x1490 (ite (and (distinct ((_ extract 12 7) C1) (_ bv0 6)) true) (ite (and (distinct ((_ extract 12 10) C1) (_ bv0 3)) true) ?x5173 ?x5189) (ite (and (distinct ((_ extract 6 4) C1) (_ bv0 3)) true) ?x4681 ?x5040))))
 (let ((?x4671 (ite (and (distinct ((_ extract 16 15) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 16 16) C1) (_ bv0 1)) true) (_ bv16 32) (_ bv15 32)) (ite (and (distinct ((_ extract 14 14) C1) (_ bv0 1)) true) (_ bv14 32) (_ bv13 32)))))
 (let ((?x2123 (ite (and (distinct ((_ extract 19 19) C1) (_ bv0 1)) true) (_ bv19 32) (ite (and (distinct ((_ extract 18 18) C1) (_ bv0 1)) true) (_ bv18 32) (_ bv17 32)))))
 (let ((?x5540 (ite (and (distinct ((_ extract 22 22) C1) (_ bv0 1)) true) (_ bv22 32) (ite (and (distinct ((_ extract 21 21) C1) (_ bv0 1)) true) (_ bv21 32) (_ bv20 32)))))
 (let ((?x5369 (ite (and (distinct ((_ extract 25 25) C1) (_ bv0 1)) true) (_ bv25 32) (ite (and (distinct ((_ extract 24 24) C1) (_ bv0 1)) true) (_ bv24 32) (_ bv23 32)))))
 (let ((?x3457 (ite (and (distinct ((_ extract 25 20) C1) (_ bv0 6)) true) (ite (and (distinct ((_ extract 25 23) C1) (_ bv0 3)) true) ?x5369 ?x5540) (ite (and (distinct ((_ extract 19 17) C1) (_ bv0 3)) true) ?x2123 ?x4671))))
 (let ((?x5039 (ite (and (distinct ((_ extract 29 28) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 29 29) C1) (_ bv0 1)) true) (_ bv29 32) (_ bv28 32)) (ite (and (distinct ((_ extract 27 27) C1) (_ bv0 1)) true) (_ bv27 32) (_ bv26 32)))))
 (let ((?x4449 (ite (and (distinct ((_ extract 32 32) C1) (_ bv0 1)) true) (_ bv32 32) (ite (and (distinct ((_ extract 31 31) C1) (_ bv0 1)) true) (_ bv31 32) (_ bv30 32)))))
 (let ((?x3670 (ite (and (distinct ((_ extract 35 35) C1) (_ bv0 1)) true) (_ bv35 32) (ite (and (distinct ((_ extract 34 34) C1) (_ bv0 1)) true) (_ bv34 32) (_ bv33 32)))))
 (let ((?x2847 (ite (and (distinct ((_ extract 38 38) C1) (_ bv0 1)) true) (_ bv38 32) (ite (and (distinct ((_ extract 37 37) C1) (_ bv0 1)) true) (_ bv37 32) (_ bv36 32)))))
 (let ((?x4780 (ite (and (distinct ((_ extract 38 33) C1) (_ bv0 6)) true) (ite (and (distinct ((_ extract 38 36) C1) (_ bv0 3)) true) ?x2847 ?x3670) (ite (and (distinct ((_ extract 32 30) C1) (_ bv0 3)) true) ?x4449 ?x5039))))
 (let ((?x2235 (ite (and (distinct ((_ extract 41 41) C1) (_ bv0 1)) true) (_ bv41 32) (ite (and (distinct ((_ extract 40 40) C1) (_ bv0 1)) true) (_ bv40 32) (_ bv39 32)))))
 (let ((?x1896 (ite (and (distinct ((_ extract 44 44) C1) (_ bv0 1)) true) (_ bv44 32) (ite (and (distinct ((_ extract 43 43) C1) (_ bv0 1)) true) (_ bv43 32) (_ bv42 32)))))
 (let ((?x1973 (ite (and (distinct ((_ extract 47 47) C1) (_ bv0 1)) true) (_ bv47 32) (ite (and (distinct ((_ extract 46 46) C1) (_ bv0 1)) true) (_ bv46 32) (_ bv45 32)))))
 (let ((?x1363 (ite (and (distinct ((_ extract 50 50) C1) (_ bv0 1)) true) (_ bv50 32) (ite (and (distinct ((_ extract 49 49) C1) (_ bv0 1)) true) (_ bv49 32) (_ bv48 32)))))
 (let ((?x2607 (ite (and (distinct ((_ extract 50 45) C1) (_ bv0 6)) true) (ite (and (distinct ((_ extract 50 48) C1) (_ bv0 3)) true) ?x1363 ?x1973) (ite (and (distinct ((_ extract 44 42) C1) (_ bv0 3)) true) ?x1896 ?x2235))))
 (let ((?x1861 (ite (and (distinct ((_ extract 50 26) C1) (_ bv0 25)) true) (ite (and (distinct ((_ extract 50 39) C1) (_ bv0 12)) true) ?x2607 ?x4780) (ite (and (distinct ((_ extract 25 13) C1) (_ bv0 13)) true) ?x3457 ?x1490))))
 (let ((?x1414 (ite (and (distinct ((_ extract 2 2) C2) (_ bv0 1)) true) (_ bv2 32) (ite (and (distinct ((_ extract 1 1) C2) (_ bv0 1)) true) (_ bv1 32) (_ bv0 32)))))
 (let ((?x1494 (ite (and (distinct ((_ extract 5 5) C2) (_ bv0 1)) true) (_ bv5 32) (ite (and (distinct ((_ extract 4 4) C2) (_ bv0 1)) true) (_ bv4 32) (_ bv3 32)))))
 (let ((?x5735 (ite (and (distinct ((_ extract 8 8) C2) (_ bv0 1)) true) (_ bv8 32) (ite (and (distinct ((_ extract 7 7) C2) (_ bv0 1)) true) (_ bv7 32) (_ bv6 32)))))
 (let ((?x3932 (ite (and (distinct ((_ extract 10 9) C2) (_ bv0 2)) true) (ite (and (distinct ((_ extract 10 10) C2) (_ bv0 1)) true) (_ bv10 32) (_ bv9 32)) ?x5735)))
 (let ((?x1141 (ite (and (distinct ((_ extract 10 6) C2) (_ bv0 5)) true) ?x3932 (ite (and (distinct ((_ extract 5 3) C2) (_ bv0 3)) true) ?x1494 ?x1414))))
 (and (and (and (distinct C1 (_ bv0 51)) true) (= (bvand C1 (bvsub C1 (_ bv1 51))) (_ bv0 51))) (and (and (distinct C2 (_ bv0 11)) true) (= (bvand C2 (bvsub C2 (_ bv1 11))) (_ bv0 11))) (bvslt ?x1141 ?x1861) (not (bvult ?x5466 (_ bv51 51))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
