(set-info :status unknown)
(declare-fun C2 () (_ BitVec 11))
(declare-fun C1 () (_ BitVec 25))
(assert
 (let ((?x3458 (ite (and (distinct ((_ extract 2 2) C2) (_ bv0 1)) true) (_ bv2 25) (ite (and (distinct ((_ extract 1 1) C2) (_ bv0 1)) true) (_ bv1 25) (_ bv0 25)))))
 (let ((?x1264 (ite (and (distinct ((_ extract 5 5) C2) (_ bv0 1)) true) (_ bv5 25) (ite (and (distinct ((_ extract 4 4) C2) (_ bv0 1)) true) (_ bv4 25) (_ bv3 25)))))
 (let ((?x2919 (ite (and (distinct ((_ extract 8 8) C2) (_ bv0 1)) true) (_ bv8 25) (ite (and (distinct ((_ extract 7 7) C2) (_ bv0 1)) true) (_ bv7 25) (_ bv6 25)))))
 (let ((?x1570 (ite (and (distinct ((_ extract 10 9) C2) (_ bv0 2)) true) (ite (and (distinct ((_ extract 10 10) C2) (_ bv0 1)) true) (_ bv10 25) (_ bv9 25)) ?x2919)))
 (let ((?x5906 (ite (and (distinct ((_ extract 10 6) C2) (_ bv0 5)) true) ?x1570 (ite (and (distinct ((_ extract 5 3) C2) (_ bv0 3)) true) ?x1264 ?x3458))))
 (let ((?x5850 (ite (and (distinct ((_ extract 3 2) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 3 3) C1) (_ bv0 1)) true) (_ bv3 25) (_ bv2 25)) (ite (and (distinct ((_ extract 1 1) C1) (_ bv0 1)) true) (_ bv1 25) (_ bv0 25)))))
 (let ((?x4168 (ite (and (distinct ((_ extract 6 6) C1) (_ bv0 1)) true) (_ bv6 25) (ite (and (distinct ((_ extract 5 5) C1) (_ bv0 1)) true) (_ bv5 25) (_ bv4 25)))))
 (let ((?x2084 (ite (and (distinct ((_ extract 9 9) C1) (_ bv0 1)) true) (_ bv9 25) (ite (and (distinct ((_ extract 8 8) C1) (_ bv0 1)) true) (_ bv8 25) (_ bv7 25)))))
 (let ((?x6595 (ite (and (distinct ((_ extract 12 12) C1) (_ bv0 1)) true) (_ bv12 25) (ite (and (distinct ((_ extract 11 11) C1) (_ bv0 1)) true) (_ bv11 25) (_ bv10 25)))))
 (let ((?x2576 (ite (and (distinct ((_ extract 12 7) C1) (_ bv0 6)) true) (ite (and (distinct ((_ extract 12 10) C1) (_ bv0 3)) true) ?x6595 ?x2084) (ite (and (distinct ((_ extract 6 4) C1) (_ bv0 3)) true) ?x4168 ?x5850))))
 (let ((?x3508 (ite (and (distinct ((_ extract 15 15) C1) (_ bv0 1)) true) (_ bv15 25) (ite (and (distinct ((_ extract 14 14) C1) (_ bv0 1)) true) (_ bv14 25) (_ bv13 25)))))
 (let ((?x6456 (ite (and (distinct ((_ extract 18 18) C1) (_ bv0 1)) true) (_ bv18 25) (ite (and (distinct ((_ extract 17 17) C1) (_ bv0 1)) true) (_ bv17 25) (_ bv16 25)))))
 (let ((?x3023 (ite (and (distinct ((_ extract 21 21) C1) (_ bv0 1)) true) (_ bv21 25) (ite (and (distinct ((_ extract 20 20) C1) (_ bv0 1)) true) (_ bv20 25) (_ bv19 25)))))
 (let ((?x2343 (ite (and (distinct ((_ extract 24 24) C1) (_ bv0 1)) true) (_ bv24 25) (ite (and (distinct ((_ extract 23 23) C1) (_ bv0 1)) true) (_ bv23 25) (_ bv22 25)))))
 (let ((?x6684 (ite (and (distinct ((_ extract 24 19) C1) (_ bv0 6)) true) (ite (and (distinct ((_ extract 24 22) C1) (_ bv0 3)) true) ?x2343 ?x3023) (ite (and (distinct ((_ extract 18 16) C1) (_ bv0 3)) true) ?x6456 ?x3508))))
 (let ((?x5063 (bvsub (ite (and (distinct ((_ extract 24 13) C1) (_ bv0 12)) true) ?x6684 ?x2576) ?x5906)))
 (let ((?x4434 (ite (and (distinct ((_ extract 3 2) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 3 3) C1) (_ bv0 1)) true) (_ bv3 32) (_ bv2 32)) (ite (and (distinct ((_ extract 1 1) C1) (_ bv0 1)) true) (_ bv1 32) (_ bv0 32)))))
 (let ((?x3057 (ite (and (distinct ((_ extract 6 6) C1) (_ bv0 1)) true) (_ bv6 32) (ite (and (distinct ((_ extract 5 5) C1) (_ bv0 1)) true) (_ bv5 32) (_ bv4 32)))))
 (let ((?x3259 (ite (and (distinct ((_ extract 9 9) C1) (_ bv0 1)) true) (_ bv9 32) (ite (and (distinct ((_ extract 8 8) C1) (_ bv0 1)) true) (_ bv8 32) (_ bv7 32)))))
 (let ((?x2344 (ite (and (distinct ((_ extract 12 12) C1) (_ bv0 1)) true) (_ bv12 32) (ite (and (distinct ((_ extract 11 11) C1) (_ bv0 1)) true) (_ bv11 32) (_ bv10 32)))))
 (let ((?x3413 (ite (and (distinct ((_ extract 12 7) C1) (_ bv0 6)) true) (ite (and (distinct ((_ extract 12 10) C1) (_ bv0 3)) true) ?x2344 ?x3259) (ite (and (distinct ((_ extract 6 4) C1) (_ bv0 3)) true) ?x3057 ?x4434))))
 (let ((?x6448 (ite (and (distinct ((_ extract 15 15) C1) (_ bv0 1)) true) (_ bv15 32) (ite (and (distinct ((_ extract 14 14) C1) (_ bv0 1)) true) (_ bv14 32) (_ bv13 32)))))
 (let ((?x3659 (ite (and (distinct ((_ extract 18 18) C1) (_ bv0 1)) true) (_ bv18 32) (ite (and (distinct ((_ extract 17 17) C1) (_ bv0 1)) true) (_ bv17 32) (_ bv16 32)))))
 (let ((?x4068 (ite (and (distinct ((_ extract 21 21) C1) (_ bv0 1)) true) (_ bv21 32) (ite (and (distinct ((_ extract 20 20) C1) (_ bv0 1)) true) (_ bv20 32) (_ bv19 32)))))
 (let ((?x1136 (ite (and (distinct ((_ extract 24 24) C1) (_ bv0 1)) true) (_ bv24 32) (ite (and (distinct ((_ extract 23 23) C1) (_ bv0 1)) true) (_ bv23 32) (_ bv22 32)))))
 (let ((?x2056 (ite (and (distinct ((_ extract 24 19) C1) (_ bv0 6)) true) (ite (and (distinct ((_ extract 24 22) C1) (_ bv0 3)) true) ?x1136 ?x4068) (ite (and (distinct ((_ extract 18 16) C1) (_ bv0 3)) true) ?x3659 ?x6448))))
 (let ((?x1230 (ite (and (distinct ((_ extract 2 2) C2) (_ bv0 1)) true) (_ bv2 32) (ite (and (distinct ((_ extract 1 1) C2) (_ bv0 1)) true) (_ bv1 32) (_ bv0 32)))))
 (let ((?x1781 (ite (and (distinct ((_ extract 5 5) C2) (_ bv0 1)) true) (_ bv5 32) (ite (and (distinct ((_ extract 4 4) C2) (_ bv0 1)) true) (_ bv4 32) (_ bv3 32)))))
 (let ((?x4135 (ite (and (distinct ((_ extract 8 8) C2) (_ bv0 1)) true) (_ bv8 32) (ite (and (distinct ((_ extract 7 7) C2) (_ bv0 1)) true) (_ bv7 32) (_ bv6 32)))))
 (let ((?x3431 (ite (and (distinct ((_ extract 10 9) C2) (_ bv0 2)) true) (ite (and (distinct ((_ extract 10 10) C2) (_ bv0 1)) true) (_ bv10 32) (_ bv9 32)) ?x4135)))
 (let ((?x4072 (ite (and (distinct ((_ extract 10 6) C2) (_ bv0 5)) true) ?x3431 (ite (and (distinct ((_ extract 5 3) C2) (_ bv0 3)) true) ?x1781 ?x1230))))
 (and (and (and (distinct C1 (_ bv0 25)) true) (= (bvand C1 (bvsub C1 (_ bv1 25))) (_ bv0 25))) (and (and (distinct C2 (_ bv0 11)) true) (= (bvand C2 (bvsub C2 (_ bv1 11))) (_ bv0 11))) (bvslt ?x4072 (ite (and (distinct ((_ extract 24 13) C1) (_ bv0 12)) true) ?x2056 ?x3413)) (not (bvult ?x5063 (_ bv25 25))))))))))))))))))))))))))))))))))))
(check-sat)
