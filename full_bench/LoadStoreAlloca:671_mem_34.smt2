(set-info :status unknown)
(declare-fun mem0 () (_ BitVec 8))
(declare-fun %y () (_ BitVec 36))
(declare-fun %p2 () (_ BitVec 64))
(declare-fun idx () (_ BitVec 64))
(declare-fun %x () (_ BitVec 36))
(declare-fun %p1 () (_ BitVec 64))
(declare-fun |ana_equivalentAddressValues(%p1, %p2)| () (_ BitVec 1))
(assert
 (let ((?x10538 (ite (and (and (distinct %p2 (_ bv0 64)) true) (or true true) (= idx %p2)) (concat ((_ extract 7 4) mem0) ((_ extract 3 0) %y)) mem0)))
 (let (($x13552 (or true true)))
 (let (($x6283 (and (distinct %p2 (_ bv0 64)) true)))
 (let ((?x18598 (ite (and $x6283 $x13552 (= idx (bvadd (bvadd %p2 (_ bv1 64)) (_ bv0 64)))) ((_ extract 11 4) %y) ?x10538)))
 (let ((?x1304 (ite (and $x6283 $x13552 (= idx (bvadd (bvadd %p2 (_ bv1 64)) (_ bv1 64)))) ((_ extract 19 12) %y) ?x18598)))
 (let ((?x4519 (ite (and $x6283 $x13552 (= idx (bvadd (bvadd %p2 (_ bv1 64)) (_ bv2 64)))) ((_ extract 27 20) %y) ?x1304)))
 (let ((?x6453 (ite (and $x6283 $x13552 (= idx (bvadd (bvadd %p2 (_ bv1 64)) (_ bv3 64)))) ((_ extract 35 28) %y) ?x4519)))
 (let ((?x6308 (ite (and (and (distinct %p1 (_ bv0 64)) true) $x13552 (= idx %p1)) (concat ((_ extract 7 4) mem0) ((_ extract 3 0) %x)) mem0)))
 (let (($x17212 (and (distinct %p1 (_ bv0 64)) true)))
 (let ((?x10110 (ite (and $x17212 $x13552 (= idx (bvadd (bvadd %p1 (_ bv1 64)) (_ bv0 64)))) ((_ extract 11 4) %x) ?x6308)))
 (let ((?x61 (ite (and $x17212 $x13552 (= idx (bvadd (bvadd %p1 (_ bv1 64)) (_ bv1 64)))) ((_ extract 19 12) %x) ?x10110)))
 (let ((?x21710 (ite (and $x17212 $x13552 (= idx (bvadd (bvadd %p1 (_ bv1 64)) (_ bv2 64)))) ((_ extract 27 20) %x) ?x61)))
 (let ((?x21869 (ite (and $x17212 $x13552 (= idx (bvadd (bvadd %p1 (_ bv1 64)) (_ bv3 64)))) ((_ extract 35 28) %x) ?x21710)))
 (let ((?x18561 (ite (and $x17212 $x13552 (= %p2 %p1)) (concat ((_ extract 7 4) mem0) ((_ extract 3 0) %x)) mem0)))
 (let ((?x12673 (ite (and $x17212 $x13552 (= %p2 (bvadd (bvadd %p1 (_ bv1 64)) (_ bv0 64)))) ((_ extract 11 4) %x) ?x18561)))
 (let ((?x16781 (ite (and $x17212 $x13552 (= %p2 (bvadd (bvadd %p1 (_ bv1 64)) (_ bv1 64)))) ((_ extract 19 12) %x) ?x12673)))
 (let ((?x1943 (ite (and $x17212 $x13552 (= %p2 (bvadd (bvadd %p1 (_ bv1 64)) (_ bv2 64)))) ((_ extract 27 20) %x) ?x16781)))
 (let ((?x2408 (ite (and $x17212 $x13552 (= %p2 (bvadd (bvadd %p1 (_ bv1 64)) (_ bv3 64)))) ((_ extract 35 28) %x) ?x1943)))
 (let ((?x9734 (ite (and $x17212 $x13552 $x6283 $x13552 (= idx %p2)) (concat ((_ extract 7 4) ?x2408) ((_ extract 3 0) %y)) ?x21869)))
 (let ((?x11219 (ite (and $x17212 $x13552 $x6283 $x13552 (= idx (bvadd (bvadd %p2 (_ bv1 64)) (_ bv0 64)))) ((_ extract 11 4) %y) ?x9734)))
 (let ((?x14788 (ite (and $x17212 $x13552 $x6283 $x13552 (= idx (bvadd (bvadd %p2 (_ bv1 64)) (_ bv1 64)))) ((_ extract 19 12) %y) ?x11219)))
 (let ((?x7397 (ite (and $x17212 $x13552 $x6283 $x13552 (= idx (bvadd (bvadd %p2 (_ bv1 64)) (_ bv2 64)))) ((_ extract 27 20) %y) ?x14788)))
 (let ((?x13334 (ite (and $x17212 $x13552 $x6283 $x13552 (= idx (bvadd (bvadd %p2 (_ bv1 64)) (_ bv3 64)))) ((_ extract 35 28) %y) ?x7397)))
 (let (($x13774 (= |ana_equivalentAddressValues(%p1, %p2)| (_ bv1 1))))
 (and (=> $x13774 (= %p1 %p2)) $x13774 (and (distinct ?x13334 ?x6453) true)))))))))))))))))))))))))))
(check-sat)
