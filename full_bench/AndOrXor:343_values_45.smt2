(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C2 () (_ BitVec 47))
(declare-fun %B () (_ BitVec 47))
(declare-fun %A () (_ BitVec 47))
(declare-fun C1 () (_ BitVec 47))
(declare-fun |ana_MaskedValueIsZero(%B, ((1 << (width(C2) - countLeadingZeros(((C2 - 1) ^ C2)))) - 1))| () (_ BitVec 1))
(assert
 (let (($x153674 (and (distinct (bvand (bvadd (bvand %A C1) %B) C2) (bvand (bvadd %A %B) C2)) true)))
 (let (($x131713 (= |ana_MaskedValueIsZero(%B, ((1 << (width(C2) - countLeadingZeros(((C2 - 1) ^ C2)))) - 1))| (_ bv1 1))))
 (let ((?x25592 (bvsub C2 (_ bv1 47))))
 (let ((?x153731 (bvor ?x25592 C2)))
 (let (($x153706 (and (and (distinct ?x153731 (_ bv0 47)) true) (= (bvand (bvadd ?x153731 (_ bv1 47)) ?x153731) (_ bv0 47)) $x131713)))
 (let (($x153707 (or (= (bvand (bvadd C2 (_ bv1 47)) (bvsub (bvadd C2 (_ bv1 47)) (_ bv1 47))) (_ bv0 47)) $x153706)))
 (let ((?x131529 (bvand C1 C2)))
 (let (($x153736 (= ?x131529 C2)))
 (let ((?x153743 (ite (= ((_ extract 1 1) (bvxor ?x25592 C2)) (_ bv1 1)) (_ bv45 47) (ite (= ((_ extract 0 0) (bvxor ?x25592 C2)) (_ bv1 1)) (_ bv46 47) (_ bv47 47)))))
 (let ((?x153734 (ite (= ((_ extract 3 3) (bvxor ?x25592 C2)) (_ bv1 1)) (_ bv43 47) (ite (= ((_ extract 2 2) (bvxor ?x25592 C2)) (_ bv1 1)) (_ bv44 47) ?x153743))))
 (let ((?x153724 (ite (= ((_ extract 5 5) (bvxor ?x25592 C2)) (_ bv1 1)) (_ bv41 47) (ite (= ((_ extract 4 4) (bvxor ?x25592 C2)) (_ bv1 1)) (_ bv42 47) ?x153734))))
 (let ((?x153710 (ite (= ((_ extract 7 7) (bvxor ?x25592 C2)) (_ bv1 1)) (_ bv39 47) (ite (= ((_ extract 6 6) (bvxor ?x25592 C2)) (_ bv1 1)) (_ bv40 47) ?x153724))))
 (let ((?x153698 (ite (= ((_ extract 9 9) (bvxor ?x25592 C2)) (_ bv1 1)) (_ bv37 47) (ite (= ((_ extract 8 8) (bvxor ?x25592 C2)) (_ bv1 1)) (_ bv38 47) ?x153710))))
 (let ((?x153688 (ite (= ((_ extract 11 11) (bvxor ?x25592 C2)) (_ bv1 1)) (_ bv35 47) (ite (= ((_ extract 10 10) (bvxor ?x25592 C2)) (_ bv1 1)) (_ bv36 47) ?x153698))))
 (let ((?x153676 (ite (= ((_ extract 13 13) (bvxor ?x25592 C2)) (_ bv1 1)) (_ bv33 47) (ite (= ((_ extract 12 12) (bvxor ?x25592 C2)) (_ bv1 1)) (_ bv34 47) ?x153688))))
 (let ((?x153668 (ite (= ((_ extract 15 15) (bvxor ?x25592 C2)) (_ bv1 1)) (_ bv31 47) (ite (= ((_ extract 14 14) (bvxor ?x25592 C2)) (_ bv1 1)) (_ bv32 47) ?x153676))))
 (let ((?x153660 (ite (= ((_ extract 17 17) (bvxor ?x25592 C2)) (_ bv1 1)) (_ bv29 47) (ite (= ((_ extract 16 16) (bvxor ?x25592 C2)) (_ bv1 1)) (_ bv30 47) ?x153668))))
 (let ((?x153647 (ite (= ((_ extract 19 19) (bvxor ?x25592 C2)) (_ bv1 1)) (_ bv27 47) (ite (= ((_ extract 18 18) (bvxor ?x25592 C2)) (_ bv1 1)) (_ bv28 47) ?x153660))))
 (let ((?x153638 (ite (= ((_ extract 21 21) (bvxor ?x25592 C2)) (_ bv1 1)) (_ bv25 47) (ite (= ((_ extract 20 20) (bvxor ?x25592 C2)) (_ bv1 1)) (_ bv26 47) ?x153647))))
 (let ((?x153625 (ite (= ((_ extract 23 23) (bvxor ?x25592 C2)) (_ bv1 1)) (_ bv23 47) (ite (= ((_ extract 22 22) (bvxor ?x25592 C2)) (_ bv1 1)) (_ bv24 47) ?x153638))))
 (let ((?x153611 (ite (= ((_ extract 25 25) (bvxor ?x25592 C2)) (_ bv1 1)) (_ bv21 47) (ite (= ((_ extract 24 24) (bvxor ?x25592 C2)) (_ bv1 1)) (_ bv22 47) ?x153625))))
 (let ((?x153599 (ite (= ((_ extract 27 27) (bvxor ?x25592 C2)) (_ bv1 1)) (_ bv19 47) (ite (= ((_ extract 26 26) (bvxor ?x25592 C2)) (_ bv1 1)) (_ bv20 47) ?x153611))))
 (let ((?x153053 (ite (= ((_ extract 29 29) (bvxor ?x25592 C2)) (_ bv1 1)) (_ bv17 47) (ite (= ((_ extract 28 28) (bvxor ?x25592 C2)) (_ bv1 1)) (_ bv18 47) ?x153599))))
 (let ((?x152675 (ite (= ((_ extract 31 31) (bvxor ?x25592 C2)) (_ bv1 1)) (_ bv15 47) (ite (= ((_ extract 30 30) (bvxor ?x25592 C2)) (_ bv1 1)) (_ bv16 47) ?x153053))))
 (let ((?x153293 (ite (= ((_ extract 33 33) (bvxor ?x25592 C2)) (_ bv1 1)) (_ bv13 47) (ite (= ((_ extract 32 32) (bvxor ?x25592 C2)) (_ bv1 1)) (_ bv14 47) ?x152675))))
 (let ((?x153344 (ite (= ((_ extract 35 35) (bvxor ?x25592 C2)) (_ bv1 1)) (_ bv11 47) (ite (= ((_ extract 34 34) (bvxor ?x25592 C2)) (_ bv1 1)) (_ bv12 47) ?x153293))))
 (let ((?x153352 (ite (= ((_ extract 37 37) (bvxor ?x25592 C2)) (_ bv1 1)) (_ bv9 47) (ite (= ((_ extract 36 36) (bvxor ?x25592 C2)) (_ bv1 1)) (_ bv10 47) ?x153344))))
 (let ((?x153776 (ite (= ((_ extract 39 39) (bvxor ?x25592 C2)) (_ bv1 1)) (_ bv7 47) (ite (= ((_ extract 38 38) (bvxor ?x25592 C2)) (_ bv1 1)) (_ bv8 47) ?x153352))))
 (let ((?x153772 (ite (= ((_ extract 41 41) (bvxor ?x25592 C2)) (_ bv1 1)) (_ bv5 47) (ite (= ((_ extract 40 40) (bvxor ?x25592 C2)) (_ bv1 1)) (_ bv6 47) ?x153776))))
 (let ((?x153768 (ite (= ((_ extract 43 43) (bvxor ?x25592 C2)) (_ bv1 1)) (_ bv3 47) (ite (= ((_ extract 42 42) (bvxor ?x25592 C2)) (_ bv1 1)) (_ bv4 47) ?x153772))))
 (let ((?x153764 (ite (= ((_ extract 45 45) (bvxor ?x25592 C2)) (_ bv1 1)) (_ bv1 47) (ite (= ((_ extract 44 44) (bvxor ?x25592 C2)) (_ bv1 1)) (_ bv2 47) ?x153768))))
 (let ((?x153761 (bvshl (_ bv1 47) (bvsub (_ bv47 47) (ite (= ((_ extract 46 46) (bvxor ?x25592 C2)) (_ bv1 1)) (_ bv0 47) ?x153764)))))
 (let (($x153714 (=> $x131713 (= (bvand %B (bvsub ?x153761 (_ bv1 47))) (_ bv0 47)))))
 (and $x153714 $x153736 $x153707 $x153674)))))))))))))))))))))))))))))))))))
(check-sat)
