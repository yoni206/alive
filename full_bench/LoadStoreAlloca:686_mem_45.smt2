(set-info :status unknown)
(declare-fun mem0 () (_ BitVec 8))
(declare-fun %p2 () (_ BitVec 64))
(declare-fun idx () (_ BitVec 64))
(declare-fun %p1 () (_ BitVec 64))
(declare-fun |ana_equivalentAddressValues(%p1, %p2)| () (_ BitVec 1))
(assert
 (let ((?x16308 (concat (concat (concat (concat (concat mem0 mem0) mem0) mem0) mem0) mem0)))
 (let ((?x14259 (concat ?x16308 ((_ extract 0 0) mem0))))
 (let (($x5885 (or true true)))
 (let (($x15642 (and (distinct %p2 (_ bv0 64)) true)))
 (let (($x12921 (and (distinct %p1 (_ bv0 64)) true)))
 (let ((?x9408 (ite (and $x12921 $x5885 $x12921 $x5885 $x12921 $x5885 $x15642 $x5885 (= idx %p2)) (concat ((_ extract 7 1) mem0) ((_ extract 0 0) ?x14259)) mem0)))
 (let (($x15939 (and $x12921 $x5885 $x12921 $x5885 $x12921 $x5885 $x15642 $x5885 (= idx (bvadd (bvadd %p2 (_ bv1 64)) (_ bv0 64))))))
 (let (($x6657 (and $x12921 $x5885 $x12921 $x5885 $x12921 $x5885 $x15642 $x5885 (= idx (bvadd (bvadd %p2 (_ bv1 64)) (_ bv1 64))))))
 (let (($x13808 (and $x12921 $x5885 $x12921 $x5885 $x12921 $x5885 $x15642 $x5885 (= idx (bvadd (bvadd %p2 (_ bv1 64)) (_ bv2 64))))))
 (let ((?x21907 (ite $x13808 ((_ extract 24 17) ?x14259) (ite $x6657 ((_ extract 16 9) ?x14259) (ite $x15939 ((_ extract 8 1) ?x14259) ?x9408)))))
 (let (($x17826 (and $x12921 $x5885 $x12921 $x5885 $x12921 $x5885 $x15642 $x5885 (= idx (bvadd (bvadd %p2 (_ bv1 64)) (_ bv3 64))))))
 (let (($x1702 (and $x12921 $x5885 $x12921 $x5885 $x12921 $x5885 $x15642 $x5885 (= idx (bvadd (bvadd %p2 (_ bv1 64)) (_ bv4 64))))))
 (let (($x22380 (and $x12921 $x5885 $x12921 $x5885 $x12921 $x5885 $x15642 $x5885 (= idx (bvadd (bvadd %p2 (_ bv1 64)) (_ bv5 64))))))
 (let ((?x8572 (ite $x22380 ((_ extract 48 41) ?x14259) (ite $x1702 ((_ extract 40 33) ?x14259) (ite $x17826 ((_ extract 32 25) ?x14259) ?x21907)))))
 (let (($x10093 (= |ana_equivalentAddressValues(%p1, %p2)| (_ bv1 1))))
 (and (=> $x10093 (= %p1 %p2)) $x10093 (and (distinct ?x8572 mem0) true))))))))))))))))))
(check-sat)
