(set-info :status unknown)
(declare-fun mem0 () (_ BitVec 8))
(declare-fun %p2 () (_ BitVec 64))
(declare-fun idx () (_ BitVec 64))
(declare-fun %p1 () (_ BitVec 64))
(declare-fun |ana_equivalentAddressValues(%p1, %p2)| () (_ BitVec 1))
(assert
 (let ((?x16437 (concat ((_ extract 7 1) mem0) ((_ extract 0 0) (concat (concat mem0 mem0) ((_ extract 0 0) mem0))))))
 (let (($x5623 (or true true)))
 (let (($x18224 (and (distinct %p2 (_ bv0 64)) true)))
 (let (($x11071 (and (distinct %p1 (_ bv0 64)) true)))
 (let ((?x9749 (ite (and $x11071 $x5623 $x11071 $x5623 $x11071 $x5623 $x18224 $x5623 (= idx %p2)) ?x16437 mem0)))
 (let (($x14986 (and $x11071 $x5623 $x11071 $x5623 $x11071 $x5623 $x18224 $x5623 (= idx (bvadd (bvadd %p2 (_ bv1 64)) (_ bv0 64))))))
 (let ((?x11735 (ite $x14986 ((_ extract 8 1) (concat (concat mem0 mem0) ((_ extract 0 0) mem0))) ?x9749)))
 (let (($x15398 (and $x11071 $x5623 $x11071 $x5623 $x11071 $x5623 $x18224 $x5623 (= idx (bvadd (bvadd %p2 (_ bv1 64)) (_ bv1 64))))))
 (let ((?x13808 (ite $x15398 ((_ extract 16 9) (concat (concat mem0 mem0) ((_ extract 0 0) mem0))) ?x11735)))
 (let (($x20380 (= |ana_equivalentAddressValues(%p1, %p2)| (_ bv1 1))))
 (and (=> $x20380 (= %p1 %p2)) $x20380 (and (distinct ?x13808 mem0) true)))))))))))))
(check-sat)
