(set-info :status unknown)
(declare-fun %Y () (_ BitVec 11))
(declare-fun C2 () (_ BitVec 11))
(declare-fun C1 () (_ BitVec 50))
(declare-fun %X () (_ BitVec 50))
(assert
 (let ((?x6000 (ite (and (distinct ((_ extract 2 2) C2) (_ bv0 1)) true) (_ bv2 50) (ite (and (distinct ((_ extract 1 1) C2) (_ bv0 1)) true) (_ bv1 50) (_ bv0 50)))))
 (let ((?x2696 (ite (and (distinct ((_ extract 5 5) C2) (_ bv0 1)) true) (_ bv5 50) (ite (and (distinct ((_ extract 4 4) C2) (_ bv0 1)) true) (_ bv4 50) (_ bv3 50)))))
 (let ((?x1292 (ite (and (distinct ((_ extract 8 8) C2) (_ bv0 1)) true) (_ bv8 50) (ite (and (distinct ((_ extract 7 7) C2) (_ bv0 1)) true) (_ bv7 50) (_ bv6 50)))))
 (let ((?x4211 (ite (and (distinct ((_ extract 10 9) C2) (_ bv0 2)) true) (ite (and (distinct ((_ extract 10 10) C2) (_ bv0 1)) true) (_ bv10 50) (_ bv9 50)) ?x1292)))
 (let ((?x2757 (ite (and (distinct ((_ extract 10 6) C2) (_ bv0 5)) true) ?x4211 (ite (and (distinct ((_ extract 5 3) C2) (_ bv0 3)) true) ?x2696 ?x6000))))
 (let ((?x3090 (ite (and (distinct ((_ extract 3 2) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 3 3) C1) (_ bv0 1)) true) (_ bv3 50) (_ bv2 50)) (ite (and (distinct ((_ extract 1 1) C1) (_ bv0 1)) true) (_ bv1 50) (_ bv0 50)))))
 (let ((?x2211 (ite (and (distinct ((_ extract 6 6) C1) (_ bv0 1)) true) (_ bv6 50) (ite (and (distinct ((_ extract 5 5) C1) (_ bv0 1)) true) (_ bv5 50) (_ bv4 50)))))
 (let ((?x4979 (ite (and (distinct ((_ extract 9 9) C1) (_ bv0 1)) true) (_ bv9 50) (ite (and (distinct ((_ extract 8 8) C1) (_ bv0 1)) true) (_ bv8 50) (_ bv7 50)))))
 (let ((?x3440 (ite (and (distinct ((_ extract 12 12) C1) (_ bv0 1)) true) (_ bv12 50) (ite (and (distinct ((_ extract 11 11) C1) (_ bv0 1)) true) (_ bv11 50) (_ bv10 50)))))
 (let ((?x2221 (ite (and (distinct ((_ extract 12 7) C1) (_ bv0 6)) true) (ite (and (distinct ((_ extract 12 10) C1) (_ bv0 3)) true) ?x3440 ?x4979) (ite (and (distinct ((_ extract 6 4) C1) (_ bv0 3)) true) ?x2211 ?x3090))))
 (let ((?x2523 (ite (and (distinct ((_ extract 15 15) C1) (_ bv0 1)) true) (_ bv15 50) (ite (and (distinct ((_ extract 14 14) C1) (_ bv0 1)) true) (_ bv14 50) (_ bv13 50)))))
 (let ((?x5132 (ite (and (distinct ((_ extract 18 18) C1) (_ bv0 1)) true) (_ bv18 50) (ite (and (distinct ((_ extract 17 17) C1) (_ bv0 1)) true) (_ bv17 50) (_ bv16 50)))))
 (let ((?x1749 (ite (and (distinct ((_ extract 21 21) C1) (_ bv0 1)) true) (_ bv21 50) (ite (and (distinct ((_ extract 20 20) C1) (_ bv0 1)) true) (_ bv20 50) (_ bv19 50)))))
 (let ((?x3020 (ite (and (distinct ((_ extract 24 24) C1) (_ bv0 1)) true) (_ bv24 50) (ite (and (distinct ((_ extract 23 23) C1) (_ bv0 1)) true) (_ bv23 50) (_ bv22 50)))))
 (let ((?x2495 (ite (and (distinct ((_ extract 24 19) C1) (_ bv0 6)) true) (ite (and (distinct ((_ extract 24 22) C1) (_ bv0 3)) true) ?x3020 ?x1749) (ite (and (distinct ((_ extract 18 16) C1) (_ bv0 3)) true) ?x5132 ?x2523))))
 (let ((?x5953 (ite (and (distinct ((_ extract 28 27) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 28 28) C1) (_ bv0 1)) true) (_ bv28 50) (_ bv27 50)) (ite (and (distinct ((_ extract 26 26) C1) (_ bv0 1)) true) (_ bv26 50) (_ bv25 50)))))
 (let ((?x4162 (ite (and (distinct ((_ extract 31 31) C1) (_ bv0 1)) true) (_ bv31 50) (ite (and (distinct ((_ extract 30 30) C1) (_ bv0 1)) true) (_ bv30 50) (_ bv29 50)))))
 (let ((?x2017 (ite (and (distinct ((_ extract 34 34) C1) (_ bv0 1)) true) (_ bv34 50) (ite (and (distinct ((_ extract 33 33) C1) (_ bv0 1)) true) (_ bv33 50) (_ bv32 50)))))
 (let ((?x3955 (ite (and (distinct ((_ extract 37 37) C1) (_ bv0 1)) true) (_ bv37 50) (ite (and (distinct ((_ extract 36 36) C1) (_ bv0 1)) true) (_ bv36 50) (_ bv35 50)))))
 (let ((?x5453 (ite (and (distinct ((_ extract 37 32) C1) (_ bv0 6)) true) (ite (and (distinct ((_ extract 37 35) C1) (_ bv0 3)) true) ?x3955 ?x2017) (ite (and (distinct ((_ extract 31 29) C1) (_ bv0 3)) true) ?x4162 ?x5953))))
 (let ((?x1137 (ite (and (distinct ((_ extract 40 40) C1) (_ bv0 1)) true) (_ bv40 50) (ite (and (distinct ((_ extract 39 39) C1) (_ bv0 1)) true) (_ bv39 50) (_ bv38 50)))))
 (let ((?x6675 (ite (and (distinct ((_ extract 43 43) C1) (_ bv0 1)) true) (_ bv43 50) (ite (and (distinct ((_ extract 42 42) C1) (_ bv0 1)) true) (_ bv42 50) (_ bv41 50)))))
 (let ((?x4210 (ite (and (distinct ((_ extract 46 46) C1) (_ bv0 1)) true) (_ bv46 50) (ite (and (distinct ((_ extract 45 45) C1) (_ bv0 1)) true) (_ bv45 50) (_ bv44 50)))))
 (let ((?x5226 (ite (and (distinct ((_ extract 49 49) C1) (_ bv0 1)) true) (_ bv49 50) (ite (and (distinct ((_ extract 48 48) C1) (_ bv0 1)) true) (_ bv48 50) (_ bv47 50)))))
 (let ((?x1395 (ite (and (distinct ((_ extract 49 44) C1) (_ bv0 6)) true) (ite (and (distinct ((_ extract 49 47) C1) (_ bv0 3)) true) ?x5226 ?x4210) (ite (and (distinct ((_ extract 43 41) C1) (_ bv0 3)) true) ?x6675 ?x1137))))
 (let ((?x3002 (ite (and (distinct ((_ extract 49 25) C1) (_ bv0 25)) true) (ite (and (distinct ((_ extract 49 38) C1) (_ bv0 12)) true) ?x1395 ?x5453) (ite (and (distinct ((_ extract 24 13) C1) (_ bv0 12)) true) ?x2495 ?x2221))))
 (let ((?x4337 (bvsub ?x3002 ?x2757)))
 (let ((?x4696 (bvand %X C1)))
 (let ((?x2050 (bvor %Y C2)))
 (let (($x3265 (and (distinct (ite (= (ite (and (distinct ?x4696 (_ bv0 50)) true) (_ bv1 1) (_ bv0 1)) (_ bv1 1)) ?x2050 %Y) (bvor ((_ extract 10 0) (bvlshr ?x4696 ?x4337)) %Y)) true)))
 (let ((?x3713 (ite (and (distinct ((_ extract 3 2) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 3 3) C1) (_ bv0 1)) true) (_ bv3 32) (_ bv2 32)) (ite (and (distinct ((_ extract 1 1) C1) (_ bv0 1)) true) (_ bv1 32) (_ bv0 32)))))
 (let ((?x2933 (ite (and (distinct ((_ extract 6 6) C1) (_ bv0 1)) true) (_ bv6 32) (ite (and (distinct ((_ extract 5 5) C1) (_ bv0 1)) true) (_ bv5 32) (_ bv4 32)))))
 (let ((?x6250 (ite (and (distinct ((_ extract 9 9) C1) (_ bv0 1)) true) (_ bv9 32) (ite (and (distinct ((_ extract 8 8) C1) (_ bv0 1)) true) (_ bv8 32) (_ bv7 32)))))
 (let ((?x2195 (ite (and (distinct ((_ extract 12 12) C1) (_ bv0 1)) true) (_ bv12 32) (ite (and (distinct ((_ extract 11 11) C1) (_ bv0 1)) true) (_ bv11 32) (_ bv10 32)))))
 (let ((?x5329 (ite (and (distinct ((_ extract 12 7) C1) (_ bv0 6)) true) (ite (and (distinct ((_ extract 12 10) C1) (_ bv0 3)) true) ?x2195 ?x6250) (ite (and (distinct ((_ extract 6 4) C1) (_ bv0 3)) true) ?x2933 ?x3713))))
 (let ((?x5617 (ite (and (distinct ((_ extract 15 15) C1) (_ bv0 1)) true) (_ bv15 32) (ite (and (distinct ((_ extract 14 14) C1) (_ bv0 1)) true) (_ bv14 32) (_ bv13 32)))))
 (let ((?x2621 (ite (and (distinct ((_ extract 18 18) C1) (_ bv0 1)) true) (_ bv18 32) (ite (and (distinct ((_ extract 17 17) C1) (_ bv0 1)) true) (_ bv17 32) (_ bv16 32)))))
 (let ((?x6432 (ite (and (distinct ((_ extract 21 21) C1) (_ bv0 1)) true) (_ bv21 32) (ite (and (distinct ((_ extract 20 20) C1) (_ bv0 1)) true) (_ bv20 32) (_ bv19 32)))))
 (let ((?x6850 (ite (and (distinct ((_ extract 24 24) C1) (_ bv0 1)) true) (_ bv24 32) (ite (and (distinct ((_ extract 23 23) C1) (_ bv0 1)) true) (_ bv23 32) (_ bv22 32)))))
 (let ((?x5331 (ite (and (distinct ((_ extract 24 19) C1) (_ bv0 6)) true) (ite (and (distinct ((_ extract 24 22) C1) (_ bv0 3)) true) ?x6850 ?x6432) (ite (and (distinct ((_ extract 18 16) C1) (_ bv0 3)) true) ?x2621 ?x5617))))
 (let ((?x4798 (ite (and (distinct ((_ extract 28 27) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 28 28) C1) (_ bv0 1)) true) (_ bv28 32) (_ bv27 32)) (ite (and (distinct ((_ extract 26 26) C1) (_ bv0 1)) true) (_ bv26 32) (_ bv25 32)))))
 (let ((?x4519 (ite (and (distinct ((_ extract 31 31) C1) (_ bv0 1)) true) (_ bv31 32) (ite (and (distinct ((_ extract 30 30) C1) (_ bv0 1)) true) (_ bv30 32) (_ bv29 32)))))
 (let ((?x4031 (ite (and (distinct ((_ extract 34 34) C1) (_ bv0 1)) true) (_ bv34 32) (ite (and (distinct ((_ extract 33 33) C1) (_ bv0 1)) true) (_ bv33 32) (_ bv32 32)))))
 (let ((?x3410 (ite (and (distinct ((_ extract 37 37) C1) (_ bv0 1)) true) (_ bv37 32) (ite (and (distinct ((_ extract 36 36) C1) (_ bv0 1)) true) (_ bv36 32) (_ bv35 32)))))
 (let ((?x4667 (ite (and (distinct ((_ extract 37 32) C1) (_ bv0 6)) true) (ite (and (distinct ((_ extract 37 35) C1) (_ bv0 3)) true) ?x3410 ?x4031) (ite (and (distinct ((_ extract 31 29) C1) (_ bv0 3)) true) ?x4519 ?x4798))))
 (let ((?x2028 (ite (and (distinct ((_ extract 40 40) C1) (_ bv0 1)) true) (_ bv40 32) (ite (and (distinct ((_ extract 39 39) C1) (_ bv0 1)) true) (_ bv39 32) (_ bv38 32)))))
 (let ((?x1491 (ite (and (distinct ((_ extract 43 43) C1) (_ bv0 1)) true) (_ bv43 32) (ite (and (distinct ((_ extract 42 42) C1) (_ bv0 1)) true) (_ bv42 32) (_ bv41 32)))))
 (let ((?x1649 (ite (and (distinct ((_ extract 46 46) C1) (_ bv0 1)) true) (_ bv46 32) (ite (and (distinct ((_ extract 45 45) C1) (_ bv0 1)) true) (_ bv45 32) (_ bv44 32)))))
 (let ((?x2374 (ite (and (distinct ((_ extract 49 49) C1) (_ bv0 1)) true) (_ bv49 32) (ite (and (distinct ((_ extract 48 48) C1) (_ bv0 1)) true) (_ bv48 32) (_ bv47 32)))))
 (let ((?x2997 (ite (and (distinct ((_ extract 49 44) C1) (_ bv0 6)) true) (ite (and (distinct ((_ extract 49 47) C1) (_ bv0 3)) true) ?x2374 ?x1649) (ite (and (distinct ((_ extract 43 41) C1) (_ bv0 3)) true) ?x1491 ?x2028))))
 (let ((?x1366 (ite (and (distinct ((_ extract 49 25) C1) (_ bv0 25)) true) (ite (and (distinct ((_ extract 49 38) C1) (_ bv0 12)) true) ?x2997 ?x4667) (ite (and (distinct ((_ extract 24 13) C1) (_ bv0 12)) true) ?x5331 ?x5329))))
 (let ((?x6471 (ite (and (distinct ((_ extract 2 2) C2) (_ bv0 1)) true) (_ bv2 32) (ite (and (distinct ((_ extract 1 1) C2) (_ bv0 1)) true) (_ bv1 32) (_ bv0 32)))))
 (let ((?x1306 (ite (and (distinct ((_ extract 5 5) C2) (_ bv0 1)) true) (_ bv5 32) (ite (and (distinct ((_ extract 4 4) C2) (_ bv0 1)) true) (_ bv4 32) (_ bv3 32)))))
 (let ((?x1611 (ite (and (distinct ((_ extract 8 8) C2) (_ bv0 1)) true) (_ bv8 32) (ite (and (distinct ((_ extract 7 7) C2) (_ bv0 1)) true) (_ bv7 32) (_ bv6 32)))))
 (let ((?x5556 (ite (and (distinct ((_ extract 10 9) C2) (_ bv0 2)) true) (ite (and (distinct ((_ extract 10 10) C2) (_ bv0 1)) true) (_ bv10 32) (_ bv9 32)) ?x1611)))
 (let ((?x6450 (ite (and (distinct ((_ extract 10 6) C2) (_ bv0 5)) true) ?x5556 (ite (and (distinct ((_ extract 5 3) C2) (_ bv0 3)) true) ?x1306 ?x6471))))
 (and (and (and (distinct C1 (_ bv0 50)) true) (= (bvand C1 (bvsub C1 (_ bv1 50))) (_ bv0 50))) (and (and (distinct C2 (_ bv0 11)) true) (= (bvand C2 (bvsub C2 (_ bv1 11))) (_ bv0 11))) (bvslt ?x6450 ?x1366) $x3265))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
