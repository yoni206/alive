(set-info :status unknown)
(declare-fun C2 () (_ BitVec 32))
(declare-fun %B () (_ BitVec 32))
(declare-fun %A () (_ BitVec 32))
(declare-fun C1 () (_ BitVec 32))
(declare-fun |ana_MaskedValueIsZero(%B, ((1 << (width(C2) - countLeadingZeros(((C2 - 1) ^ C2)))) - 1))| () (_ BitVec 1))
(assert
 (let (($x9741 (and (distinct (bvand (bvadd (bvand %A C1) %B) C2) (bvand (bvadd %A %B) C2)) true)))
 (let (($x7457 (= |ana_MaskedValueIsZero(%B, ((1 << (width(C2) - countLeadingZeros(((C2 - 1) ^ C2)))) - 1))| (_ bv1 1))))
 (let ((?x1436 (bvor (bvsub C2 (_ bv1 32)) C2)))
 (let (($x12957 (and (and (distinct ?x1436 (_ bv0 32)) true) (= (bvand (bvadd ?x1436 (_ bv1 32)) ?x1436) (_ bv0 32)) $x7457)))
 (let (($x17449 (or (= (bvand (bvadd C2 (_ bv1 32)) (bvsub (bvadd C2 (_ bv1 32)) (_ bv1 32))) (_ bv0 32)) $x12957)))
 (let ((?x18385 (ite (= ((_ extract 1 1) (bvxor (bvsub C2 (_ bv1 32)) C2)) (_ bv1 1)) (_ bv30 32) (ite (= ((_ extract 0 0) (bvxor (bvsub C2 (_ bv1 32)) C2)) (_ bv1 1)) (_ bv31 32) (_ bv32 32)))))
 (let ((?x10696 (ite (= ((_ extract 3 3) (bvxor (bvsub C2 (_ bv1 32)) C2)) (_ bv1 1)) (_ bv28 32) (ite (= ((_ extract 2 2) (bvxor (bvsub C2 (_ bv1 32)) C2)) (_ bv1 1)) (_ bv29 32) ?x18385))))
 (let ((?x5074 (ite (= ((_ extract 5 5) (bvxor (bvsub C2 (_ bv1 32)) C2)) (_ bv1 1)) (_ bv26 32) (ite (= ((_ extract 4 4) (bvxor (bvsub C2 (_ bv1 32)) C2)) (_ bv1 1)) (_ bv27 32) ?x10696))))
 (let ((?x22537 (ite (= ((_ extract 7 7) (bvxor (bvsub C2 (_ bv1 32)) C2)) (_ bv1 1)) (_ bv24 32) (ite (= ((_ extract 6 6) (bvxor (bvsub C2 (_ bv1 32)) C2)) (_ bv1 1)) (_ bv25 32) ?x5074))))
 (let ((?x995 (ite (= ((_ extract 9 9) (bvxor (bvsub C2 (_ bv1 32)) C2)) (_ bv1 1)) (_ bv22 32) (ite (= ((_ extract 8 8) (bvxor (bvsub C2 (_ bv1 32)) C2)) (_ bv1 1)) (_ bv23 32) ?x22537))))
 (let ((?x15387 (ite (= ((_ extract 11 11) (bvxor (bvsub C2 (_ bv1 32)) C2)) (_ bv1 1)) (_ bv20 32) (ite (= ((_ extract 10 10) (bvxor (bvsub C2 (_ bv1 32)) C2)) (_ bv1 1)) (_ bv21 32) ?x995))))
 (let ((?x2634 (ite (= ((_ extract 13 13) (bvxor (bvsub C2 (_ bv1 32)) C2)) (_ bv1 1)) (_ bv18 32) (ite (= ((_ extract 12 12) (bvxor (bvsub C2 (_ bv1 32)) C2)) (_ bv1 1)) (_ bv19 32) ?x15387))))
 (let ((?x6240 (ite (= ((_ extract 15 15) (bvxor (bvsub C2 (_ bv1 32)) C2)) (_ bv1 1)) (_ bv16 32) (ite (= ((_ extract 14 14) (bvxor (bvsub C2 (_ bv1 32)) C2)) (_ bv1 1)) (_ bv17 32) ?x2634))))
 (let ((?x3140 (ite (= ((_ extract 17 17) (bvxor (bvsub C2 (_ bv1 32)) C2)) (_ bv1 1)) (_ bv14 32) (ite (= ((_ extract 16 16) (bvxor (bvsub C2 (_ bv1 32)) C2)) (_ bv1 1)) (_ bv15 32) ?x6240))))
 (let ((?x14878 (ite (= ((_ extract 19 19) (bvxor (bvsub C2 (_ bv1 32)) C2)) (_ bv1 1)) (_ bv12 32) (ite (= ((_ extract 18 18) (bvxor (bvsub C2 (_ bv1 32)) C2)) (_ bv1 1)) (_ bv13 32) ?x3140))))
 (let ((?x12632 (ite (= ((_ extract 21 21) (bvxor (bvsub C2 (_ bv1 32)) C2)) (_ bv1 1)) (_ bv10 32) (ite (= ((_ extract 20 20) (bvxor (bvsub C2 (_ bv1 32)) C2)) (_ bv1 1)) (_ bv11 32) ?x14878))))
 (let ((?x12260 (ite (= ((_ extract 23 23) (bvxor (bvsub C2 (_ bv1 32)) C2)) (_ bv1 1)) (_ bv8 32) (ite (= ((_ extract 22 22) (bvxor (bvsub C2 (_ bv1 32)) C2)) (_ bv1 1)) (_ bv9 32) ?x12632))))
 (let ((?x6236 (ite (= ((_ extract 25 25) (bvxor (bvsub C2 (_ bv1 32)) C2)) (_ bv1 1)) (_ bv6 32) (ite (= ((_ extract 24 24) (bvxor (bvsub C2 (_ bv1 32)) C2)) (_ bv1 1)) (_ bv7 32) ?x12260))))
 (let ((?x16067 (ite (= ((_ extract 27 27) (bvxor (bvsub C2 (_ bv1 32)) C2)) (_ bv1 1)) (_ bv4 32) (ite (= ((_ extract 26 26) (bvxor (bvsub C2 (_ bv1 32)) C2)) (_ bv1 1)) (_ bv5 32) ?x6236))))
 (let ((?x10945 (ite (= ((_ extract 29 29) (bvxor (bvsub C2 (_ bv1 32)) C2)) (_ bv1 1)) (_ bv2 32) (ite (= ((_ extract 28 28) (bvxor (bvsub C2 (_ bv1 32)) C2)) (_ bv1 1)) (_ bv3 32) ?x16067))))
 (let ((?x2762 (ite (= ((_ extract 31 31) (bvxor (bvsub C2 (_ bv1 32)) C2)) (_ bv1 1)) (_ bv0 32) (ite (= ((_ extract 30 30) (bvxor (bvsub C2 (_ bv1 32)) C2)) (_ bv1 1)) (_ bv1 32) ?x10945))))
 (let (($x8920 (=> $x7457 (= (bvand %B (bvsub (bvshl (_ bv1 32) (bvsub (_ bv32 32) ?x2762)) (_ bv1 32))) (_ bv0 32)))))
 (and $x8920 (= (bvand C1 C2) C2) $x17449 $x9741))))))))))))))))))))))))
(check-sat)
