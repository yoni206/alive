(set-info :status unknown)
(declare-fun C2 () (_ BitVec 11))
(declare-fun C1 () (_ BitVec 42))
(assert
 (let ((?x4537 (ite (and (distinct ((_ extract 2 2) C2) (_ bv0 1)) true) (_ bv2 42) (ite (and (distinct ((_ extract 1 1) C2) (_ bv0 1)) true) (_ bv1 42) (_ bv0 42)))))
 (let ((?x1765 (ite (and (distinct ((_ extract 5 5) C2) (_ bv0 1)) true) (_ bv5 42) (ite (and (distinct ((_ extract 4 4) C2) (_ bv0 1)) true) (_ bv4 42) (_ bv3 42)))))
 (let ((?x3725 (ite (and (distinct ((_ extract 8 8) C2) (_ bv0 1)) true) (_ bv8 42) (ite (and (distinct ((_ extract 7 7) C2) (_ bv0 1)) true) (_ bv7 42) (_ bv6 42)))))
 (let ((?x3710 (ite (and (distinct ((_ extract 10 9) C2) (_ bv0 2)) true) (ite (and (distinct ((_ extract 10 10) C2) (_ bv0 1)) true) (_ bv10 42) (_ bv9 42)) ?x3725)))
 (let ((?x4618 (ite (and (distinct ((_ extract 10 6) C2) (_ bv0 5)) true) ?x3710 (ite (and (distinct ((_ extract 5 3) C2) (_ bv0 3)) true) ?x1765 ?x4537))))
 (let ((?x6343 (ite (and (distinct ((_ extract 2 2) C1) (_ bv0 1)) true) (_ bv2 42) (ite (and (distinct ((_ extract 1 1) C1) (_ bv0 1)) true) (_ bv1 42) (_ bv0 42)))))
 (let ((?x4988 (ite (and (distinct ((_ extract 5 5) C1) (_ bv0 1)) true) (_ bv5 42) (ite (and (distinct ((_ extract 4 4) C1) (_ bv0 1)) true) (_ bv4 42) (_ bv3 42)))))
 (let ((?x3714 (ite (and (distinct ((_ extract 8 8) C1) (_ bv0 1)) true) (_ bv8 42) (ite (and (distinct ((_ extract 7 7) C1) (_ bv0 1)) true) (_ bv7 42) (_ bv6 42)))))
 (let ((?x3588 (ite (and (distinct ((_ extract 10 9) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 10 10) C1) (_ bv0 1)) true) (_ bv10 42) (_ bv9 42)) ?x3714)))
 (let ((?x2947 (ite (and (distinct ((_ extract 10 6) C1) (_ bv0 5)) true) ?x3588 (ite (and (distinct ((_ extract 5 3) C1) (_ bv0 3)) true) ?x4988 ?x6343))))
 (let ((?x2933 (ite (and (distinct ((_ extract 13 13) C1) (_ bv0 1)) true) (_ bv13 42) (ite (and (distinct ((_ extract 12 12) C1) (_ bv0 1)) true) (_ bv12 42) (_ bv11 42)))))
 (let ((?x5063 (ite (and (distinct ((_ extract 15 14) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 15 15) C1) (_ bv0 1)) true) (_ bv15 42) (_ bv14 42)) ?x2933)))
 (let ((?x2224 (ite (and (distinct ((_ extract 18 18) C1) (_ bv0 1)) true) (_ bv18 42) (ite (and (distinct ((_ extract 17 17) C1) (_ bv0 1)) true) (_ bv17 42) (_ bv16 42)))))
 (let ((?x4628 (ite (and (distinct ((_ extract 20 19) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 20 20) C1) (_ bv0 1)) true) (_ bv20 42) (_ bv19 42)) ?x2224)))
 (let ((?x2701 (ite (and (distinct ((_ extract 20 11) C1) (_ bv0 10)) true) (ite (and (distinct ((_ extract 20 16) C1) (_ bv0 5)) true) ?x4628 ?x5063) ?x2947)))
 (let ((?x2257 (ite (and (distinct ((_ extract 23 23) C1) (_ bv0 1)) true) (_ bv23 42) (ite (and (distinct ((_ extract 22 22) C1) (_ bv0 1)) true) (_ bv22 42) (_ bv21 42)))))
 (let ((?x3577 (ite (and (distinct ((_ extract 26 26) C1) (_ bv0 1)) true) (_ bv26 42) (ite (and (distinct ((_ extract 25 25) C1) (_ bv0 1)) true) (_ bv25 42) (_ bv24 42)))))
 (let ((?x5792 (ite (and (distinct ((_ extract 29 29) C1) (_ bv0 1)) true) (_ bv29 42) (ite (and (distinct ((_ extract 28 28) C1) (_ bv0 1)) true) (_ bv28 42) (_ bv27 42)))))
 (let ((?x3222 (ite (and (distinct ((_ extract 31 30) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 31 31) C1) (_ bv0 1)) true) (_ bv31 42) (_ bv30 42)) ?x5792)))
 (let ((?x2437 (ite (and (distinct ((_ extract 31 27) C1) (_ bv0 5)) true) ?x3222 (ite (and (distinct ((_ extract 26 24) C1) (_ bv0 3)) true) ?x3577 ?x2257))))
 (let ((?x5248 (ite (and (distinct ((_ extract 34 34) C1) (_ bv0 1)) true) (_ bv34 42) (ite (and (distinct ((_ extract 33 33) C1) (_ bv0 1)) true) (_ bv33 42) (_ bv32 42)))))
 (let ((?x4265 (ite (and (distinct ((_ extract 36 35) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 36 36) C1) (_ bv0 1)) true) (_ bv36 42) (_ bv35 42)) ?x5248)))
 (let ((?x3010 (ite (and (distinct ((_ extract 39 39) C1) (_ bv0 1)) true) (_ bv39 42) (ite (and (distinct ((_ extract 38 38) C1) (_ bv0 1)) true) (_ bv38 42) (_ bv37 42)))))
 (let ((?x3339 (ite (and (distinct ((_ extract 41 40) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 41 41) C1) (_ bv0 1)) true) (_ bv41 42) (_ bv40 42)) ?x3010)))
 (let ((?x1347 (ite (and (distinct ((_ extract 41 32) C1) (_ bv0 10)) true) (ite (and (distinct ((_ extract 41 37) C1) (_ bv0 5)) true) ?x3339 ?x4265) ?x2437)))
 (let ((?x4669 (bvsub (ite (and (distinct ((_ extract 41 21) C1) (_ bv0 21)) true) ?x1347 ?x2701) ?x4618)))
 (let ((?x4573 (ite (and (distinct ((_ extract 2 2) C1) (_ bv0 1)) true) (_ bv2 32) (ite (and (distinct ((_ extract 1 1) C1) (_ bv0 1)) true) (_ bv1 32) (_ bv0 32)))))
 (let ((?x3490 (ite (and (distinct ((_ extract 5 5) C1) (_ bv0 1)) true) (_ bv5 32) (ite (and (distinct ((_ extract 4 4) C1) (_ bv0 1)) true) (_ bv4 32) (_ bv3 32)))))
 (let ((?x5309 (ite (and (distinct ((_ extract 8 8) C1) (_ bv0 1)) true) (_ bv8 32) (ite (and (distinct ((_ extract 7 7) C1) (_ bv0 1)) true) (_ bv7 32) (_ bv6 32)))))
 (let ((?x3560 (ite (and (distinct ((_ extract 10 9) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 10 10) C1) (_ bv0 1)) true) (_ bv10 32) (_ bv9 32)) ?x5309)))
 (let ((?x4937 (ite (and (distinct ((_ extract 10 6) C1) (_ bv0 5)) true) ?x3560 (ite (and (distinct ((_ extract 5 3) C1) (_ bv0 3)) true) ?x3490 ?x4573))))
 (let ((?x5676 (ite (and (distinct ((_ extract 13 13) C1) (_ bv0 1)) true) (_ bv13 32) (ite (and (distinct ((_ extract 12 12) C1) (_ bv0 1)) true) (_ bv12 32) (_ bv11 32)))))
 (let ((?x5646 (ite (and (distinct ((_ extract 15 14) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 15 15) C1) (_ bv0 1)) true) (_ bv15 32) (_ bv14 32)) ?x5676)))
 (let ((?x3888 (ite (and (distinct ((_ extract 18 18) C1) (_ bv0 1)) true) (_ bv18 32) (ite (and (distinct ((_ extract 17 17) C1) (_ bv0 1)) true) (_ bv17 32) (_ bv16 32)))))
 (let ((?x1687 (ite (and (distinct ((_ extract 20 19) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 20 20) C1) (_ bv0 1)) true) (_ bv20 32) (_ bv19 32)) ?x3888)))
 (let ((?x2672 (ite (and (distinct ((_ extract 20 11) C1) (_ bv0 10)) true) (ite (and (distinct ((_ extract 20 16) C1) (_ bv0 5)) true) ?x1687 ?x5646) ?x4937)))
 (let ((?x3415 (ite (and (distinct ((_ extract 23 23) C1) (_ bv0 1)) true) (_ bv23 32) (ite (and (distinct ((_ extract 22 22) C1) (_ bv0 1)) true) (_ bv22 32) (_ bv21 32)))))
 (let ((?x2472 (ite (and (distinct ((_ extract 26 26) C1) (_ bv0 1)) true) (_ bv26 32) (ite (and (distinct ((_ extract 25 25) C1) (_ bv0 1)) true) (_ bv25 32) (_ bv24 32)))))
 (let ((?x6832 (ite (and (distinct ((_ extract 29 29) C1) (_ bv0 1)) true) (_ bv29 32) (ite (and (distinct ((_ extract 28 28) C1) (_ bv0 1)) true) (_ bv28 32) (_ bv27 32)))))
 (let ((?x2210 (ite (and (distinct ((_ extract 31 30) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 31 31) C1) (_ bv0 1)) true) (_ bv31 32) (_ bv30 32)) ?x6832)))
 (let ((?x3049 (ite (and (distinct ((_ extract 31 27) C1) (_ bv0 5)) true) ?x2210 (ite (and (distinct ((_ extract 26 24) C1) (_ bv0 3)) true) ?x2472 ?x3415))))
 (let ((?x4694 (ite (and (distinct ((_ extract 34 34) C1) (_ bv0 1)) true) (_ bv34 32) (ite (and (distinct ((_ extract 33 33) C1) (_ bv0 1)) true) (_ bv33 32) (_ bv32 32)))))
 (let ((?x1250 (ite (and (distinct ((_ extract 36 35) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 36 36) C1) (_ bv0 1)) true) (_ bv36 32) (_ bv35 32)) ?x4694)))
 (let ((?x2676 (ite (and (distinct ((_ extract 39 39) C1) (_ bv0 1)) true) (_ bv39 32) (ite (and (distinct ((_ extract 38 38) C1) (_ bv0 1)) true) (_ bv38 32) (_ bv37 32)))))
 (let ((?x4245 (ite (and (distinct ((_ extract 41 40) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 41 41) C1) (_ bv0 1)) true) (_ bv41 32) (_ bv40 32)) ?x2676)))
 (let ((?x3257 (ite (and (distinct ((_ extract 41 32) C1) (_ bv0 10)) true) (ite (and (distinct ((_ extract 41 37) C1) (_ bv0 5)) true) ?x4245 ?x1250) ?x3049)))
 (let ((?x5021 (ite (and (distinct ((_ extract 2 2) C2) (_ bv0 1)) true) (_ bv2 32) (ite (and (distinct ((_ extract 1 1) C2) (_ bv0 1)) true) (_ bv1 32) (_ bv0 32)))))
 (let ((?x3240 (ite (and (distinct ((_ extract 5 5) C2) (_ bv0 1)) true) (_ bv5 32) (ite (and (distinct ((_ extract 4 4) C2) (_ bv0 1)) true) (_ bv4 32) (_ bv3 32)))))
 (let ((?x4262 (ite (and (distinct ((_ extract 8 8) C2) (_ bv0 1)) true) (_ bv8 32) (ite (and (distinct ((_ extract 7 7) C2) (_ bv0 1)) true) (_ bv7 32) (_ bv6 32)))))
 (let ((?x2588 (ite (and (distinct ((_ extract 10 9) C2) (_ bv0 2)) true) (ite (and (distinct ((_ extract 10 10) C2) (_ bv0 1)) true) (_ bv10 32) (_ bv9 32)) ?x4262)))
 (let ((?x2392 (ite (and (distinct ((_ extract 10 6) C2) (_ bv0 5)) true) ?x2588 (ite (and (distinct ((_ extract 5 3) C2) (_ bv0 3)) true) ?x3240 ?x5021))))
 (and (and (and (distinct C1 (_ bv0 42)) true) (= (bvand C1 (bvsub C1 (_ bv1 42))) (_ bv0 42))) (and (and (distinct C2 (_ bv0 11)) true) (= (bvand C2 (bvsub C2 (_ bv1 11))) (_ bv0 11))) (bvslt ?x2392 (ite (and (distinct ((_ extract 41 21) C1) (_ bv0 21)) true) ?x3257 ?x2672)) (not (bvult ?x4669 (_ bv42 42))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
