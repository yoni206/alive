(set-info :status unknown)
(declare-fun mem0 () (_ BitVec 8))
(declare-fun %y () (_ BitVec 3))
(declare-fun %p2 () (_ BitVec 64))
(declare-fun idx () (_ BitVec 64))
(declare-fun %x () (_ BitVec 3))
(declare-fun %p1 () (_ BitVec 64))
(declare-fun |ana_equivalentAddressValues(%p1, %p2)| () (_ BitVec 1))
(assert
 (let ((?x284 (ite (and (and (distinct %p2 (_ bv0 64)) true) (or true true) (= idx %p2)) (concat ((_ extract 7 3) mem0) ((_ extract 2 0) %y)) mem0)))
 (let ((?x4399 (ite (and (and (distinct %p1 (_ bv0 64)) true) (or true true) (= idx %p1)) (concat ((_ extract 7 3) mem0) ((_ extract 2 0) %x)) mem0)))
 (let ((?x8029 (ite (and (and (distinct %p1 (_ bv0 64)) true) (or true true) (= %p2 %p1)) (concat ((_ extract 7 3) mem0) ((_ extract 2 0) %x)) mem0)))
 (let (($x16990 (or true true)))
 (let (($x5546 (and (distinct %p2 (_ bv0 64)) true)))
 (let (($x17212 (and (distinct %p1 (_ bv0 64)) true)))
 (let ((?x12694 (ite (and $x17212 $x16990 $x5546 $x16990 (= idx %p2)) (concat ((_ extract 7 3) ?x8029) ((_ extract 2 0) %y)) ?x4399)))
 (let (($x12673 (= |ana_equivalentAddressValues(%p1, %p2)| (_ bv1 1))))
 (and (=> $x12673 (= %p1 %p2)) $x12673 (and (distinct ?x12694 ?x284) true)))))))))))
(check-sat)
