(set-info :status unknown)
(declare-fun mem0 () (_ BitVec 8))
(declare-fun %y () (_ BitVec 26))
(declare-fun %p2 () (_ BitVec 64))
(declare-fun idx () (_ BitVec 64))
(declare-fun %x () (_ BitVec 26))
(declare-fun %p1 () (_ BitVec 64))
(declare-fun |ana_equivalentAddressValues(%p1, %p2)| () (_ BitVec 1))
(assert
 (let ((?x15905 (ite (and (and (distinct %p2 (_ bv0 64)) true) (or true true) (= idx %p2)) (concat ((_ extract 7 2) mem0) ((_ extract 1 0) %y)) mem0)))
 (let (($x20865 (or true true)))
 (let (($x389 (and (distinct %p2 (_ bv0 64)) true)))
 (let ((?x3641 (ite (and $x389 $x20865 (= idx (bvadd (bvadd %p2 (_ bv1 64)) (_ bv0 64)))) ((_ extract 9 2) %y) ?x15905)))
 (let ((?x17981 (ite (and $x389 $x20865 (= idx (bvadd (bvadd %p2 (_ bv1 64)) (_ bv1 64)))) ((_ extract 17 10) %y) ?x3641)))
 (let ((?x1702 (ite (and $x389 $x20865 (= idx (bvadd (bvadd %p2 (_ bv1 64)) (_ bv2 64)))) ((_ extract 25 18) %y) ?x17981)))
 (let ((?x11371 (ite (and (and (distinct %p1 (_ bv0 64)) true) $x20865 (= idx %p1)) (concat ((_ extract 7 2) mem0) ((_ extract 1 0) %x)) mem0)))
 (let (($x17212 (and (distinct %p1 (_ bv0 64)) true)))
 (let ((?x1462 (ite (and $x17212 $x20865 (= idx (bvadd (bvadd %p1 (_ bv1 64)) (_ bv0 64)))) ((_ extract 9 2) %x) ?x11371)))
 (let ((?x7848 (ite (and $x17212 $x20865 (= idx (bvadd (bvadd %p1 (_ bv1 64)) (_ bv1 64)))) ((_ extract 17 10) %x) ?x1462)))
 (let ((?x23767 (ite (and $x17212 $x20865 (= idx (bvadd (bvadd %p1 (_ bv1 64)) (_ bv2 64)))) ((_ extract 25 18) %x) ?x7848)))
 (let ((?x7172 (ite (and $x17212 $x20865 (= %p2 %p1)) (concat ((_ extract 7 2) mem0) ((_ extract 1 0) %x)) mem0)))
 (let ((?x6727 (ite (and $x17212 $x20865 (= %p2 (bvadd (bvadd %p1 (_ bv1 64)) (_ bv0 64)))) ((_ extract 9 2) %x) ?x7172)))
 (let ((?x13552 (ite (and $x17212 $x20865 (= %p2 (bvadd (bvadd %p1 (_ bv1 64)) (_ bv1 64)))) ((_ extract 17 10) %x) ?x6727)))
 (let ((?x10971 (ite (and $x17212 $x20865 (= %p2 (bvadd (bvadd %p1 (_ bv1 64)) (_ bv2 64)))) ((_ extract 25 18) %x) ?x13552)))
 (let ((?x21710 (ite (and $x17212 $x20865 $x389 $x20865 (= idx %p2)) (concat ((_ extract 7 2) ?x10971) ((_ extract 1 0) %y)) ?x23767)))
 (let ((?x12673 (ite (and $x17212 $x20865 $x389 $x20865 (= idx (bvadd (bvadd %p2 (_ bv1 64)) (_ bv0 64)))) ((_ extract 9 2) %y) ?x21710)))
 (let ((?x14457 (ite (and $x17212 $x20865 $x389 $x20865 (= idx (bvadd (bvadd %p2 (_ bv1 64)) (_ bv1 64)))) ((_ extract 17 10) %y) ?x12673)))
 (let ((?x18561 (ite (and $x17212 $x20865 $x389 $x20865 (= idx (bvadd (bvadd %p2 (_ bv1 64)) (_ bv2 64)))) ((_ extract 25 18) %y) ?x14457)))
 (let (($x17592 (= |ana_equivalentAddressValues(%p1, %p2)| (_ bv1 1))))
 (and (=> $x17592 (= %p1 %p2)) $x17592 (and (distinct ?x18561 ?x1702) true)))))))))))))))))))))))
(check-sat)
