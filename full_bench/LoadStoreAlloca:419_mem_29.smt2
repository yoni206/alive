(set-info :status unknown)
(declare-fun mem0 () (_ BitVec 8))
(declare-fun %x () (_ BitVec 30))
(declare-fun %p1 () (_ BitVec 64))
(declare-fun idx () (_ BitVec 64))
(declare-fun |ana_equivalentAddressValues(%p1, %p2)| () (_ BitVec 1))
(declare-fun %p2 () (_ BitVec 64))
(assert
 (let ((?x2376 (concat ((_ extract 7 6) mem0) ((_ extract 5 0) %x))))
 (let ((?x10679 (ite (and (and (distinct %p1 (_ bv0 64)) true) (or true true) (= idx %p1)) ?x2376 mem0)))
 (let ((?x21807 ((_ extract 13 6) %x)))
 (let (($x10275 (or true true)))
 (let (($x7310 (and (distinct %p1 (_ bv0 64)) true)))
 (let ((?x4996 (ite (and $x7310 $x10275 (= idx (bvadd (bvadd %p1 (_ bv1 64)) (_ bv0 64)))) ?x21807 ?x10679)))
 (let ((?x17396 ((_ extract 21 14) %x)))
 (let ((?x17832 (ite (and $x7310 $x10275 (= idx (bvadd (bvadd %p1 (_ bv1 64)) (_ bv1 64)))) ?x17396 ?x4996)))
 (let ((?x10245 ((_ extract 29 22) %x)))
 (let ((?x18459 (ite (and $x7310 $x10275 (= idx (bvadd (bvadd %p1 (_ bv1 64)) (_ bv2 64)))) ?x10245 ?x17832)))
 (let (($x19414 (= |ana_equivalentAddressValues(%p1, %p2)| (_ bv1 1))))
 (and (=> $x19414 (= %p1 %p2)) $x19414 (and (distinct ?x18459 ?x18459) true))))))))))))))
(check-sat)
