(set-info :status unknown)
(declare-fun mem0 () (_ BitVec 8))
(declare-fun %y () (_ BitVec 1))
(declare-fun %p2 () (_ BitVec 64))
(declare-fun idx () (_ BitVec 64))
(declare-fun %x () (_ BitVec 1))
(declare-fun %p1 () (_ BitVec 64))
(declare-fun |ana_equivalentAddressValues(%p1, %p2)| () (_ BitVec 1))
(assert
 (let ((?x284 (ite (and (and (distinct %p2 (_ bv0 64)) true) (or true true) (= idx %p2)) (concat ((_ extract 7 1) mem0) ((_ extract 0 0) %y)) mem0)))
 (let ((?x5546 (ite (and (and (distinct %p1 (_ bv0 64)) true) (or true true) (= idx %p1)) (concat ((_ extract 7 1) mem0) ((_ extract 0 0) %x)) mem0)))
 (let ((?x5036 (ite (and (and (distinct %p1 (_ bv0 64)) true) (or true true) (= %p2 %p1)) (concat ((_ extract 7 1) mem0) ((_ extract 0 0) %x)) mem0)))
 (let (($x2401 (or true true)))
 (let (($x8887 (and (distinct %p2 (_ bv0 64)) true)))
 (let (($x17212 (and (distinct %p1 (_ bv0 64)) true)))
 (let ((?x5441 (ite (and $x17212 $x2401 $x8887 $x2401 (= idx %p2)) (concat ((_ extract 7 1) ?x5036) ((_ extract 0 0) %y)) ?x5546)))
 (let (($x14457 (= |ana_equivalentAddressValues(%p1, %p2)| (_ bv1 1))))
 (and (=> $x14457 (= %p1 %p2)) $x14457 (and (distinct ?x5441 ?x284) true)))))))))))
(check-sat)
