(set-info :status unknown)
(declare-fun C2 () (_ BitVec 11))
(declare-fun C1 () (_ BitVec 10))
(assert
 (let ((?x14646 (ite (and (distinct ((_ extract 2 2) C2) (_ bv0 1)) true) (_ bv2 10) (ite (and (distinct ((_ extract 1 1) C2) (_ bv0 1)) true) (_ bv1 10) (_ bv0 10)))))
 (let ((?x11067 (ite (and (distinct ((_ extract 5 5) C2) (_ bv0 1)) true) (_ bv5 10) (ite (and (distinct ((_ extract 4 4) C2) (_ bv0 1)) true) (_ bv4 10) (_ bv3 10)))))
 (let ((?x14819 (ite (and (distinct ((_ extract 8 8) C2) (_ bv0 1)) true) (_ bv8 10) (ite (and (distinct ((_ extract 7 7) C2) (_ bv0 1)) true) (_ bv7 10) (_ bv6 10)))))
 (let ((?x9252 (ite (and (distinct ((_ extract 10 9) C2) (_ bv0 2)) true) (ite (and (distinct ((_ extract 10 10) C2) (_ bv0 1)) true) (_ bv10 10) (_ bv9 10)) ?x14819)))
 (let ((?x759 (ite (and (distinct ((_ extract 10 6) C2) (_ bv0 5)) true) ?x9252 (ite (and (distinct ((_ extract 5 3) C2) (_ bv0 3)) true) ?x11067 ?x14646))))
 (let ((?x4436 (ite (and (distinct ((_ extract 2 2) C1) (_ bv0 1)) true) (_ bv2 10) (ite (and (distinct ((_ extract 1 1) C1) (_ bv0 1)) true) (_ bv1 10) (_ bv0 10)))))
 (let ((?x23906 (ite (and (distinct ((_ extract 4 3) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 4 4) C1) (_ bv0 1)) true) (_ bv4 10) (_ bv3 10)) ?x4436)))
 (let ((?x18864 (ite (and (distinct ((_ extract 7 7) C1) (_ bv0 1)) true) (_ bv7 10) (ite (and (distinct ((_ extract 6 6) C1) (_ bv0 1)) true) (_ bv6 10) (_ bv5 10)))))
 (let ((?x3985 (ite (and (distinct ((_ extract 9 8) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 9 9) C1) (_ bv0 1)) true) (_ bv9 10) (_ bv8 10)) ?x18864)))
 (let ((?x5747 (bvsub (ite (and (distinct ((_ extract 9 5) C1) (_ bv0 5)) true) ?x3985 ?x23906) ?x759)))
 (let ((?x14680 (ite (and (distinct ((_ extract 2 2) C1) (_ bv0 1)) true) (_ bv2 32) (ite (and (distinct ((_ extract 1 1) C1) (_ bv0 1)) true) (_ bv1 32) (_ bv0 32)))))
 (let ((?x21829 (ite (and (distinct ((_ extract 4 3) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 4 4) C1) (_ bv0 1)) true) (_ bv4 32) (_ bv3 32)) ?x14680)))
 (let ((?x11895 (ite (and (distinct ((_ extract 7 7) C1) (_ bv0 1)) true) (_ bv7 32) (ite (and (distinct ((_ extract 6 6) C1) (_ bv0 1)) true) (_ bv6 32) (_ bv5 32)))))
 (let ((?x23442 (ite (and (distinct ((_ extract 9 8) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 9 9) C1) (_ bv0 1)) true) (_ bv9 32) (_ bv8 32)) ?x11895)))
 (let ((?x14376 (ite (and (distinct ((_ extract 2 2) C2) (_ bv0 1)) true) (_ bv2 32) (ite (and (distinct ((_ extract 1 1) C2) (_ bv0 1)) true) (_ bv1 32) (_ bv0 32)))))
 (let ((?x10275 (ite (and (distinct ((_ extract 5 5) C2) (_ bv0 1)) true) (_ bv5 32) (ite (and (distinct ((_ extract 4 4) C2) (_ bv0 1)) true) (_ bv4 32) (_ bv3 32)))))
 (let ((?x21272 (ite (and (distinct ((_ extract 8 8) C2) (_ bv0 1)) true) (_ bv8 32) (ite (and (distinct ((_ extract 7 7) C2) (_ bv0 1)) true) (_ bv7 32) (_ bv6 32)))))
 (let ((?x9089 (ite (and (distinct ((_ extract 10 9) C2) (_ bv0 2)) true) (ite (and (distinct ((_ extract 10 10) C2) (_ bv0 1)) true) (_ bv10 32) (_ bv9 32)) ?x21272)))
 (let ((?x14416 (ite (and (distinct ((_ extract 10 6) C2) (_ bv0 5)) true) ?x9089 (ite (and (distinct ((_ extract 5 3) C2) (_ bv0 3)) true) ?x10275 ?x14376))))
 (and (and (and (distinct C1 (_ bv0 10)) true) (= (bvand C1 (bvsub C1 (_ bv1 10))) (_ bv0 10))) (and (and (distinct C2 (_ bv0 11)) true) (= (bvand C2 (bvsub C2 (_ bv1 11))) (_ bv0 11))) (bvslt ?x14416 (ite (and (distinct ((_ extract 9 5) C1) (_ bv0 5)) true) ?x23442 ?x21829)) (not (bvult ?x5747 (_ bv10 10))))))))))))))))))))))))
(check-sat)
