(set-info :status unknown)
(declare-fun %Y () (_ BitVec 11))
(declare-fun C2 () (_ BitVec 11))
(declare-fun C1 () (_ BitVec 24))
(declare-fun %X () (_ BitVec 24))
(assert
 (let ((?x15230 (ite (and (distinct ((_ extract 2 2) C2) (_ bv0 1)) true) (_ bv2 24) (ite (and (distinct ((_ extract 1 1) C2) (_ bv0 1)) true) (_ bv1 24) (_ bv0 24)))))
 (let ((?x1753 (ite (and (distinct ((_ extract 5 5) C2) (_ bv0 1)) true) (_ bv5 24) (ite (and (distinct ((_ extract 4 4) C2) (_ bv0 1)) true) (_ bv4 24) (_ bv3 24)))))
 (let ((?x11297 (ite (and (distinct ((_ extract 8 8) C2) (_ bv0 1)) true) (_ bv8 24) (ite (and (distinct ((_ extract 7 7) C2) (_ bv0 1)) true) (_ bv7 24) (_ bv6 24)))))
 (let ((?x11957 (ite (and (distinct ((_ extract 10 9) C2) (_ bv0 2)) true) (ite (and (distinct ((_ extract 10 10) C2) (_ bv0 1)) true) (_ bv10 24) (_ bv9 24)) ?x11297)))
 (let ((?x15613 (ite (and (distinct ((_ extract 10 6) C2) (_ bv0 5)) true) ?x11957 (ite (and (distinct ((_ extract 5 3) C2) (_ bv0 3)) true) ?x1753 ?x15230))))
 (let ((?x19906 (ite (and (distinct ((_ extract 2 2) C1) (_ bv0 1)) true) (_ bv2 24) (ite (and (distinct ((_ extract 1 1) C1) (_ bv0 1)) true) (_ bv1 24) (_ bv0 24)))))
 (let ((?x5498 (ite (and (distinct ((_ extract 5 5) C1) (_ bv0 1)) true) (_ bv5 24) (ite (and (distinct ((_ extract 4 4) C1) (_ bv0 1)) true) (_ bv4 24) (_ bv3 24)))))
 (let ((?x7410 (ite (and (distinct ((_ extract 8 8) C1) (_ bv0 1)) true) (_ bv8 24) (ite (and (distinct ((_ extract 7 7) C1) (_ bv0 1)) true) (_ bv7 24) (_ bv6 24)))))
 (let ((?x1668 (ite (and (distinct ((_ extract 11 11) C1) (_ bv0 1)) true) (_ bv11 24) (ite (and (distinct ((_ extract 10 10) C1) (_ bv0 1)) true) (_ bv10 24) (_ bv9 24)))))
 (let ((?x12619 (ite (and (distinct ((_ extract 11 6) C1) (_ bv0 6)) true) (ite (and (distinct ((_ extract 11 9) C1) (_ bv0 3)) true) ?x1668 ?x7410) (ite (and (distinct ((_ extract 5 3) C1) (_ bv0 3)) true) ?x5498 ?x19906))))
 (let ((?x1595 (ite (and (distinct ((_ extract 14 14) C1) (_ bv0 1)) true) (_ bv14 24) (ite (and (distinct ((_ extract 13 13) C1) (_ bv0 1)) true) (_ bv13 24) (_ bv12 24)))))
 (let ((?x6935 (ite (and (distinct ((_ extract 17 17) C1) (_ bv0 1)) true) (_ bv17 24) (ite (and (distinct ((_ extract 16 16) C1) (_ bv0 1)) true) (_ bv16 24) (_ bv15 24)))))
 (let ((?x2882 (ite (and (distinct ((_ extract 20 20) C1) (_ bv0 1)) true) (_ bv20 24) (ite (and (distinct ((_ extract 19 19) C1) (_ bv0 1)) true) (_ bv19 24) (_ bv18 24)))))
 (let ((?x11190 (ite (and (distinct ((_ extract 23 23) C1) (_ bv0 1)) true) (_ bv23 24) (ite (and (distinct ((_ extract 22 22) C1) (_ bv0 1)) true) (_ bv22 24) (_ bv21 24)))))
 (let ((?x22751 (ite (and (distinct ((_ extract 23 18) C1) (_ bv0 6)) true) (ite (and (distinct ((_ extract 23 21) C1) (_ bv0 3)) true) ?x11190 ?x2882) (ite (and (distinct ((_ extract 17 15) C1) (_ bv0 3)) true) ?x6935 ?x1595))))
 (let ((?x13743 (bvsub (ite (and (distinct ((_ extract 23 12) C1) (_ bv0 12)) true) ?x22751 ?x12619) ?x15613)))
 (let ((?x748 (bvand %X C1)))
 (let (($x12540 (and (distinct (ite (= (ite (= ?x748 (_ bv0 24)) (_ bv1 1) (_ bv0 1)) (_ bv1 1)) %Y (bvor %Y C2)) (bvor ((_ extract 10 0) (bvlshr ?x748 ?x13743)) %Y)) true)))
 (let ((?x9279 (ite (and (distinct ((_ extract 2 2) C1) (_ bv0 1)) true) (_ bv2 32) (ite (and (distinct ((_ extract 1 1) C1) (_ bv0 1)) true) (_ bv1 32) (_ bv0 32)))))
 (let ((?x5204 (ite (and (distinct ((_ extract 5 5) C1) (_ bv0 1)) true) (_ bv5 32) (ite (and (distinct ((_ extract 4 4) C1) (_ bv0 1)) true) (_ bv4 32) (_ bv3 32)))))
 (let ((?x9788 (ite (and (distinct ((_ extract 8 8) C1) (_ bv0 1)) true) (_ bv8 32) (ite (and (distinct ((_ extract 7 7) C1) (_ bv0 1)) true) (_ bv7 32) (_ bv6 32)))))
 (let ((?x10466 (ite (and (distinct ((_ extract 11 11) C1) (_ bv0 1)) true) (_ bv11 32) (ite (and (distinct ((_ extract 10 10) C1) (_ bv0 1)) true) (_ bv10 32) (_ bv9 32)))))
 (let ((?x10993 (ite (and (distinct ((_ extract 11 6) C1) (_ bv0 6)) true) (ite (and (distinct ((_ extract 11 9) C1) (_ bv0 3)) true) ?x10466 ?x9788) (ite (and (distinct ((_ extract 5 3) C1) (_ bv0 3)) true) ?x5204 ?x9279))))
 (let ((?x8195 (ite (and (distinct ((_ extract 14 14) C1) (_ bv0 1)) true) (_ bv14 32) (ite (and (distinct ((_ extract 13 13) C1) (_ bv0 1)) true) (_ bv13 32) (_ bv12 32)))))
 (let ((?x4028 (ite (and (distinct ((_ extract 17 17) C1) (_ bv0 1)) true) (_ bv17 32) (ite (and (distinct ((_ extract 16 16) C1) (_ bv0 1)) true) (_ bv16 32) (_ bv15 32)))))
 (let ((?x18934 (ite (and (distinct ((_ extract 20 20) C1) (_ bv0 1)) true) (_ bv20 32) (ite (and (distinct ((_ extract 19 19) C1) (_ bv0 1)) true) (_ bv19 32) (_ bv18 32)))))
 (let ((?x7502 (ite (and (distinct ((_ extract 23 23) C1) (_ bv0 1)) true) (_ bv23 32) (ite (and (distinct ((_ extract 22 22) C1) (_ bv0 1)) true) (_ bv22 32) (_ bv21 32)))))
 (let ((?x6721 (ite (and (distinct ((_ extract 23 18) C1) (_ bv0 6)) true) (ite (and (distinct ((_ extract 23 21) C1) (_ bv0 3)) true) ?x7502 ?x18934) (ite (and (distinct ((_ extract 17 15) C1) (_ bv0 3)) true) ?x4028 ?x8195))))
 (let ((?x8971 (ite (and (distinct ((_ extract 2 2) C2) (_ bv0 1)) true) (_ bv2 32) (ite (and (distinct ((_ extract 1 1) C2) (_ bv0 1)) true) (_ bv1 32) (_ bv0 32)))))
 (let ((?x11147 (ite (and (distinct ((_ extract 5 5) C2) (_ bv0 1)) true) (_ bv5 32) (ite (and (distinct ((_ extract 4 4) C2) (_ bv0 1)) true) (_ bv4 32) (_ bv3 32)))))
 (let ((?x19167 (ite (and (distinct ((_ extract 8 8) C2) (_ bv0 1)) true) (_ bv8 32) (ite (and (distinct ((_ extract 7 7) C2) (_ bv0 1)) true) (_ bv7 32) (_ bv6 32)))))
 (let ((?x18900 (ite (and (distinct ((_ extract 10 9) C2) (_ bv0 2)) true) (ite (and (distinct ((_ extract 10 10) C2) (_ bv0 1)) true) (_ bv10 32) (_ bv9 32)) ?x19167)))
 (let ((?x16544 (ite (and (distinct ((_ extract 10 6) C2) (_ bv0 5)) true) ?x18900 (ite (and (distinct ((_ extract 5 3) C2) (_ bv0 3)) true) ?x11147 ?x8971))))
 (and (and (and (distinct C1 (_ bv0 24)) true) (= (bvand C1 (bvsub C1 (_ bv1 24))) (_ bv0 24))) (and (and (distinct C2 (_ bv0 11)) true) (= (bvand C2 (bvsub C2 (_ bv1 11))) (_ bv0 11))) (bvslt ?x16544 (ite (and (distinct ((_ extract 23 12) C1) (_ bv0 12)) true) ?x6721 ?x10993)) $x12540)))))))))))))))))))))))))))))))))))
(check-sat)
