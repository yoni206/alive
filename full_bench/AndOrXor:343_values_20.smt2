(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C2 () (_ BitVec 22))
(declare-fun %B () (_ BitVec 22))
(declare-fun %A () (_ BitVec 22))
(declare-fun C1 () (_ BitVec 22))
(declare-fun |ana_MaskedValueIsZero(%B, ((1 << (width(C2) - countLeadingZeros(((C2 - 1) ^ C2)))) - 1))| () (_ BitVec 1))
(assert
 (let (($x139484 (and (distinct (bvand (bvadd (bvand %A C1) %B) C2) (bvand (bvadd %A %B) C2)) true)))
 (let (($x131713 (= |ana_MaskedValueIsZero(%B, ((1 << (width(C2) - countLeadingZeros(((C2 - 1) ^ C2)))) - 1))| (_ bv1 1))))
 (let ((?x17211 (bvsub C2 (_ bv1 22))))
 (let ((?x143719 (bvor ?x17211 C2)))
 (let (($x145021 (and (and (distinct ?x143719 (_ bv0 22)) true) (= (bvand (bvadd ?x143719 (_ bv1 22)) ?x143719) (_ bv0 22)) $x131713)))
 (let (($x145012 (or (= (bvand (bvadd C2 (_ bv1 22)) (bvsub (bvadd C2 (_ bv1 22)) (_ bv1 22))) (_ bv0 22)) $x145021)))
 (let ((?x130041 (bvand C1 C2)))
 (let (($x144365 (= ?x130041 C2)))
 (let ((?x139564 (ite (= ((_ extract 1 1) (bvxor ?x17211 C2)) (_ bv1 1)) (_ bv20 22) (ite (= ((_ extract 0 0) (bvxor ?x17211 C2)) (_ bv1 1)) (_ bv21 22) (_ bv22 22)))))
 (let ((?x143675 (ite (= ((_ extract 3 3) (bvxor ?x17211 C2)) (_ bv1 1)) (_ bv18 22) (ite (= ((_ extract 2 2) (bvxor ?x17211 C2)) (_ bv1 1)) (_ bv19 22) ?x139564))))
 (let ((?x137080 (ite (= ((_ extract 5 5) (bvxor ?x17211 C2)) (_ bv1 1)) (_ bv16 22) (ite (= ((_ extract 4 4) (bvxor ?x17211 C2)) (_ bv1 1)) (_ bv17 22) ?x143675))))
 (let ((?x136139 (ite (= ((_ extract 7 7) (bvxor ?x17211 C2)) (_ bv1 1)) (_ bv14 22) (ite (= ((_ extract 6 6) (bvxor ?x17211 C2)) (_ bv1 1)) (_ bv15 22) ?x137080))))
 (let ((?x138665 (ite (= ((_ extract 9 9) (bvxor ?x17211 C2)) (_ bv1 1)) (_ bv12 22) (ite (= ((_ extract 8 8) (bvxor ?x17211 C2)) (_ bv1 1)) (_ bv13 22) ?x136139))))
 (let ((?x143714 (ite (= ((_ extract 11 11) (bvxor ?x17211 C2)) (_ bv1 1)) (_ bv10 22) (ite (= ((_ extract 10 10) (bvxor ?x17211 C2)) (_ bv1 1)) (_ bv11 22) ?x138665))))
 (let ((?x145041 (ite (= ((_ extract 13 13) (bvxor ?x17211 C2)) (_ bv1 1)) (_ bv8 22) (ite (= ((_ extract 12 12) (bvxor ?x17211 C2)) (_ bv1 1)) (_ bv9 22) ?x143714))))
 (let ((?x139995 (ite (= ((_ extract 15 15) (bvxor ?x17211 C2)) (_ bv1 1)) (_ bv6 22) (ite (= ((_ extract 14 14) (bvxor ?x17211 C2)) (_ bv1 1)) (_ bv7 22) ?x145041))))
 (let ((?x139802 (ite (= ((_ extract 17 17) (bvxor ?x17211 C2)) (_ bv1 1)) (_ bv4 22) (ite (= ((_ extract 16 16) (bvxor ?x17211 C2)) (_ bv1 1)) (_ bv5 22) ?x139995))))
 (let ((?x141448 (ite (= ((_ extract 19 19) (bvxor ?x17211 C2)) (_ bv1 1)) (_ bv2 22) (ite (= ((_ extract 18 18) (bvxor ?x17211 C2)) (_ bv1 1)) (_ bv3 22) ?x139802))))
 (let ((?x145014 (ite (= ((_ extract 21 21) (bvxor ?x17211 C2)) (_ bv1 1)) (_ bv0 22) (ite (= ((_ extract 20 20) (bvxor ?x17211 C2)) (_ bv1 1)) (_ bv1 22) ?x141448))))
 (let (($x145028 (=> $x131713 (= (bvand %B (bvsub (bvshl (_ bv1 22) (bvsub (_ bv22 22) ?x145014)) (_ bv1 22))) (_ bv0 22)))))
 (and $x145028 $x144365 $x145012 $x139484))))))))))))))))))))))
(check-sat)
