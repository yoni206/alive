(set-info :status unknown)
(declare-fun %Y () (_ BitVec 11))
(declare-fun C2 () (_ BitVec 11))
(declare-fun C1 () (_ BitVec 10))
(declare-fun %X () (_ BitVec 10))
(assert
 (let ((?x2210 (ite (and (distinct ((_ extract 2 2) C2) (_ bv0 1)) true) (_ bv2 10) (ite (and (distinct ((_ extract 1 1) C2) (_ bv0 1)) true) (_ bv1 10) (_ bv0 10)))))
 (let ((?x2305 (ite (and (distinct ((_ extract 5 5) C2) (_ bv0 1)) true) (_ bv5 10) (ite (and (distinct ((_ extract 4 4) C2) (_ bv0 1)) true) (_ bv4 10) (_ bv3 10)))))
 (let ((?x3332 (ite (and (distinct ((_ extract 8 8) C2) (_ bv0 1)) true) (_ bv8 10) (ite (and (distinct ((_ extract 7 7) C2) (_ bv0 1)) true) (_ bv7 10) (_ bv6 10)))))
 (let ((?x3666 (ite (and (distinct ((_ extract 10 9) C2) (_ bv0 2)) true) (ite (and (distinct ((_ extract 10 10) C2) (_ bv0 1)) true) (_ bv10 10) (_ bv9 10)) ?x3332)))
 (let ((?x5190 (ite (and (distinct ((_ extract 10 6) C2) (_ bv0 5)) true) ?x3666 (ite (and (distinct ((_ extract 5 3) C2) (_ bv0 3)) true) ?x2305 ?x2210))))
 (let ((?x2100 (ite (and (distinct ((_ extract 2 2) C1) (_ bv0 1)) true) (_ bv2 10) (ite (and (distinct ((_ extract 1 1) C1) (_ bv0 1)) true) (_ bv1 10) (_ bv0 10)))))
 (let ((?x1288 (ite (and (distinct ((_ extract 4 3) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 4 4) C1) (_ bv0 1)) true) (_ bv4 10) (_ bv3 10)) ?x2100)))
 (let ((?x3383 (ite (and (distinct ((_ extract 7 7) C1) (_ bv0 1)) true) (_ bv7 10) (ite (and (distinct ((_ extract 6 6) C1) (_ bv0 1)) true) (_ bv6 10) (_ bv5 10)))))
 (let ((?x3470 (ite (and (distinct ((_ extract 9 8) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 9 9) C1) (_ bv0 1)) true) (_ bv9 10) (_ bv8 10)) ?x3383)))
 (let ((?x1628 (bvsub (ite (and (distinct ((_ extract 9 5) C1) (_ bv0 5)) true) ?x3470 ?x1288) ?x5190)))
 (let ((?x4139 (bvand %X C1)))
 (let (($x2716 (and (distinct (ite (= (ite (= ?x4139 (_ bv0 10)) (_ bv1 1) (_ bv0 1)) (_ bv1 1)) %Y (bvor %Y C2)) (bvor ((_ zero_extend 1) (bvlshr ?x4139 ?x1628)) %Y)) true)))
 (let ((?x3188 (ite (and (distinct ((_ extract 2 2) C1) (_ bv0 1)) true) (_ bv2 32) (ite (and (distinct ((_ extract 1 1) C1) (_ bv0 1)) true) (_ bv1 32) (_ bv0 32)))))
 (let ((?x4681 (ite (and (distinct ((_ extract 4 3) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 4 4) C1) (_ bv0 1)) true) (_ bv4 32) (_ bv3 32)) ?x3188)))
 (let ((?x5245 (ite (and (distinct ((_ extract 7 7) C1) (_ bv0 1)) true) (_ bv7 32) (ite (and (distinct ((_ extract 6 6) C1) (_ bv0 1)) true) (_ bv6 32) (_ bv5 32)))))
 (let ((?x2899 (ite (and (distinct ((_ extract 9 8) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 9 9) C1) (_ bv0 1)) true) (_ bv9 32) (_ bv8 32)) ?x5245)))
 (let ((?x3869 (ite (and (distinct ((_ extract 2 2) C2) (_ bv0 1)) true) (_ bv2 32) (ite (and (distinct ((_ extract 1 1) C2) (_ bv0 1)) true) (_ bv1 32) (_ bv0 32)))))
 (let ((?x4541 (ite (and (distinct ((_ extract 5 5) C2) (_ bv0 1)) true) (_ bv5 32) (ite (and (distinct ((_ extract 4 4) C2) (_ bv0 1)) true) (_ bv4 32) (_ bv3 32)))))
 (let ((?x1872 (ite (and (distinct ((_ extract 8 8) C2) (_ bv0 1)) true) (_ bv8 32) (ite (and (distinct ((_ extract 7 7) C2) (_ bv0 1)) true) (_ bv7 32) (_ bv6 32)))))
 (let ((?x2860 (ite (and (distinct ((_ extract 10 9) C2) (_ bv0 2)) true) (ite (and (distinct ((_ extract 10 10) C2) (_ bv0 1)) true) (_ bv10 32) (_ bv9 32)) ?x1872)))
 (let ((?x4881 (ite (and (distinct ((_ extract 10 6) C2) (_ bv0 5)) true) ?x2860 (ite (and (distinct ((_ extract 5 3) C2) (_ bv0 3)) true) ?x4541 ?x3869))))
 (and (and (and (distinct C1 (_ bv0 10)) true) (= (bvand C1 (bvsub C1 (_ bv1 10))) (_ bv0 10))) (and (and (distinct C2 (_ bv0 11)) true) (= (bvand C2 (bvsub C2 (_ bv1 11))) (_ bv0 11))) (bvslt ?x4881 (ite (and (distinct ((_ extract 9 5) C1) (_ bv0 5)) true) ?x2899 ?x4681)) $x2716)))))))))))))))))))))))
(check-sat)
