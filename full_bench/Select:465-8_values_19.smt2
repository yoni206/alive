(set-info :status unknown)
(declare-fun %Y () (_ BitVec 11))
(declare-fun C2 () (_ BitVec 11))
(declare-fun C1 () (_ BitVec 20))
(declare-fun %X () (_ BitVec 20))
(assert
 (let ((?x2390 (ite (and (distinct ((_ extract 2 2) C2) (_ bv0 1)) true) (_ bv2 20) (ite (and (distinct ((_ extract 1 1) C2) (_ bv0 1)) true) (_ bv1 20) (_ bv0 20)))))
 (let ((?x3224 (ite (and (distinct ((_ extract 5 5) C2) (_ bv0 1)) true) (_ bv5 20) (ite (and (distinct ((_ extract 4 4) C2) (_ bv0 1)) true) (_ bv4 20) (_ bv3 20)))))
 (let ((?x1482 (ite (and (distinct ((_ extract 8 8) C2) (_ bv0 1)) true) (_ bv8 20) (ite (and (distinct ((_ extract 7 7) C2) (_ bv0 1)) true) (_ bv7 20) (_ bv6 20)))))
 (let ((?x1649 (ite (and (distinct ((_ extract 10 9) C2) (_ bv0 2)) true) (ite (and (distinct ((_ extract 10 10) C2) (_ bv0 1)) true) (_ bv10 20) (_ bv9 20)) ?x1482)))
 (let ((?x3301 (ite (and (distinct ((_ extract 10 6) C2) (_ bv0 5)) true) ?x1649 (ite (and (distinct ((_ extract 5 3) C2) (_ bv0 3)) true) ?x3224 ?x2390))))
 (let ((?x1489 (ite (and (distinct ((_ extract 2 2) C1) (_ bv0 1)) true) (_ bv2 20) (ite (and (distinct ((_ extract 1 1) C1) (_ bv0 1)) true) (_ bv1 20) (_ bv0 20)))))
 (let ((?x5998 (ite (and (distinct ((_ extract 4 3) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 4 4) C1) (_ bv0 1)) true) (_ bv4 20) (_ bv3 20)) ?x1489)))
 (let ((?x2416 (ite (and (distinct ((_ extract 7 7) C1) (_ bv0 1)) true) (_ bv7 20) (ite (and (distinct ((_ extract 6 6) C1) (_ bv0 1)) true) (_ bv6 20) (_ bv5 20)))))
 (let ((?x3485 (ite (and (distinct ((_ extract 9 8) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 9 9) C1) (_ bv0 1)) true) (_ bv9 20) (_ bv8 20)) ?x2416)))
 (let ((?x1824 (ite (and (distinct ((_ extract 12 12) C1) (_ bv0 1)) true) (_ bv12 20) (ite (and (distinct ((_ extract 11 11) C1) (_ bv0 1)) true) (_ bv11 20) (_ bv10 20)))))
 (let ((?x2832 (ite (and (distinct ((_ extract 14 13) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 14 14) C1) (_ bv0 1)) true) (_ bv14 20) (_ bv13 20)) ?x1824)))
 (let ((?x2513 (ite (and (distinct ((_ extract 17 17) C1) (_ bv0 1)) true) (_ bv17 20) (ite (and (distinct ((_ extract 16 16) C1) (_ bv0 1)) true) (_ bv16 20) (_ bv15 20)))))
 (let ((?x1559 (ite (and (distinct ((_ extract 19 18) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 19 19) C1) (_ bv0 1)) true) (_ bv19 20) (_ bv18 20)) ?x2513)))
 (let ((?x4960 (ite (and (distinct ((_ extract 19 10) C1) (_ bv0 10)) true) (ite (and (distinct ((_ extract 19 15) C1) (_ bv0 5)) true) ?x1559 ?x2832) (ite (and (distinct ((_ extract 9 5) C1) (_ bv0 5)) true) ?x3485 ?x5998))))
 (let ((?x3261 (bvsub ?x4960 ?x3301)))
 (let ((?x4916 (bvand %X C1)))
 (let ((?x6767 (bvor %Y C2)))
 (let (($x5653 (and (distinct (ite (= (ite (and (distinct ?x4916 (_ bv0 20)) true) (_ bv1 1) (_ bv0 1)) (_ bv1 1)) ?x6767 %Y) (bvor ((_ extract 10 0) (bvlshr ?x4916 ?x3261)) %Y)) true)))
 (let ((?x3290 (ite (and (distinct ((_ extract 2 2) C1) (_ bv0 1)) true) (_ bv2 32) (ite (and (distinct ((_ extract 1 1) C1) (_ bv0 1)) true) (_ bv1 32) (_ bv0 32)))))
 (let ((?x3221 (ite (and (distinct ((_ extract 4 3) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 4 4) C1) (_ bv0 1)) true) (_ bv4 32) (_ bv3 32)) ?x3290)))
 (let ((?x2902 (ite (and (distinct ((_ extract 7 7) C1) (_ bv0 1)) true) (_ bv7 32) (ite (and (distinct ((_ extract 6 6) C1) (_ bv0 1)) true) (_ bv6 32) (_ bv5 32)))))
 (let ((?x2725 (ite (and (distinct ((_ extract 9 8) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 9 9) C1) (_ bv0 1)) true) (_ bv9 32) (_ bv8 32)) ?x2902)))
 (let ((?x4814 (ite (and (distinct ((_ extract 12 12) C1) (_ bv0 1)) true) (_ bv12 32) (ite (and (distinct ((_ extract 11 11) C1) (_ bv0 1)) true) (_ bv11 32) (_ bv10 32)))))
 (let ((?x1273 (ite (and (distinct ((_ extract 14 13) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 14 14) C1) (_ bv0 1)) true) (_ bv14 32) (_ bv13 32)) ?x4814)))
 (let ((?x5086 (ite (and (distinct ((_ extract 17 17) C1) (_ bv0 1)) true) (_ bv17 32) (ite (and (distinct ((_ extract 16 16) C1) (_ bv0 1)) true) (_ bv16 32) (_ bv15 32)))))
 (let ((?x3597 (ite (and (distinct ((_ extract 19 18) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 19 19) C1) (_ bv0 1)) true) (_ bv19 32) (_ bv18 32)) ?x5086)))
 (let ((?x3567 (ite (and (distinct ((_ extract 19 10) C1) (_ bv0 10)) true) (ite (and (distinct ((_ extract 19 15) C1) (_ bv0 5)) true) ?x3597 ?x1273) (ite (and (distinct ((_ extract 9 5) C1) (_ bv0 5)) true) ?x2725 ?x3221))))
 (let ((?x1907 (ite (and (distinct ((_ extract 2 2) C2) (_ bv0 1)) true) (_ bv2 32) (ite (and (distinct ((_ extract 1 1) C2) (_ bv0 1)) true) (_ bv1 32) (_ bv0 32)))))
 (let ((?x2777 (ite (and (distinct ((_ extract 5 5) C2) (_ bv0 1)) true) (_ bv5 32) (ite (and (distinct ((_ extract 4 4) C2) (_ bv0 1)) true) (_ bv4 32) (_ bv3 32)))))
 (let ((?x2064 (ite (and (distinct ((_ extract 8 8) C2) (_ bv0 1)) true) (_ bv8 32) (ite (and (distinct ((_ extract 7 7) C2) (_ bv0 1)) true) (_ bv7 32) (_ bv6 32)))))
 (let ((?x2881 (ite (and (distinct ((_ extract 10 9) C2) (_ bv0 2)) true) (ite (and (distinct ((_ extract 10 10) C2) (_ bv0 1)) true) (_ bv10 32) (_ bv9 32)) ?x2064)))
 (let ((?x6723 (ite (and (distinct ((_ extract 10 6) C2) (_ bv0 5)) true) ?x2881 (ite (and (distinct ((_ extract 5 3) C2) (_ bv0 3)) true) ?x2777 ?x1907))))
 (and (and (and (distinct C1 (_ bv0 20)) true) (= (bvand C1 (bvsub C1 (_ bv1 20))) (_ bv0 20))) (and (and (distinct C2 (_ bv0 11)) true) (= (bvand C2 (bvsub C2 (_ bv1 11))) (_ bv0 11))) (bvslt ?x6723 ?x3567) $x5653))))))))))))))))))))))))))))))))))
(check-sat)
