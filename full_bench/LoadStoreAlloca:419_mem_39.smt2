(set-info :status unknown)
(declare-fun mem0 () (_ BitVec 8))
(declare-fun %x () (_ BitVec 40))
(declare-fun %p1 () (_ BitVec 64))
(declare-fun idx () (_ BitVec 64))
(declare-fun |ana_equivalentAddressValues(%p1, %p2)| () (_ BitVec 1))
(declare-fun %p2 () (_ BitVec 64))
(assert
 (let ((?x3560 ((_ extract 7 0) %x)))
 (let (($x14574 (or true true)))
 (let (($x17359 (and (distinct %p1 (_ bv0 64)) true)))
 (let ((?x1107 ((_ extract 15 8) %x)))
 (let ((?x23999 (ite (and $x17359 $x14574 (= idx (bvadd %p1 (_ bv1 64)))) ?x1107 (ite (and $x17359 $x14574 (= idx (bvadd %p1 (_ bv0 64)))) ?x3560 mem0))))
 (let ((?x19053 ((_ extract 23 16) %x)))
 (let ((?x17931 ((_ extract 31 24) %x)))
 (let ((?x23214 (ite (and $x17359 $x14574 (= idx (bvadd %p1 (_ bv3 64)))) ?x17931 (ite (and $x17359 $x14574 (= idx (bvadd %p1 (_ bv2 64)))) ?x19053 ?x23999))))
 (let ((?x1835 ((_ extract 39 32) %x)))
 (let ((?x6201 (ite (and $x17359 $x14574 (= idx (bvadd %p1 (_ bv4 64)))) ?x1835 ?x23214)))
 (let (($x17907 (= |ana_equivalentAddressValues(%p1, %p2)| (_ bv1 1))))
 (and (=> $x17907 (= %p1 %p2)) $x17907 (and (distinct ?x6201 ?x6201) true))))))))))))))
(check-sat)
