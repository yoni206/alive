(set-info :status unknown)
(declare-fun %Y () (_ BitVec 11))
(declare-fun C2 () (_ BitVec 11))
(declare-fun C1 () (_ BitVec 36))
(declare-fun %X () (_ BitVec 36))
(assert
 (let ((?x6645 (ite (and (distinct ((_ extract 2 2) C2) (_ bv0 1)) true) (_ bv2 36) (ite (and (distinct ((_ extract 1 1) C2) (_ bv0 1)) true) (_ bv1 36) (_ bv0 36)))))
 (let ((?x4515 (ite (and (distinct ((_ extract 5 5) C2) (_ bv0 1)) true) (_ bv5 36) (ite (and (distinct ((_ extract 4 4) C2) (_ bv0 1)) true) (_ bv4 36) (_ bv3 36)))))
 (let ((?x2206 (ite (and (distinct ((_ extract 8 8) C2) (_ bv0 1)) true) (_ bv8 36) (ite (and (distinct ((_ extract 7 7) C2) (_ bv0 1)) true) (_ bv7 36) (_ bv6 36)))))
 (let ((?x1816 (ite (and (distinct ((_ extract 10 9) C2) (_ bv0 2)) true) (ite (and (distinct ((_ extract 10 10) C2) (_ bv0 1)) true) (_ bv10 36) (_ bv9 36)) ?x2206)))
 (let ((?x6270 (ite (and (distinct ((_ extract 10 6) C2) (_ bv0 5)) true) ?x1816 (ite (and (distinct ((_ extract 5 3) C2) (_ bv0 3)) true) ?x4515 ?x6645))))
 (let ((?x5768 (ite (and (distinct ((_ extract 2 2) C1) (_ bv0 1)) true) (_ bv2 36) (ite (and (distinct ((_ extract 1 1) C1) (_ bv0 1)) true) (_ bv1 36) (_ bv0 36)))))
 (let ((?x1905 (ite (and (distinct ((_ extract 4 3) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 4 4) C1) (_ bv0 1)) true) (_ bv4 36) (_ bv3 36)) ?x5768)))
 (let ((?x3221 (ite (and (distinct ((_ extract 8 7) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 8 8) C1) (_ bv0 1)) true) (_ bv8 36) (_ bv7 36)) (ite (and (distinct ((_ extract 6 6) C1) (_ bv0 1)) true) (_ bv6 36) (_ bv5 36)))))
 (let ((?x2347 (ite (and (distinct ((_ extract 11 11) C1) (_ bv0 1)) true) (_ bv11 36) (ite (and (distinct ((_ extract 10 10) C1) (_ bv0 1)) true) (_ bv10 36) (_ bv9 36)))))
 (let ((?x4070 (ite (and (distinct ((_ extract 13 12) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 13 13) C1) (_ bv0 1)) true) (_ bv13 36) (_ bv12 36)) ?x2347)))
 (let ((?x2795 (ite (and (distinct ((_ extract 17 16) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 17 17) C1) (_ bv0 1)) true) (_ bv17 36) (_ bv16 36)) (ite (and (distinct ((_ extract 15 15) C1) (_ bv0 1)) true) (_ bv15 36) (_ bv14 36)))))
 (let ((?x1517 (ite (and (distinct ((_ extract 17 9) C1) (_ bv0 9)) true) (ite (and (distinct ((_ extract 17 14) C1) (_ bv0 4)) true) ?x2795 ?x4070) (ite (and (distinct ((_ extract 8 5) C1) (_ bv0 4)) true) ?x3221 ?x1905))))
 (let ((?x1770 (ite (and (distinct ((_ extract 20 20) C1) (_ bv0 1)) true) (_ bv20 36) (ite (and (distinct ((_ extract 19 19) C1) (_ bv0 1)) true) (_ bv19 36) (_ bv18 36)))))
 (let ((?x6358 (ite (and (distinct ((_ extract 22 21) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 22 22) C1) (_ bv0 1)) true) (_ bv22 36) (_ bv21 36)) ?x1770)))
 (let ((?x6726 (ite (and (distinct ((_ extract 26 25) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 26 26) C1) (_ bv0 1)) true) (_ bv26 36) (_ bv25 36)) (ite (and (distinct ((_ extract 24 24) C1) (_ bv0 1)) true) (_ bv24 36) (_ bv23 36)))))
 (let ((?x2307 (ite (and (distinct ((_ extract 29 29) C1) (_ bv0 1)) true) (_ bv29 36) (ite (and (distinct ((_ extract 28 28) C1) (_ bv0 1)) true) (_ bv28 36) (_ bv27 36)))))
 (let ((?x6848 (ite (and (distinct ((_ extract 31 30) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 31 31) C1) (_ bv0 1)) true) (_ bv31 36) (_ bv30 36)) ?x2307)))
 (let ((?x6250 (ite (and (distinct ((_ extract 35 34) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 35 35) C1) (_ bv0 1)) true) (_ bv35 36) (_ bv34 36)) (ite (and (distinct ((_ extract 33 33) C1) (_ bv0 1)) true) (_ bv33 36) (_ bv32 36)))))
 (let ((?x3428 (ite (and (distinct ((_ extract 35 27) C1) (_ bv0 9)) true) (ite (and (distinct ((_ extract 35 32) C1) (_ bv0 4)) true) ?x6250 ?x6848) (ite (and (distinct ((_ extract 26 23) C1) (_ bv0 4)) true) ?x6726 ?x6358))))
 (let ((?x2017 (bvsub (ite (and (distinct ((_ extract 35 18) C1) (_ bv0 18)) true) ?x3428 ?x1517) ?x6270)))
 (let ((?x4714 (bvand %X C1)))
 (let ((?x4868 (bvor %Y C2)))
 (let (($x2516 (and (distinct (ite (= (ite (and (distinct ?x4714 (_ bv0 36)) true) (_ bv1 1) (_ bv0 1)) (_ bv1 1)) ?x4868 %Y) (bvor ((_ extract 10 0) (bvlshr ?x4714 ?x2017)) %Y)) true)))
 (let ((?x3657 (ite (and (distinct ((_ extract 2 2) C1) (_ bv0 1)) true) (_ bv2 32) (ite (and (distinct ((_ extract 1 1) C1) (_ bv0 1)) true) (_ bv1 32) (_ bv0 32)))))
 (let ((?x6457 (ite (and (distinct ((_ extract 4 3) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 4 4) C1) (_ bv0 1)) true) (_ bv4 32) (_ bv3 32)) ?x3657)))
 (let ((?x4916 (ite (and (distinct ((_ extract 8 7) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 8 8) C1) (_ bv0 1)) true) (_ bv8 32) (_ bv7 32)) (ite (and (distinct ((_ extract 6 6) C1) (_ bv0 1)) true) (_ bv6 32) (_ bv5 32)))))
 (let ((?x4268 (ite (and (distinct ((_ extract 11 11) C1) (_ bv0 1)) true) (_ bv11 32) (ite (and (distinct ((_ extract 10 10) C1) (_ bv0 1)) true) (_ bv10 32) (_ bv9 32)))))
 (let ((?x4210 (ite (and (distinct ((_ extract 13 12) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 13 13) C1) (_ bv0 1)) true) (_ bv13 32) (_ bv12 32)) ?x4268)))
 (let ((?x4001 (ite (and (distinct ((_ extract 17 16) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 17 17) C1) (_ bv0 1)) true) (_ bv17 32) (_ bv16 32)) (ite (and (distinct ((_ extract 15 15) C1) (_ bv0 1)) true) (_ bv15 32) (_ bv14 32)))))
 (let ((?x6319 (ite (and (distinct ((_ extract 17 9) C1) (_ bv0 9)) true) (ite (and (distinct ((_ extract 17 14) C1) (_ bv0 4)) true) ?x4001 ?x4210) (ite (and (distinct ((_ extract 8 5) C1) (_ bv0 4)) true) ?x4916 ?x6457))))
 (let ((?x3791 (ite (and (distinct ((_ extract 20 20) C1) (_ bv0 1)) true) (_ bv20 32) (ite (and (distinct ((_ extract 19 19) C1) (_ bv0 1)) true) (_ bv19 32) (_ bv18 32)))))
 (let ((?x3523 (ite (and (distinct ((_ extract 22 21) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 22 22) C1) (_ bv0 1)) true) (_ bv22 32) (_ bv21 32)) ?x3791)))
 (let ((?x2864 (ite (and (distinct ((_ extract 26 25) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 26 26) C1) (_ bv0 1)) true) (_ bv26 32) (_ bv25 32)) (ite (and (distinct ((_ extract 24 24) C1) (_ bv0 1)) true) (_ bv24 32) (_ bv23 32)))))
 (let ((?x4959 (ite (and (distinct ((_ extract 29 29) C1) (_ bv0 1)) true) (_ bv29 32) (ite (and (distinct ((_ extract 28 28) C1) (_ bv0 1)) true) (_ bv28 32) (_ bv27 32)))))
 (let ((?x5295 (ite (and (distinct ((_ extract 31 30) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 31 31) C1) (_ bv0 1)) true) (_ bv31 32) (_ bv30 32)) ?x4959)))
 (let ((?x3290 (ite (and (distinct ((_ extract 35 34) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 35 35) C1) (_ bv0 1)) true) (_ bv35 32) (_ bv34 32)) (ite (and (distinct ((_ extract 33 33) C1) (_ bv0 1)) true) (_ bv33 32) (_ bv32 32)))))
 (let ((?x3450 (ite (and (distinct ((_ extract 35 27) C1) (_ bv0 9)) true) (ite (and (distinct ((_ extract 35 32) C1) (_ bv0 4)) true) ?x3290 ?x5295) (ite (and (distinct ((_ extract 26 23) C1) (_ bv0 4)) true) ?x2864 ?x3523))))
 (let ((?x1797 (ite (and (distinct ((_ extract 2 2) C2) (_ bv0 1)) true) (_ bv2 32) (ite (and (distinct ((_ extract 1 1) C2) (_ bv0 1)) true) (_ bv1 32) (_ bv0 32)))))
 (let ((?x6449 (ite (and (distinct ((_ extract 5 5) C2) (_ bv0 1)) true) (_ bv5 32) (ite (and (distinct ((_ extract 4 4) C2) (_ bv0 1)) true) (_ bv4 32) (_ bv3 32)))))
 (let ((?x2486 (ite (and (distinct ((_ extract 8 8) C2) (_ bv0 1)) true) (_ bv8 32) (ite (and (distinct ((_ extract 7 7) C2) (_ bv0 1)) true) (_ bv7 32) (_ bv6 32)))))
 (let ((?x6263 (ite (and (distinct ((_ extract 10 9) C2) (_ bv0 2)) true) (ite (and (distinct ((_ extract 10 10) C2) (_ bv0 1)) true) (_ bv10 32) (_ bv9 32)) ?x2486)))
 (let ((?x3085 (ite (and (distinct ((_ extract 10 6) C2) (_ bv0 5)) true) ?x6263 (ite (and (distinct ((_ extract 5 3) C2) (_ bv0 3)) true) ?x6449 ?x1797))))
 (and (and (and (distinct C1 (_ bv0 36)) true) (= (bvand C1 (bvsub C1 (_ bv1 36))) (_ bv0 36))) (and (and (distinct C2 (_ bv0 11)) true) (= (bvand C2 (bvsub C2 (_ bv1 11))) (_ bv0 11))) (bvslt ?x3085 (ite (and (distinct ((_ extract 35 18) C1) (_ bv0 18)) true) ?x3450 ?x6319)) $x2516))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
