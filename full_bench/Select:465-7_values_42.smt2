(set-info :status unknown)
(declare-fun %Y () (_ BitVec 11))
(declare-fun C2 () (_ BitVec 11))
(declare-fun C1 () (_ BitVec 50))
(declare-fun %X () (_ BitVec 50))
(assert
 (let ((?x3561 (ite (and (distinct ((_ extract 2 2) C2) (_ bv0 1)) true) (_ bv2 50) (ite (and (distinct ((_ extract 1 1) C2) (_ bv0 1)) true) (_ bv1 50) (_ bv0 50)))))
 (let ((?x6065 (ite (and (distinct ((_ extract 5 5) C2) (_ bv0 1)) true) (_ bv5 50) (ite (and (distinct ((_ extract 4 4) C2) (_ bv0 1)) true) (_ bv4 50) (_ bv3 50)))))
 (let ((?x5625 (ite (and (distinct ((_ extract 8 8) C2) (_ bv0 1)) true) (_ bv8 50) (ite (and (distinct ((_ extract 7 7) C2) (_ bv0 1)) true) (_ bv7 50) (_ bv6 50)))))
 (let ((?x1440 (ite (and (distinct ((_ extract 10 9) C2) (_ bv0 2)) true) (ite (and (distinct ((_ extract 10 10) C2) (_ bv0 1)) true) (_ bv10 50) (_ bv9 50)) ?x5625)))
 (let ((?x6526 (ite (and (distinct ((_ extract 10 6) C2) (_ bv0 5)) true) ?x1440 (ite (and (distinct ((_ extract 5 3) C2) (_ bv0 3)) true) ?x6065 ?x3561))))
 (let ((?x1235 (ite (and (distinct ((_ extract 3 2) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 3 3) C1) (_ bv0 1)) true) (_ bv3 50) (_ bv2 50)) (ite (and (distinct ((_ extract 1 1) C1) (_ bv0 1)) true) (_ bv1 50) (_ bv0 50)))))
 (let ((?x4083 (ite (and (distinct ((_ extract 6 6) C1) (_ bv0 1)) true) (_ bv6 50) (ite (and (distinct ((_ extract 5 5) C1) (_ bv0 1)) true) (_ bv5 50) (_ bv4 50)))))
 (let ((?x6490 (ite (and (distinct ((_ extract 9 9) C1) (_ bv0 1)) true) (_ bv9 50) (ite (and (distinct ((_ extract 8 8) C1) (_ bv0 1)) true) (_ bv8 50) (_ bv7 50)))))
 (let ((?x3135 (ite (and (distinct ((_ extract 12 12) C1) (_ bv0 1)) true) (_ bv12 50) (ite (and (distinct ((_ extract 11 11) C1) (_ bv0 1)) true) (_ bv11 50) (_ bv10 50)))))
 (let ((?x5208 (ite (and (distinct ((_ extract 12 7) C1) (_ bv0 6)) true) (ite (and (distinct ((_ extract 12 10) C1) (_ bv0 3)) true) ?x3135 ?x6490) (ite (and (distinct ((_ extract 6 4) C1) (_ bv0 3)) true) ?x4083 ?x1235))))
 (let ((?x4618 (ite (and (distinct ((_ extract 15 15) C1) (_ bv0 1)) true) (_ bv15 50) (ite (and (distinct ((_ extract 14 14) C1) (_ bv0 1)) true) (_ bv14 50) (_ bv13 50)))))
 (let ((?x3904 (ite (and (distinct ((_ extract 18 18) C1) (_ bv0 1)) true) (_ bv18 50) (ite (and (distinct ((_ extract 17 17) C1) (_ bv0 1)) true) (_ bv17 50) (_ bv16 50)))))
 (let ((?x4921 (ite (and (distinct ((_ extract 21 21) C1) (_ bv0 1)) true) (_ bv21 50) (ite (and (distinct ((_ extract 20 20) C1) (_ bv0 1)) true) (_ bv20 50) (_ bv19 50)))))
 (let ((?x2793 (ite (and (distinct ((_ extract 24 24) C1) (_ bv0 1)) true) (_ bv24 50) (ite (and (distinct ((_ extract 23 23) C1) (_ bv0 1)) true) (_ bv23 50) (_ bv22 50)))))
 (let ((?x2277 (ite (and (distinct ((_ extract 24 19) C1) (_ bv0 6)) true) (ite (and (distinct ((_ extract 24 22) C1) (_ bv0 3)) true) ?x2793 ?x4921) (ite (and (distinct ((_ extract 18 16) C1) (_ bv0 3)) true) ?x3904 ?x4618))))
 (let ((?x2959 (ite (and (distinct ((_ extract 28 27) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 28 28) C1) (_ bv0 1)) true) (_ bv28 50) (_ bv27 50)) (ite (and (distinct ((_ extract 26 26) C1) (_ bv0 1)) true) (_ bv26 50) (_ bv25 50)))))
 (let ((?x3584 (ite (and (distinct ((_ extract 31 31) C1) (_ bv0 1)) true) (_ bv31 50) (ite (and (distinct ((_ extract 30 30) C1) (_ bv0 1)) true) (_ bv30 50) (_ bv29 50)))))
 (let ((?x1259 (ite (and (distinct ((_ extract 34 34) C1) (_ bv0 1)) true) (_ bv34 50) (ite (and (distinct ((_ extract 33 33) C1) (_ bv0 1)) true) (_ bv33 50) (_ bv32 50)))))
 (let ((?x2453 (ite (and (distinct ((_ extract 37 37) C1) (_ bv0 1)) true) (_ bv37 50) (ite (and (distinct ((_ extract 36 36) C1) (_ bv0 1)) true) (_ bv36 50) (_ bv35 50)))))
 (let ((?x5235 (ite (and (distinct ((_ extract 37 32) C1) (_ bv0 6)) true) (ite (and (distinct ((_ extract 37 35) C1) (_ bv0 3)) true) ?x2453 ?x1259) (ite (and (distinct ((_ extract 31 29) C1) (_ bv0 3)) true) ?x3584 ?x2959))))
 (let ((?x2014 (ite (and (distinct ((_ extract 40 40) C1) (_ bv0 1)) true) (_ bv40 50) (ite (and (distinct ((_ extract 39 39) C1) (_ bv0 1)) true) (_ bv39 50) (_ bv38 50)))))
 (let ((?x2267 (ite (and (distinct ((_ extract 43 43) C1) (_ bv0 1)) true) (_ bv43 50) (ite (and (distinct ((_ extract 42 42) C1) (_ bv0 1)) true) (_ bv42 50) (_ bv41 50)))))
 (let ((?x4312 (ite (and (distinct ((_ extract 46 46) C1) (_ bv0 1)) true) (_ bv46 50) (ite (and (distinct ((_ extract 45 45) C1) (_ bv0 1)) true) (_ bv45 50) (_ bv44 50)))))
 (let ((?x3450 (ite (and (distinct ((_ extract 49 49) C1) (_ bv0 1)) true) (_ bv49 50) (ite (and (distinct ((_ extract 48 48) C1) (_ bv0 1)) true) (_ bv48 50) (_ bv47 50)))))
 (let ((?x6593 (ite (and (distinct ((_ extract 49 44) C1) (_ bv0 6)) true) (ite (and (distinct ((_ extract 49 47) C1) (_ bv0 3)) true) ?x3450 ?x4312) (ite (and (distinct ((_ extract 43 41) C1) (_ bv0 3)) true) ?x2267 ?x2014))))
 (let ((?x2916 (ite (and (distinct ((_ extract 49 25) C1) (_ bv0 25)) true) (ite (and (distinct ((_ extract 49 38) C1) (_ bv0 12)) true) ?x6593 ?x5235) (ite (and (distinct ((_ extract 24 13) C1) (_ bv0 12)) true) ?x2277 ?x5208))))
 (let ((?x2921 (bvsub ?x2916 ?x6526)))
 (let ((?x6843 (bvand %X C1)))
 (let (($x3829 (and (distinct (ite (= (ite (= ?x6843 (_ bv0 50)) (_ bv1 1) (_ bv0 1)) (_ bv1 1)) (bvor %Y C2) %Y) (bvor (bvxor ((_ extract 10 0) (bvlshr ?x6843 ?x2921)) C2) %Y)) true)))
 (let ((?x1739 (ite (and (distinct ((_ extract 3 2) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 3 3) C1) (_ bv0 1)) true) (_ bv3 32) (_ bv2 32)) (ite (and (distinct ((_ extract 1 1) C1) (_ bv0 1)) true) (_ bv1 32) (_ bv0 32)))))
 (let ((?x4997 (ite (and (distinct ((_ extract 6 6) C1) (_ bv0 1)) true) (_ bv6 32) (ite (and (distinct ((_ extract 5 5) C1) (_ bv0 1)) true) (_ bv5 32) (_ bv4 32)))))
 (let ((?x6274 (ite (and (distinct ((_ extract 9 9) C1) (_ bv0 1)) true) (_ bv9 32) (ite (and (distinct ((_ extract 8 8) C1) (_ bv0 1)) true) (_ bv8 32) (_ bv7 32)))))
 (let ((?x2081 (ite (and (distinct ((_ extract 12 12) C1) (_ bv0 1)) true) (_ bv12 32) (ite (and (distinct ((_ extract 11 11) C1) (_ bv0 1)) true) (_ bv11 32) (_ bv10 32)))))
 (let ((?x5073 (ite (and (distinct ((_ extract 12 7) C1) (_ bv0 6)) true) (ite (and (distinct ((_ extract 12 10) C1) (_ bv0 3)) true) ?x2081 ?x6274) (ite (and (distinct ((_ extract 6 4) C1) (_ bv0 3)) true) ?x4997 ?x1739))))
 (let ((?x4906 (ite (and (distinct ((_ extract 15 15) C1) (_ bv0 1)) true) (_ bv15 32) (ite (and (distinct ((_ extract 14 14) C1) (_ bv0 1)) true) (_ bv14 32) (_ bv13 32)))))
 (let ((?x1863 (ite (and (distinct ((_ extract 18 18) C1) (_ bv0 1)) true) (_ bv18 32) (ite (and (distinct ((_ extract 17 17) C1) (_ bv0 1)) true) (_ bv17 32) (_ bv16 32)))))
 (let ((?x5714 (ite (and (distinct ((_ extract 21 21) C1) (_ bv0 1)) true) (_ bv21 32) (ite (and (distinct ((_ extract 20 20) C1) (_ bv0 1)) true) (_ bv20 32) (_ bv19 32)))))
 (let ((?x5646 (ite (and (distinct ((_ extract 24 24) C1) (_ bv0 1)) true) (_ bv24 32) (ite (and (distinct ((_ extract 23 23) C1) (_ bv0 1)) true) (_ bv23 32) (_ bv22 32)))))
 (let ((?x5973 (ite (and (distinct ((_ extract 24 19) C1) (_ bv0 6)) true) (ite (and (distinct ((_ extract 24 22) C1) (_ bv0 3)) true) ?x5646 ?x5714) (ite (and (distinct ((_ extract 18 16) C1) (_ bv0 3)) true) ?x1863 ?x4906))))
 (let ((?x4487 (ite (and (distinct ((_ extract 28 27) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 28 28) C1) (_ bv0 1)) true) (_ bv28 32) (_ bv27 32)) (ite (and (distinct ((_ extract 26 26) C1) (_ bv0 1)) true) (_ bv26 32) (_ bv25 32)))))
 (let ((?x4839 (ite (and (distinct ((_ extract 31 31) C1) (_ bv0 1)) true) (_ bv31 32) (ite (and (distinct ((_ extract 30 30) C1) (_ bv0 1)) true) (_ bv30 32) (_ bv29 32)))))
 (let ((?x2828 (ite (and (distinct ((_ extract 34 34) C1) (_ bv0 1)) true) (_ bv34 32) (ite (and (distinct ((_ extract 33 33) C1) (_ bv0 1)) true) (_ bv33 32) (_ bv32 32)))))
 (let ((?x3203 (ite (and (distinct ((_ extract 37 37) C1) (_ bv0 1)) true) (_ bv37 32) (ite (and (distinct ((_ extract 36 36) C1) (_ bv0 1)) true) (_ bv36 32) (_ bv35 32)))))
 (let ((?x5090 (ite (and (distinct ((_ extract 37 32) C1) (_ bv0 6)) true) (ite (and (distinct ((_ extract 37 35) C1) (_ bv0 3)) true) ?x3203 ?x2828) (ite (and (distinct ((_ extract 31 29) C1) (_ bv0 3)) true) ?x4839 ?x4487))))
 (let ((?x2400 (ite (and (distinct ((_ extract 40 40) C1) (_ bv0 1)) true) (_ bv40 32) (ite (and (distinct ((_ extract 39 39) C1) (_ bv0 1)) true) (_ bv39 32) (_ bv38 32)))))
 (let ((?x1245 (ite (and (distinct ((_ extract 43 43) C1) (_ bv0 1)) true) (_ bv43 32) (ite (and (distinct ((_ extract 42 42) C1) (_ bv0 1)) true) (_ bv42 32) (_ bv41 32)))))
 (let ((?x5039 (ite (and (distinct ((_ extract 46 46) C1) (_ bv0 1)) true) (_ bv46 32) (ite (and (distinct ((_ extract 45 45) C1) (_ bv0 1)) true) (_ bv45 32) (_ bv44 32)))))
 (let ((?x4347 (ite (and (distinct ((_ extract 49 49) C1) (_ bv0 1)) true) (_ bv49 32) (ite (and (distinct ((_ extract 48 48) C1) (_ bv0 1)) true) (_ bv48 32) (_ bv47 32)))))
 (let ((?x2054 (ite (and (distinct ((_ extract 49 44) C1) (_ bv0 6)) true) (ite (and (distinct ((_ extract 49 47) C1) (_ bv0 3)) true) ?x4347 ?x5039) (ite (and (distinct ((_ extract 43 41) C1) (_ bv0 3)) true) ?x1245 ?x2400))))
 (let ((?x1953 (ite (and (distinct ((_ extract 49 25) C1) (_ bv0 25)) true) (ite (and (distinct ((_ extract 49 38) C1) (_ bv0 12)) true) ?x2054 ?x5090) (ite (and (distinct ((_ extract 24 13) C1) (_ bv0 12)) true) ?x5973 ?x5073))))
 (let ((?x3683 (ite (and (distinct ((_ extract 2 2) C2) (_ bv0 1)) true) (_ bv2 32) (ite (and (distinct ((_ extract 1 1) C2) (_ bv0 1)) true) (_ bv1 32) (_ bv0 32)))))
 (let ((?x4894 (ite (and (distinct ((_ extract 5 5) C2) (_ bv0 1)) true) (_ bv5 32) (ite (and (distinct ((_ extract 4 4) C2) (_ bv0 1)) true) (_ bv4 32) (_ bv3 32)))))
 (let ((?x5770 (ite (and (distinct ((_ extract 8 8) C2) (_ bv0 1)) true) (_ bv8 32) (ite (and (distinct ((_ extract 7 7) C2) (_ bv0 1)) true) (_ bv7 32) (_ bv6 32)))))
 (let ((?x4874 (ite (and (distinct ((_ extract 10 9) C2) (_ bv0 2)) true) (ite (and (distinct ((_ extract 10 10) C2) (_ bv0 1)) true) (_ bv10 32) (_ bv9 32)) ?x5770)))
 (let ((?x5983 (ite (and (distinct ((_ extract 10 6) C2) (_ bv0 5)) true) ?x4874 (ite (and (distinct ((_ extract 5 3) C2) (_ bv0 3)) true) ?x4894 ?x3683))))
 (and (and (and (distinct C1 (_ bv0 50)) true) (= (bvand C1 (bvsub C1 (_ bv1 50))) (_ bv0 50))) (and (and (distinct C2 (_ bv0 11)) true) (= (bvand C2 (bvsub C2 (_ bv1 11))) (_ bv0 11))) (bvslt ?x5983 ?x1953) $x3829)))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
