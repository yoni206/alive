(set-info :status unknown)
(declare-fun mem0 () (_ BitVec 8))
(declare-fun %p2 () (_ BitVec 64))
(declare-fun idx () (_ BitVec 64))
(declare-fun %p1 () (_ BitVec 64))
(declare-fun |ana_equivalentAddressValues(%p1, %p2)| () (_ BitVec 1))
(assert
 (let ((?x14853 (concat ((_ extract 7 3) mem0) ((_ extract 2 0) (concat (concat mem0 mem0) ((_ extract 2 0) mem0))))))
 (let (($x5676 (or true true)))
 (let (($x18224 (and (distinct %p2 (_ bv0 64)) true)))
 (let (($x18865 (and (distinct %p1 (_ bv0 64)) true)))
 (let ((?x12655 (ite (and $x18865 $x5676 $x18865 $x5676 $x18865 $x5676 $x18224 $x5676 (= idx %p2)) ?x14853 mem0)))
 (let (($x18812 (and $x18865 $x5676 $x18865 $x5676 $x18865 $x5676 $x18224 $x5676 (= idx (bvadd (bvadd %p2 (_ bv1 64)) (_ bv0 64))))))
 (let ((?x16688 (ite $x18812 ((_ extract 10 3) (concat (concat mem0 mem0) ((_ extract 2 0) mem0))) ?x12655)))
 (let (($x5623 (and $x18865 $x5676 $x18865 $x5676 $x18865 $x5676 $x18224 $x5676 (= idx (bvadd (bvadd %p2 (_ bv1 64)) (_ bv1 64))))))
 (let ((?x11352 (ite $x5623 ((_ extract 18 11) (concat (concat mem0 mem0) ((_ extract 2 0) mem0))) ?x16688)))
 (let (($x3500 (= |ana_equivalentAddressValues(%p1, %p2)| (_ bv1 1))))
 (and (=> $x3500 (= %p1 %p2)) $x3500 (and (distinct ?x11352 mem0) true)))))))))))))
(check-sat)
