(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun mem0 () (_ BitVec 8))
(declare-fun |ana_MaskedValueIsZero(%B, ((1 << (width(C2) - countLeadingZeros(((C2 - 1) ^ C2)))) - 1))| () (_ BitVec 1))
(declare-fun C2 () (_ BitVec 33))
(declare-fun C1 () (_ BitVec 33))
(declare-fun %B () (_ BitVec 33))
(assert
 (let (($x927 (and (distinct mem0 mem0) true)))
 (let (($x131713 (= |ana_MaskedValueIsZero(%B, ((1 << (width(C2) - countLeadingZeros(((C2 - 1) ^ C2)))) - 1))| (_ bv1 1))))
 (let ((?x20491 (bvsub C2 (_ bv1 33))))
 (let ((?x149540 (bvor ?x20491 C2)))
 (let (($x149004 (and (and (distinct ?x149540 (_ bv0 33)) true) (= (bvand (bvadd ?x149540 (_ bv1 33)) ?x149540) (_ bv0 33)) $x131713)))
 (let (($x148548 (or (= (bvand (bvadd C2 (_ bv1 33)) (bvsub (bvadd C2 (_ bv1 33)) (_ bv1 33))) (_ bv0 33)) $x149004)))
 (let ((?x130704 (bvand C1 C2)))
 (let (($x149544 (= ?x130704 C2)))
 (let ((?x149339 (ite (= ((_ extract 1 1) (bvxor ?x20491 C2)) (_ bv1 1)) (_ bv31 33) (ite (= ((_ extract 0 0) (bvxor ?x20491 C2)) (_ bv1 1)) (_ bv32 33) (_ bv33 33)))))
 (let ((?x149293 (ite (= ((_ extract 3 3) (bvxor ?x20491 C2)) (_ bv1 1)) (_ bv29 33) (ite (= ((_ extract 2 2) (bvxor ?x20491 C2)) (_ bv1 1)) (_ bv30 33) ?x149339))))
 (let ((?x149282 (ite (= ((_ extract 5 5) (bvxor ?x20491 C2)) (_ bv1 1)) (_ bv27 33) (ite (= ((_ extract 4 4) (bvxor ?x20491 C2)) (_ bv1 1)) (_ bv28 33) ?x149293))))
 (let ((?x149336 (ite (= ((_ extract 7 7) (bvxor ?x20491 C2)) (_ bv1 1)) (_ bv25 33) (ite (= ((_ extract 6 6) (bvxor ?x20491 C2)) (_ bv1 1)) (_ bv26 33) ?x149282))))
 (let ((?x149329 (ite (= ((_ extract 9 9) (bvxor ?x20491 C2)) (_ bv1 1)) (_ bv23 33) (ite (= ((_ extract 8 8) (bvxor ?x20491 C2)) (_ bv1 1)) (_ bv24 33) ?x149336))))
 (let ((?x149315 (ite (= ((_ extract 11 11) (bvxor ?x20491 C2)) (_ bv1 1)) (_ bv21 33) (ite (= ((_ extract 10 10) (bvxor ?x20491 C2)) (_ bv1 1)) (_ bv22 33) ?x149329))))
 (let ((?x149371 (ite (= ((_ extract 13 13) (bvxor ?x20491 C2)) (_ bv1 1)) (_ bv19 33) (ite (= ((_ extract 12 12) (bvxor ?x20491 C2)) (_ bv1 1)) (_ bv20 33) ?x149315))))
 (let ((?x149355 (ite (= ((_ extract 15 15) (bvxor ?x20491 C2)) (_ bv1 1)) (_ bv17 33) (ite (= ((_ extract 14 14) (bvxor ?x20491 C2)) (_ bv1 1)) (_ bv18 33) ?x149371))))
 (let ((?x149344 (ite (= ((_ extract 17 17) (bvxor ?x20491 C2)) (_ bv1 1)) (_ bv15 33) (ite (= ((_ extract 16 16) (bvxor ?x20491 C2)) (_ bv1 1)) (_ bv16 33) ?x149355))))
 (let ((?x149369 (ite (= ((_ extract 19 19) (bvxor ?x20491 C2)) (_ bv1 1)) (_ bv13 33) (ite (= ((_ extract 18 18) (bvxor ?x20491 C2)) (_ bv1 1)) (_ bv14 33) ?x149344))))
 (let ((?x149377 (ite (= ((_ extract 21 21) (bvxor ?x20491 C2)) (_ bv1 1)) (_ bv11 33) (ite (= ((_ extract 20 20) (bvxor ?x20491 C2)) (_ bv1 1)) (_ bv12 33) ?x149369))))
 (let ((?x149647 (ite (= ((_ extract 23 23) (bvxor ?x20491 C2)) (_ bv1 1)) (_ bv9 33) (ite (= ((_ extract 22 22) (bvxor ?x20491 C2)) (_ bv1 1)) (_ bv10 33) ?x149377))))
 (let ((?x149639 (ite (= ((_ extract 25 25) (bvxor ?x20491 C2)) (_ bv1 1)) (_ bv7 33) (ite (= ((_ extract 24 24) (bvxor ?x20491 C2)) (_ bv1 1)) (_ bv8 33) ?x149647))))
 (let ((?x149626 (ite (= ((_ extract 27 27) (bvxor ?x20491 C2)) (_ bv1 1)) (_ bv5 33) (ite (= ((_ extract 26 26) (bvxor ?x20491 C2)) (_ bv1 1)) (_ bv6 33) ?x149639))))
 (let ((?x149614 (ite (= ((_ extract 29 29) (bvxor ?x20491 C2)) (_ bv1 1)) (_ bv3 33) (ite (= ((_ extract 28 28) (bvxor ?x20491 C2)) (_ bv1 1)) (_ bv4 33) ?x149626))))
 (let ((?x149606 (ite (= ((_ extract 31 31) (bvxor ?x20491 C2)) (_ bv1 1)) (_ bv1 33) (ite (= ((_ extract 30 30) (bvxor ?x20491 C2)) (_ bv1 1)) (_ bv2 33) ?x149614))))
 (let ((?x149586 (bvshl (_ bv1 33) (bvsub (_ bv33 33) (ite (= ((_ extract 32 32) (bvxor ?x20491 C2)) (_ bv1 1)) (_ bv0 33) ?x149606)))))
 (let (($x149065 (=> $x131713 (= (bvand %B (bvsub ?x149586 (_ bv1 33))) (_ bv0 33)))))
 (and $x149065 $x149544 $x148548 $x927))))))))))))))))))))))))))))
(check-sat)
