(set-info :status unknown)
(declare-fun mem0 () (_ BitVec 8))
(declare-fun %p2 () (_ BitVec 64))
(declare-fun idx () (_ BitVec 64))
(declare-fun %p1 () (_ BitVec 64))
(declare-fun |ana_equivalentAddressValues(%p1, %p2)| () (_ BitVec 1))
(assert
 (let ((?x9877 (concat ((_ extract 7 7) mem0) ((_ extract 6 0) (concat (concat mem0 mem0) ((_ extract 6 0) mem0))))))
 (let (($x14853 (or true true)))
 (let (($x18224 (and (distinct %p2 (_ bv0 64)) true)))
 (let (($x6978 (and (distinct %p1 (_ bv0 64)) true)))
 (let ((?x3500 (ite (and $x6978 $x14853 $x6978 $x14853 $x6978 $x14853 $x18224 $x14853 (= idx %p2)) ?x9877 mem0)))
 (let (($x10401 (and $x6978 $x14853 $x6978 $x14853 $x6978 $x14853 $x18224 $x14853 (= idx (bvadd (bvadd %p2 (_ bv1 64)) (_ bv0 64))))))
 (let ((?x5623 (ite $x10401 ((_ extract 14 7) (concat (concat mem0 mem0) ((_ extract 6 0) mem0))) ?x3500)))
 (let (($x16437 (and $x6978 $x14853 $x6978 $x14853 $x6978 $x14853 $x18224 $x14853 (= idx (bvadd (bvadd %p2 (_ bv1 64)) (_ bv1 64))))))
 (let ((?x14986 (ite $x16437 ((_ extract 22 15) (concat (concat mem0 mem0) ((_ extract 6 0) mem0))) ?x5623)))
 (let (($x13808 (= |ana_equivalentAddressValues(%p1, %p2)| (_ bv1 1))))
 (and (=> $x13808 (= %p1 %p2)) $x13808 (and (distinct ?x14986 mem0) true)))))))))))))
(check-sat)
