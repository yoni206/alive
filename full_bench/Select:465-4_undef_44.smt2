(set-info :status unknown)
(declare-fun C2 () (_ BitVec 11))
(declare-fun C1 () (_ BitVec 52))
(assert
 (let ((?x4475 (ite (and (distinct ((_ extract 2 2) C2) (_ bv0 1)) true) (_ bv2 52) (ite (and (distinct ((_ extract 1 1) C2) (_ bv0 1)) true) (_ bv1 52) (_ bv0 52)))))
 (let ((?x3731 (ite (and (distinct ((_ extract 5 5) C2) (_ bv0 1)) true) (_ bv5 52) (ite (and (distinct ((_ extract 4 4) C2) (_ bv0 1)) true) (_ bv4 52) (_ bv3 52)))))
 (let ((?x2086 (ite (and (distinct ((_ extract 8 8) C2) (_ bv0 1)) true) (_ bv8 52) (ite (and (distinct ((_ extract 7 7) C2) (_ bv0 1)) true) (_ bv7 52) (_ bv6 52)))))
 (let ((?x5194 (ite (and (distinct ((_ extract 10 9) C2) (_ bv0 2)) true) (ite (and (distinct ((_ extract 10 10) C2) (_ bv0 1)) true) (_ bv10 52) (_ bv9 52)) ?x2086)))
 (let ((?x1901 (ite (and (distinct ((_ extract 10 6) C2) (_ bv0 5)) true) ?x5194 (ite (and (distinct ((_ extract 5 3) C2) (_ bv0 3)) true) ?x3731 ?x4475))))
 (let ((?x5499 (ite (and (distinct ((_ extract 3 2) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 3 3) C1) (_ bv0 1)) true) (_ bv3 52) (_ bv2 52)) (ite (and (distinct ((_ extract 1 1) C1) (_ bv0 1)) true) (_ bv1 52) (_ bv0 52)))))
 (let ((?x4472 (ite (and (distinct ((_ extract 6 6) C1) (_ bv0 1)) true) (_ bv6 52) (ite (and (distinct ((_ extract 5 5) C1) (_ bv0 1)) true) (_ bv5 52) (_ bv4 52)))))
 (let ((?x1671 (ite (and (distinct ((_ extract 9 9) C1) (_ bv0 1)) true) (_ bv9 52) (ite (and (distinct ((_ extract 8 8) C1) (_ bv0 1)) true) (_ bv8 52) (_ bv7 52)))))
 (let ((?x6241 (ite (and (distinct ((_ extract 12 12) C1) (_ bv0 1)) true) (_ bv12 52) (ite (and (distinct ((_ extract 11 11) C1) (_ bv0 1)) true) (_ bv11 52) (_ bv10 52)))))
 (let ((?x6649 (ite (and (distinct ((_ extract 12 7) C1) (_ bv0 6)) true) (ite (and (distinct ((_ extract 12 10) C1) (_ bv0 3)) true) ?x6241 ?x1671) (ite (and (distinct ((_ extract 6 4) C1) (_ bv0 3)) true) ?x4472 ?x5499))))
 (let ((?x6150 (ite (and (distinct ((_ extract 16 15) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 16 16) C1) (_ bv0 1)) true) (_ bv16 52) (_ bv15 52)) (ite (and (distinct ((_ extract 14 14) C1) (_ bv0 1)) true) (_ bv14 52) (_ bv13 52)))))
 (let ((?x4628 (ite (and (distinct ((_ extract 19 19) C1) (_ bv0 1)) true) (_ bv19 52) (ite (and (distinct ((_ extract 18 18) C1) (_ bv0 1)) true) (_ bv18 52) (_ bv17 52)))))
 (let ((?x4567 (ite (and (distinct ((_ extract 22 22) C1) (_ bv0 1)) true) (_ bv22 52) (ite (and (distinct ((_ extract 21 21) C1) (_ bv0 1)) true) (_ bv21 52) (_ bv20 52)))))
 (let ((?x6070 (ite (and (distinct ((_ extract 25 25) C1) (_ bv0 1)) true) (_ bv25 52) (ite (and (distinct ((_ extract 24 24) C1) (_ bv0 1)) true) (_ bv24 52) (_ bv23 52)))))
 (let ((?x2758 (ite (and (distinct ((_ extract 25 20) C1) (_ bv0 6)) true) (ite (and (distinct ((_ extract 25 23) C1) (_ bv0 3)) true) ?x6070 ?x4567) (ite (and (distinct ((_ extract 19 17) C1) (_ bv0 3)) true) ?x4628 ?x6150))))
 (let ((?x1455 (ite (and (distinct ((_ extract 29 28) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 29 29) C1) (_ bv0 1)) true) (_ bv29 52) (_ bv28 52)) (ite (and (distinct ((_ extract 27 27) C1) (_ bv0 1)) true) (_ bv27 52) (_ bv26 52)))))
 (let ((?x3891 (ite (and (distinct ((_ extract 32 32) C1) (_ bv0 1)) true) (_ bv32 52) (ite (and (distinct ((_ extract 31 31) C1) (_ bv0 1)) true) (_ bv31 52) (_ bv30 52)))))
 (let ((?x5498 (ite (and (distinct ((_ extract 35 35) C1) (_ bv0 1)) true) (_ bv35 52) (ite (and (distinct ((_ extract 34 34) C1) (_ bv0 1)) true) (_ bv34 52) (_ bv33 52)))))
 (let ((?x6621 (ite (and (distinct ((_ extract 38 38) C1) (_ bv0 1)) true) (_ bv38 52) (ite (and (distinct ((_ extract 37 37) C1) (_ bv0 1)) true) (_ bv37 52) (_ bv36 52)))))
 (let ((?x6069 (ite (and (distinct ((_ extract 38 33) C1) (_ bv0 6)) true) (ite (and (distinct ((_ extract 38 36) C1) (_ bv0 3)) true) ?x6621 ?x5498) (ite (and (distinct ((_ extract 32 30) C1) (_ bv0 3)) true) ?x3891 ?x1455))))
 (let ((?x6266 (ite (and (distinct ((_ extract 42 41) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 42 42) C1) (_ bv0 1)) true) (_ bv42 52) (_ bv41 52)) (ite (and (distinct ((_ extract 40 40) C1) (_ bv0 1)) true) (_ bv40 52) (_ bv39 52)))))
 (let ((?x3552 (ite (and (distinct ((_ extract 45 45) C1) (_ bv0 1)) true) (_ bv45 52) (ite (and (distinct ((_ extract 44 44) C1) (_ bv0 1)) true) (_ bv44 52) (_ bv43 52)))))
 (let ((?x1445 (ite (and (distinct ((_ extract 48 48) C1) (_ bv0 1)) true) (_ bv48 52) (ite (and (distinct ((_ extract 47 47) C1) (_ bv0 1)) true) (_ bv47 52) (_ bv46 52)))))
 (let ((?x5158 (ite (and (distinct ((_ extract 51 51) C1) (_ bv0 1)) true) (_ bv51 52) (ite (and (distinct ((_ extract 50 50) C1) (_ bv0 1)) true) (_ bv50 52) (_ bv49 52)))))
 (let ((?x3237 (ite (and (distinct ((_ extract 51 46) C1) (_ bv0 6)) true) (ite (and (distinct ((_ extract 51 49) C1) (_ bv0 3)) true) ?x5158 ?x1445) (ite (and (distinct ((_ extract 45 43) C1) (_ bv0 3)) true) ?x3552 ?x6266))))
 (let ((?x2954 (ite (and (distinct ((_ extract 51 26) C1) (_ bv0 26)) true) (ite (and (distinct ((_ extract 51 39) C1) (_ bv0 13)) true) ?x3237 ?x6069) (ite (and (distinct ((_ extract 25 13) C1) (_ bv0 13)) true) ?x2758 ?x6649))))
 (let ((?x2852 (bvsub ?x2954 ?x1901)))
 (let ((?x4858 (ite (and (distinct ((_ extract 3 2) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 3 3) C1) (_ bv0 1)) true) (_ bv3 32) (_ bv2 32)) (ite (and (distinct ((_ extract 1 1) C1) (_ bv0 1)) true) (_ bv1 32) (_ bv0 32)))))
 (let ((?x2992 (ite (and (distinct ((_ extract 6 6) C1) (_ bv0 1)) true) (_ bv6 32) (ite (and (distinct ((_ extract 5 5) C1) (_ bv0 1)) true) (_ bv5 32) (_ bv4 32)))))
 (let ((?x1122 (ite (and (distinct ((_ extract 9 9) C1) (_ bv0 1)) true) (_ bv9 32) (ite (and (distinct ((_ extract 8 8) C1) (_ bv0 1)) true) (_ bv8 32) (_ bv7 32)))))
 (let ((?x4518 (ite (and (distinct ((_ extract 12 12) C1) (_ bv0 1)) true) (_ bv12 32) (ite (and (distinct ((_ extract 11 11) C1) (_ bv0 1)) true) (_ bv11 32) (_ bv10 32)))))
 (let ((?x3661 (ite (and (distinct ((_ extract 12 7) C1) (_ bv0 6)) true) (ite (and (distinct ((_ extract 12 10) C1) (_ bv0 3)) true) ?x4518 ?x1122) (ite (and (distinct ((_ extract 6 4) C1) (_ bv0 3)) true) ?x2992 ?x4858))))
 (let ((?x3114 (ite (and (distinct ((_ extract 16 15) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 16 16) C1) (_ bv0 1)) true) (_ bv16 32) (_ bv15 32)) (ite (and (distinct ((_ extract 14 14) C1) (_ bv0 1)) true) (_ bv14 32) (_ bv13 32)))))
 (let ((?x4610 (ite (and (distinct ((_ extract 19 19) C1) (_ bv0 1)) true) (_ bv19 32) (ite (and (distinct ((_ extract 18 18) C1) (_ bv0 1)) true) (_ bv18 32) (_ bv17 32)))))
 (let ((?x6833 (ite (and (distinct ((_ extract 22 22) C1) (_ bv0 1)) true) (_ bv22 32) (ite (and (distinct ((_ extract 21 21) C1) (_ bv0 1)) true) (_ bv21 32) (_ bv20 32)))))
 (let ((?x5430 (ite (and (distinct ((_ extract 25 25) C1) (_ bv0 1)) true) (_ bv25 32) (ite (and (distinct ((_ extract 24 24) C1) (_ bv0 1)) true) (_ bv24 32) (_ bv23 32)))))
 (let ((?x3203 (ite (and (distinct ((_ extract 25 20) C1) (_ bv0 6)) true) (ite (and (distinct ((_ extract 25 23) C1) (_ bv0 3)) true) ?x5430 ?x6833) (ite (and (distinct ((_ extract 19 17) C1) (_ bv0 3)) true) ?x4610 ?x3114))))
 (let ((?x5051 (ite (and (distinct ((_ extract 29 28) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 29 29) C1) (_ bv0 1)) true) (_ bv29 32) (_ bv28 32)) (ite (and (distinct ((_ extract 27 27) C1) (_ bv0 1)) true) (_ bv27 32) (_ bv26 32)))))
 (let ((?x4791 (ite (and (distinct ((_ extract 32 32) C1) (_ bv0 1)) true) (_ bv32 32) (ite (and (distinct ((_ extract 31 31) C1) (_ bv0 1)) true) (_ bv31 32) (_ bv30 32)))))
 (let ((?x3059 (ite (and (distinct ((_ extract 35 35) C1) (_ bv0 1)) true) (_ bv35 32) (ite (and (distinct ((_ extract 34 34) C1) (_ bv0 1)) true) (_ bv34 32) (_ bv33 32)))))
 (let ((?x2728 (ite (and (distinct ((_ extract 38 38) C1) (_ bv0 1)) true) (_ bv38 32) (ite (and (distinct ((_ extract 37 37) C1) (_ bv0 1)) true) (_ bv37 32) (_ bv36 32)))))
 (let ((?x4874 (ite (and (distinct ((_ extract 38 33) C1) (_ bv0 6)) true) (ite (and (distinct ((_ extract 38 36) C1) (_ bv0 3)) true) ?x2728 ?x3059) (ite (and (distinct ((_ extract 32 30) C1) (_ bv0 3)) true) ?x4791 ?x5051))))
 (let ((?x2184 (ite (and (distinct ((_ extract 42 41) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 42 42) C1) (_ bv0 1)) true) (_ bv42 32) (_ bv41 32)) (ite (and (distinct ((_ extract 40 40) C1) (_ bv0 1)) true) (_ bv40 32) (_ bv39 32)))))
 (let ((?x6454 (ite (and (distinct ((_ extract 45 45) C1) (_ bv0 1)) true) (_ bv45 32) (ite (and (distinct ((_ extract 44 44) C1) (_ bv0 1)) true) (_ bv44 32) (_ bv43 32)))))
 (let ((?x1941 (ite (and (distinct ((_ extract 48 48) C1) (_ bv0 1)) true) (_ bv48 32) (ite (and (distinct ((_ extract 47 47) C1) (_ bv0 1)) true) (_ bv47 32) (_ bv46 32)))))
 (let ((?x2460 (ite (and (distinct ((_ extract 51 51) C1) (_ bv0 1)) true) (_ bv51 32) (ite (and (distinct ((_ extract 50 50) C1) (_ bv0 1)) true) (_ bv50 32) (_ bv49 32)))))
 (let ((?x1865 (ite (and (distinct ((_ extract 51 46) C1) (_ bv0 6)) true) (ite (and (distinct ((_ extract 51 49) C1) (_ bv0 3)) true) ?x2460 ?x1941) (ite (and (distinct ((_ extract 45 43) C1) (_ bv0 3)) true) ?x6454 ?x2184))))
 (let ((?x2700 (ite (and (distinct ((_ extract 51 26) C1) (_ bv0 26)) true) (ite (and (distinct ((_ extract 51 39) C1) (_ bv0 13)) true) ?x1865 ?x4874) (ite (and (distinct ((_ extract 25 13) C1) (_ bv0 13)) true) ?x3203 ?x3661))))
 (let ((?x6632 (ite (and (distinct ((_ extract 2 2) C2) (_ bv0 1)) true) (_ bv2 32) (ite (and (distinct ((_ extract 1 1) C2) (_ bv0 1)) true) (_ bv1 32) (_ bv0 32)))))
 (let ((?x3081 (ite (and (distinct ((_ extract 5 5) C2) (_ bv0 1)) true) (_ bv5 32) (ite (and (distinct ((_ extract 4 4) C2) (_ bv0 1)) true) (_ bv4 32) (_ bv3 32)))))
 (let ((?x4462 (ite (and (distinct ((_ extract 8 8) C2) (_ bv0 1)) true) (_ bv8 32) (ite (and (distinct ((_ extract 7 7) C2) (_ bv0 1)) true) (_ bv7 32) (_ bv6 32)))))
 (let ((?x5396 (ite (and (distinct ((_ extract 10 9) C2) (_ bv0 2)) true) (ite (and (distinct ((_ extract 10 10) C2) (_ bv0 1)) true) (_ bv10 32) (_ bv9 32)) ?x4462)))
 (let ((?x4489 (ite (and (distinct ((_ extract 10 6) C2) (_ bv0 5)) true) ?x5396 (ite (and (distinct ((_ extract 5 3) C2) (_ bv0 3)) true) ?x3081 ?x6632))))
 (and (and (and (distinct C1 (_ bv0 52)) true) (= (bvand C1 (bvsub C1 (_ bv1 52))) (_ bv0 52))) (and (and (distinct C2 (_ bv0 11)) true) (= (bvand C2 (bvsub C2 (_ bv1 11))) (_ bv0 11))) (bvslt ?x4489 ?x2700) (not (bvult ?x2852 (_ bv52 52))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
