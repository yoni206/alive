(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun mem0 () (_ BitVec 8))
(declare-fun |ana_MaskedValueIsZero(%B, ((1 << (width(C2) - countLeadingZeros(((C2 - 1) ^ C2)))) - 1))| () (_ BitVec 1))
(declare-fun C2 () (_ BitVec 20))
(declare-fun C1 () (_ BitVec 20))
(declare-fun %B () (_ BitVec 20))
(assert
 (let (($x927 (and (distinct mem0 mem0) true)))
 (let (($x131713 (= |ana_MaskedValueIsZero(%B, ((1 << (width(C2) - countLeadingZeros(((C2 - 1) ^ C2)))) - 1))| (_ bv1 1))))
 (let ((?x16612 (bvsub C2 (_ bv1 20))))
 (let ((?x144812 (bvor ?x16612 C2)))
 (let (($x145393 (and (and (distinct ?x144812 (_ bv0 20)) true) (= (bvand (bvadd ?x144812 (_ bv1 20)) ?x144812) (_ bv0 20)) $x131713)))
 (let (($x145108 (or (= (bvand (bvadd C2 (_ bv1 20)) (bvsub (bvadd C2 (_ bv1 20)) (_ bv1 20))) (_ bv0 20)) $x145393)))
 (let ((?x129932 (bvand C1 C2)))
 (let (($x144987 (= ?x129932 C2)))
 (let ((?x135393 (ite (= ((_ extract 1 1) (bvxor ?x16612 C2)) (_ bv1 1)) (_ bv18 20) (ite (= ((_ extract 0 0) (bvxor ?x16612 C2)) (_ bv1 1)) (_ bv19 20) (_ bv20 20)))))
 (let ((?x141103 (ite (= ((_ extract 3 3) (bvxor ?x16612 C2)) (_ bv1 1)) (_ bv16 20) (ite (= ((_ extract 2 2) (bvxor ?x16612 C2)) (_ bv1 1)) (_ bv17 20) ?x135393))))
 (let ((?x144581 (ite (= ((_ extract 5 5) (bvxor ?x16612 C2)) (_ bv1 1)) (_ bv14 20) (ite (= ((_ extract 4 4) (bvxor ?x16612 C2)) (_ bv1 1)) (_ bv15 20) ?x141103))))
 (let ((?x140638 (ite (= ((_ extract 7 7) (bvxor ?x16612 C2)) (_ bv1 1)) (_ bv12 20) (ite (= ((_ extract 6 6) (bvxor ?x16612 C2)) (_ bv1 1)) (_ bv13 20) ?x144581))))
 (let ((?x141850 (ite (= ((_ extract 9 9) (bvxor ?x16612 C2)) (_ bv1 1)) (_ bv10 20) (ite (= ((_ extract 8 8) (bvxor ?x16612 C2)) (_ bv1 1)) (_ bv11 20) ?x140638))))
 (let ((?x141257 (ite (= ((_ extract 11 11) (bvxor ?x16612 C2)) (_ bv1 1)) (_ bv8 20) (ite (= ((_ extract 10 10) (bvxor ?x16612 C2)) (_ bv1 1)) (_ bv9 20) ?x141850))))
 (let ((?x143556 (ite (= ((_ extract 13 13) (bvxor ?x16612 C2)) (_ bv1 1)) (_ bv6 20) (ite (= ((_ extract 12 12) (bvxor ?x16612 C2)) (_ bv1 1)) (_ bv7 20) ?x141257))))
 (let ((?x148076 (ite (= ((_ extract 15 15) (bvxor ?x16612 C2)) (_ bv1 1)) (_ bv4 20) (ite (= ((_ extract 14 14) (bvxor ?x16612 C2)) (_ bv1 1)) (_ bv5 20) ?x143556))))
 (let ((?x143757 (ite (= ((_ extract 17 17) (bvxor ?x16612 C2)) (_ bv1 1)) (_ bv2 20) (ite (= ((_ extract 16 16) (bvxor ?x16612 C2)) (_ bv1 1)) (_ bv3 20) ?x148076))))
 (let ((?x143951 (ite (= ((_ extract 19 19) (bvxor ?x16612 C2)) (_ bv1 1)) (_ bv0 20) (ite (= ((_ extract 18 18) (bvxor ?x16612 C2)) (_ bv1 1)) (_ bv1 20) ?x143757))))
 (let (($x145525 (=> $x131713 (= (bvand %B (bvsub (bvshl (_ bv1 20) (bvsub (_ bv20 20) ?x143951)) (_ bv1 20))) (_ bv0 20)))))
 (and $x145525 $x144987 $x145108 $x927)))))))))))))))))))))
(check-sat)
