(set-info :status unknown)
(declare-fun mem0 () (_ BitVec 8))
(declare-fun C () (_ BitVec 44))
(declare-fun C2 () (_ BitVec 11))
(declare-fun C3 () (_ BitVec 11))
(assert
 (let ((?x18131 (ite (and (distinct ((_ extract 2 2) C) (_ bv0 1)) true) (_ bv2 32) (ite (and (distinct ((_ extract 1 1) C) (_ bv0 1)) true) (_ bv1 32) (_ bv0 32)))))
 (let ((?x15773 (ite (and (distinct ((_ extract 5 5) C) (_ bv0 1)) true) (_ bv5 32) (ite (and (distinct ((_ extract 4 4) C) (_ bv0 1)) true) (_ bv4 32) (_ bv3 32)))))
 (let ((?x11814 (ite (and (distinct ((_ extract 8 8) C) (_ bv0 1)) true) (_ bv8 32) (ite (and (distinct ((_ extract 7 7) C) (_ bv0 1)) true) (_ bv7 32) (_ bv6 32)))))
 (let ((?x11579 (ite (and (distinct ((_ extract 10 9) C) (_ bv0 2)) true) (ite (and (distinct ((_ extract 10 10) C) (_ bv0 1)) true) (_ bv10 32) (_ bv9 32)) ?x11814)))
 (let ((?x17290 (ite (and (distinct ((_ extract 10 6) C) (_ bv0 5)) true) ?x11579 (ite (and (distinct ((_ extract 5 3) C) (_ bv0 3)) true) ?x15773 ?x18131))))
 (let ((?x8665 (ite (and (distinct ((_ extract 13 13) C) (_ bv0 1)) true) (_ bv13 32) (ite (and (distinct ((_ extract 12 12) C) (_ bv0 1)) true) (_ bv12 32) (_ bv11 32)))))
 (let ((?x8410 (ite (and (distinct ((_ extract 16 16) C) (_ bv0 1)) true) (_ bv16 32) (ite (and (distinct ((_ extract 15 15) C) (_ bv0 1)) true) (_ bv15 32) (_ bv14 32)))))
 (let ((?x7022 (ite (and (distinct ((_ extract 19 19) C) (_ bv0 1)) true) (_ bv19 32) (ite (and (distinct ((_ extract 18 18) C) (_ bv0 1)) true) (_ bv18 32) (_ bv17 32)))))
 (let ((?x6538 (ite (and (distinct ((_ extract 21 20) C) (_ bv0 2)) true) (ite (and (distinct ((_ extract 21 21) C) (_ bv0 1)) true) (_ bv21 32) (_ bv20 32)) ?x7022)))
 (let ((?x9640 (ite (and (distinct ((_ extract 21 17) C) (_ bv0 5)) true) ?x6538 (ite (and (distinct ((_ extract 16 14) C) (_ bv0 3)) true) ?x8410 ?x8665))))
 (let ((?x3358 (ite (and (distinct ((_ extract 24 24) C) (_ bv0 1)) true) (_ bv24 32) (ite (and (distinct ((_ extract 23 23) C) (_ bv0 1)) true) (_ bv23 32) (_ bv22 32)))))
 (let ((?x9008 (ite (and (distinct ((_ extract 27 27) C) (_ bv0 1)) true) (_ bv27 32) (ite (and (distinct ((_ extract 26 26) C) (_ bv0 1)) true) (_ bv26 32) (_ bv25 32)))))
 (let ((?x14525 (ite (and (distinct ((_ extract 30 30) C) (_ bv0 1)) true) (_ bv30 32) (ite (and (distinct ((_ extract 29 29) C) (_ bv0 1)) true) (_ bv29 32) (_ bv28 32)))))
 (let ((?x8039 (ite (and (distinct ((_ extract 32 31) C) (_ bv0 2)) true) (ite (and (distinct ((_ extract 32 32) C) (_ bv0 1)) true) (_ bv32 32) (_ bv31 32)) ?x14525)))
 (let ((?x3458 (ite (and (distinct ((_ extract 32 28) C) (_ bv0 5)) true) ?x8039 (ite (and (distinct ((_ extract 27 25) C) (_ bv0 3)) true) ?x9008 ?x3358))))
 (let ((?x14622 (ite (and (distinct ((_ extract 35 35) C) (_ bv0 1)) true) (_ bv35 32) (ite (and (distinct ((_ extract 34 34) C) (_ bv0 1)) true) (_ bv34 32) (_ bv33 32)))))
 (let ((?x19178 (ite (and (distinct ((_ extract 38 38) C) (_ bv0 1)) true) (_ bv38 32) (ite (and (distinct ((_ extract 37 37) C) (_ bv0 1)) true) (_ bv37 32) (_ bv36 32)))))
 (let ((?x5300 (ite (and (distinct ((_ extract 41 41) C) (_ bv0 1)) true) (_ bv41 32) (ite (and (distinct ((_ extract 40 40) C) (_ bv0 1)) true) (_ bv40 32) (_ bv39 32)))))
 (let ((?x4792 (ite (and (distinct ((_ extract 43 42) C) (_ bv0 2)) true) (ite (and (distinct ((_ extract 43 43) C) (_ bv0 1)) true) (_ bv43 32) (_ bv42 32)) ?x5300)))
 (let ((?x24505 (ite (and (distinct ((_ extract 43 39) C) (_ bv0 5)) true) ?x4792 (ite (and (distinct ((_ extract 38 36) C) (_ bv0 3)) true) ?x19178 ?x14622))))
 (let ((?x19233 (ite (and (distinct ((_ extract 43 22) C) (_ bv0 22)) true) (ite (and (distinct ((_ extract 43 33) C) (_ bv0 11)) true) ?x24505 ?x3458) (ite (and (distinct ((_ extract 21 11) C) (_ bv0 11)) true) ?x9640 ?x17290))))
 (let (($x15079 (and (and (distinct (bvsub C3 C2) (_ bv0 11)) true) (= (bvand (bvsub C3 C2) (bvsub (bvsub C3 C2) (_ bv1 11))) (_ bv0 11)))))
 (and (and (and (distinct C (_ bv0 44)) true) (= (bvand C (bvsub C (_ bv1 44))) (_ bv0 44))) $x15079 (bvslt ?x19233 (_ bv11 32)) (and (distinct mem0 mem0) true)))))))))))))))))))))))))
(check-sat)
