(set-info :status unknown)
(declare-fun mem0 () (_ BitVec 8))
(declare-fun %y () (_ BitVec 8))
(declare-fun %p2 () (_ BitVec 64))
(declare-fun idx () (_ BitVec 64))
(declare-fun %x () (_ BitVec 8))
(declare-fun %p1 () (_ BitVec 64))
(declare-fun |ana_equivalentAddressValues(%p1, %p2)| () (_ BitVec 1))
(assert
 (let (($x13454 (or true true)))
 (let (($x15278 (and (distinct %p2 (_ bv0 64)) true)))
 (let ((?x10015 (ite (and $x15278 $x13454 (= idx (bvadd %p2 (_ bv0 64)))) ((_ extract 7 0) %y) mem0)))
 (let ((?x8220 (ite (and (and (distinct %p1 (_ bv0 64)) true) $x13454 (= idx (bvadd %p1 (_ bv0 64)))) ((_ extract 7 0) %x) mem0)))
 (let (($x17212 (and (distinct %p1 (_ bv0 64)) true)))
 (let ((?x14866 (ite (and $x17212 $x13454 $x15278 $x13454 (= idx (bvadd %p2 (_ bv0 64)))) ((_ extract 7 0) %y) ?x8220)))
 (let (($x19989 (= |ana_equivalentAddressValues(%p1, %p2)| (_ bv1 1))))
 (and (=> $x19989 (= %p1 %p2)) $x19989 (and (distinct ?x14866 ?x10015) true))))))))))
(check-sat)
