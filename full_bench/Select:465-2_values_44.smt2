(set-info :status unknown)
(declare-fun %Y () (_ BitVec 11))
(declare-fun C2 () (_ BitVec 11))
(declare-fun C1 () (_ BitVec 48))
(declare-fun %X () (_ BitVec 48))
(assert
 (let ((?x4871 (ite (and (distinct ((_ extract 2 2) C1) (_ bv0 1)) true) (_ bv2 11) (ite (and (distinct ((_ extract 1 1) C1) (_ bv0 1)) true) (_ bv1 11) (_ bv0 11)))))
 (let ((?x2422 (ite (and (distinct ((_ extract 5 5) C1) (_ bv0 1)) true) (_ bv5 11) (ite (and (distinct ((_ extract 4 4) C1) (_ bv0 1)) true) (_ bv4 11) (_ bv3 11)))))
 (let ((?x5415 (ite (and (distinct ((_ extract 8 8) C1) (_ bv0 1)) true) (_ bv8 11) (ite (and (distinct ((_ extract 7 7) C1) (_ bv0 1)) true) (_ bv7 11) (_ bv6 11)))))
 (let ((?x1685 (ite (and (distinct ((_ extract 11 11) C1) (_ bv0 1)) true) (_ bv11 11) (ite (and (distinct ((_ extract 10 10) C1) (_ bv0 1)) true) (_ bv10 11) (_ bv9 11)))))
 (let ((?x1522 (ite (and (distinct ((_ extract 11 6) C1) (_ bv0 6)) true) (ite (and (distinct ((_ extract 11 9) C1) (_ bv0 3)) true) ?x1685 ?x5415) (ite (and (distinct ((_ extract 5 3) C1) (_ bv0 3)) true) ?x2422 ?x4871))))
 (let ((?x1286 (ite (and (distinct ((_ extract 14 14) C1) (_ bv0 1)) true) (_ bv14 11) (ite (and (distinct ((_ extract 13 13) C1) (_ bv0 1)) true) (_ bv13 11) (_ bv12 11)))))
 (let ((?x5583 (ite (and (distinct ((_ extract 17 17) C1) (_ bv0 1)) true) (_ bv17 11) (ite (and (distinct ((_ extract 16 16) C1) (_ bv0 1)) true) (_ bv16 11) (_ bv15 11)))))
 (let ((?x4010 (ite (and (distinct ((_ extract 20 20) C1) (_ bv0 1)) true) (_ bv20 11) (ite (and (distinct ((_ extract 19 19) C1) (_ bv0 1)) true) (_ bv19 11) (_ bv18 11)))))
 (let ((?x4544 (ite (and (distinct ((_ extract 23 23) C1) (_ bv0 1)) true) (_ bv23 11) (ite (and (distinct ((_ extract 22 22) C1) (_ bv0 1)) true) (_ bv22 11) (_ bv21 11)))))
 (let ((?x3055 (ite (and (distinct ((_ extract 23 18) C1) (_ bv0 6)) true) (ite (and (distinct ((_ extract 23 21) C1) (_ bv0 3)) true) ?x4544 ?x4010) (ite (and (distinct ((_ extract 17 15) C1) (_ bv0 3)) true) ?x5583 ?x1286))))
 (let ((?x3308 (ite (and (distinct ((_ extract 26 26) C1) (_ bv0 1)) true) (_ bv26 11) (ite (and (distinct ((_ extract 25 25) C1) (_ bv0 1)) true) (_ bv25 11) (_ bv24 11)))))
 (let ((?x3279 (ite (and (distinct ((_ extract 29 29) C1) (_ bv0 1)) true) (_ bv29 11) (ite (and (distinct ((_ extract 28 28) C1) (_ bv0 1)) true) (_ bv28 11) (_ bv27 11)))))
 (let ((?x2376 (ite (and (distinct ((_ extract 32 32) C1) (_ bv0 1)) true) (_ bv32 11) (ite (and (distinct ((_ extract 31 31) C1) (_ bv0 1)) true) (_ bv31 11) (_ bv30 11)))))
 (let ((?x1623 (ite (and (distinct ((_ extract 35 35) C1) (_ bv0 1)) true) (_ bv35 11) (ite (and (distinct ((_ extract 34 34) C1) (_ bv0 1)) true) (_ bv34 11) (_ bv33 11)))))
 (let ((?x3058 (ite (and (distinct ((_ extract 35 30) C1) (_ bv0 6)) true) (ite (and (distinct ((_ extract 35 33) C1) (_ bv0 3)) true) ?x1623 ?x2376) (ite (and (distinct ((_ extract 29 27) C1) (_ bv0 3)) true) ?x3279 ?x3308))))
 (let ((?x1705 (ite (and (distinct ((_ extract 38 38) C1) (_ bv0 1)) true) (_ bv38 11) (ite (and (distinct ((_ extract 37 37) C1) (_ bv0 1)) true) (_ bv37 11) (_ bv36 11)))))
 (let ((?x3276 (ite (and (distinct ((_ extract 41 41) C1) (_ bv0 1)) true) (_ bv41 11) (ite (and (distinct ((_ extract 40 40) C1) (_ bv0 1)) true) (_ bv40 11) (_ bv39 11)))))
 (let ((?x2888 (ite (and (distinct ((_ extract 44 44) C1) (_ bv0 1)) true) (_ bv44 11) (ite (and (distinct ((_ extract 43 43) C1) (_ bv0 1)) true) (_ bv43 11) (_ bv42 11)))))
 (let ((?x1338 (ite (and (distinct ((_ extract 47 47) C1) (_ bv0 1)) true) (_ bv47 11) (ite (and (distinct ((_ extract 46 46) C1) (_ bv0 1)) true) (_ bv46 11) (_ bv45 11)))))
 (let ((?x1515 (ite (and (distinct ((_ extract 47 42) C1) (_ bv0 6)) true) (ite (and (distinct ((_ extract 47 45) C1) (_ bv0 3)) true) ?x1338 ?x2888) (ite (and (distinct ((_ extract 41 39) C1) (_ bv0 3)) true) ?x3276 ?x1705))))
 (let ((?x2421 (ite (and (distinct ((_ extract 47 24) C1) (_ bv0 24)) true) (ite (and (distinct ((_ extract 47 36) C1) (_ bv0 12)) true) ?x1515 ?x3058) (ite (and (distinct ((_ extract 23 12) C1) (_ bv0 12)) true) ?x3055 ?x1522))))
 (let ((?x4100 (ite (and (distinct ((_ extract 2 2) C2) (_ bv0 1)) true) (_ bv2 11) (ite (and (distinct ((_ extract 1 1) C2) (_ bv0 1)) true) (_ bv1 11) (_ bv0 11)))))
 (let ((?x4393 (ite (and (distinct ((_ extract 5 5) C2) (_ bv0 1)) true) (_ bv5 11) (ite (and (distinct ((_ extract 4 4) C2) (_ bv0 1)) true) (_ bv4 11) (_ bv3 11)))))
 (let ((?x3558 (ite (and (distinct ((_ extract 8 8) C2) (_ bv0 1)) true) (_ bv8 11) (ite (and (distinct ((_ extract 7 7) C2) (_ bv0 1)) true) (_ bv7 11) (_ bv6 11)))))
 (let ((?x2925 (ite (and (distinct ((_ extract 10 9) C2) (_ bv0 2)) true) (ite (and (distinct ((_ extract 10 10) C2) (_ bv0 1)) true) (_ bv10 11) (_ bv9 11)) ?x3558)))
 (let ((?x2582 (ite (and (distinct ((_ extract 10 6) C2) (_ bv0 5)) true) ?x2925 (ite (and (distinct ((_ extract 5 3) C2) (_ bv0 3)) true) ?x4393 ?x4100))))
 (let ((?x4980 (bvsub ?x2582 ?x2421)))
 (let ((?x2150 (bvor %Y C2)))
 (let ((?x3273 (ite (= (ite (and (distinct (bvand %X C1) (_ bv0 48)) true) (_ bv1 1) (_ bv0 1)) (_ bv1 1)) %Y ?x2150)))
 (let (($x4864 (and (distinct ?x3273 (bvor (bvxor (bvshl ((_ extract 10 0) (bvand %X C1)) ?x4980) C2) %Y)) true)))
 (let ((?x1996 (ite (and (distinct ((_ extract 2 2) C1) (_ bv0 1)) true) (_ bv2 32) (ite (and (distinct ((_ extract 1 1) C1) (_ bv0 1)) true) (_ bv1 32) (_ bv0 32)))))
 (let ((?x3104 (ite (and (distinct ((_ extract 5 5) C1) (_ bv0 1)) true) (_ bv5 32) (ite (and (distinct ((_ extract 4 4) C1) (_ bv0 1)) true) (_ bv4 32) (_ bv3 32)))))
 (let ((?x5505 (ite (and (distinct ((_ extract 8 8) C1) (_ bv0 1)) true) (_ bv8 32) (ite (and (distinct ((_ extract 7 7) C1) (_ bv0 1)) true) (_ bv7 32) (_ bv6 32)))))
 (let ((?x5152 (ite (and (distinct ((_ extract 11 11) C1) (_ bv0 1)) true) (_ bv11 32) (ite (and (distinct ((_ extract 10 10) C1) (_ bv0 1)) true) (_ bv10 32) (_ bv9 32)))))
 (let ((?x4250 (ite (and (distinct ((_ extract 11 6) C1) (_ bv0 6)) true) (ite (and (distinct ((_ extract 11 9) C1) (_ bv0 3)) true) ?x5152 ?x5505) (ite (and (distinct ((_ extract 5 3) C1) (_ bv0 3)) true) ?x3104 ?x1996))))
 (let ((?x1804 (ite (and (distinct ((_ extract 14 14) C1) (_ bv0 1)) true) (_ bv14 32) (ite (and (distinct ((_ extract 13 13) C1) (_ bv0 1)) true) (_ bv13 32) (_ bv12 32)))))
 (let ((?x5504 (ite (and (distinct ((_ extract 17 17) C1) (_ bv0 1)) true) (_ bv17 32) (ite (and (distinct ((_ extract 16 16) C1) (_ bv0 1)) true) (_ bv16 32) (_ bv15 32)))))
 (let ((?x5204 (ite (and (distinct ((_ extract 20 20) C1) (_ bv0 1)) true) (_ bv20 32) (ite (and (distinct ((_ extract 19 19) C1) (_ bv0 1)) true) (_ bv19 32) (_ bv18 32)))))
 (let ((?x3683 (ite (and (distinct ((_ extract 23 23) C1) (_ bv0 1)) true) (_ bv23 32) (ite (and (distinct ((_ extract 22 22) C1) (_ bv0 1)) true) (_ bv22 32) (_ bv21 32)))))
 (let ((?x2557 (ite (and (distinct ((_ extract 23 18) C1) (_ bv0 6)) true) (ite (and (distinct ((_ extract 23 21) C1) (_ bv0 3)) true) ?x3683 ?x5204) (ite (and (distinct ((_ extract 17 15) C1) (_ bv0 3)) true) ?x5504 ?x1804))))
 (let ((?x2611 (ite (and (distinct ((_ extract 26 26) C1) (_ bv0 1)) true) (_ bv26 32) (ite (and (distinct ((_ extract 25 25) C1) (_ bv0 1)) true) (_ bv25 32) (_ bv24 32)))))
 (let ((?x2349 (ite (and (distinct ((_ extract 29 29) C1) (_ bv0 1)) true) (_ bv29 32) (ite (and (distinct ((_ extract 28 28) C1) (_ bv0 1)) true) (_ bv28 32) (_ bv27 32)))))
 (let ((?x1779 (ite (and (distinct ((_ extract 32 32) C1) (_ bv0 1)) true) (_ bv32 32) (ite (and (distinct ((_ extract 31 31) C1) (_ bv0 1)) true) (_ bv31 32) (_ bv30 32)))))
 (let ((?x1566 (ite (and (distinct ((_ extract 35 35) C1) (_ bv0 1)) true) (_ bv35 32) (ite (and (distinct ((_ extract 34 34) C1) (_ bv0 1)) true) (_ bv34 32) (_ bv33 32)))))
 (let ((?x2385 (ite (and (distinct ((_ extract 35 30) C1) (_ bv0 6)) true) (ite (and (distinct ((_ extract 35 33) C1) (_ bv0 3)) true) ?x1566 ?x1779) (ite (and (distinct ((_ extract 29 27) C1) (_ bv0 3)) true) ?x2349 ?x2611))))
 (let ((?x1510 (ite (and (distinct ((_ extract 38 38) C1) (_ bv0 1)) true) (_ bv38 32) (ite (and (distinct ((_ extract 37 37) C1) (_ bv0 1)) true) (_ bv37 32) (_ bv36 32)))))
 (let ((?x2395 (ite (and (distinct ((_ extract 41 41) C1) (_ bv0 1)) true) (_ bv41 32) (ite (and (distinct ((_ extract 40 40) C1) (_ bv0 1)) true) (_ bv40 32) (_ bv39 32)))))
 (let ((?x2985 (ite (and (distinct ((_ extract 44 44) C1) (_ bv0 1)) true) (_ bv44 32) (ite (and (distinct ((_ extract 43 43) C1) (_ bv0 1)) true) (_ bv43 32) (_ bv42 32)))))
 (let ((?x1900 (ite (and (distinct ((_ extract 47 47) C1) (_ bv0 1)) true) (_ bv47 32) (ite (and (distinct ((_ extract 46 46) C1) (_ bv0 1)) true) (_ bv46 32) (_ bv45 32)))))
 (let ((?x1320 (ite (and (distinct ((_ extract 47 42) C1) (_ bv0 6)) true) (ite (and (distinct ((_ extract 47 45) C1) (_ bv0 3)) true) ?x1900 ?x2985) (ite (and (distinct ((_ extract 41 39) C1) (_ bv0 3)) true) ?x2395 ?x1510))))
 (let ((?x4312 (ite (and (distinct ((_ extract 47 24) C1) (_ bv0 24)) true) (ite (and (distinct ((_ extract 47 36) C1) (_ bv0 12)) true) ?x1320 ?x2385) (ite (and (distinct ((_ extract 23 12) C1) (_ bv0 12)) true) ?x2557 ?x4250))))
 (let ((?x5354 (ite (and (distinct ((_ extract 2 2) C2) (_ bv0 1)) true) (_ bv2 32) (ite (and (distinct ((_ extract 1 1) C2) (_ bv0 1)) true) (_ bv1 32) (_ bv0 32)))))
 (let ((?x2064 (ite (and (distinct ((_ extract 5 5) C2) (_ bv0 1)) true) (_ bv5 32) (ite (and (distinct ((_ extract 4 4) C2) (_ bv0 1)) true) (_ bv4 32) (_ bv3 32)))))
 (let ((?x3645 (ite (and (distinct ((_ extract 8 8) C2) (_ bv0 1)) true) (_ bv8 32) (ite (and (distinct ((_ extract 7 7) C2) (_ bv0 1)) true) (_ bv7 32) (_ bv6 32)))))
 (let ((?x5205 (ite (and (distinct ((_ extract 10 9) C2) (_ bv0 2)) true) (ite (and (distinct ((_ extract 10 10) C2) (_ bv0 1)) true) (_ bv10 32) (_ bv9 32)) ?x3645)))
 (let ((?x3758 (ite (and (distinct ((_ extract 10 6) C2) (_ bv0 5)) true) ?x5205 (ite (and (distinct ((_ extract 5 3) C2) (_ bv0 3)) true) ?x2064 ?x5354))))
 (and (and (and (distinct C1 (_ bv0 48)) true) (= (bvand C1 (bvsub C1 (_ bv1 48))) (_ bv0 48))) (and (and (distinct C2 (_ bv0 11)) true) (= (bvand C2 (bvsub C2 (_ bv1 11))) (_ bv0 11))) (bvsge ?x3758 ?x4312) $x4864))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
