(set-info :status unknown)
(declare-fun mem0 () (_ BitVec 8))
(declare-fun %y () (_ BitVec 64))
(declare-fun %p2 () (_ BitVec 64))
(declare-fun idx () (_ BitVec 64))
(declare-fun %x () (_ BitVec 64))
(declare-fun %p1 () (_ BitVec 64))
(declare-fun |ana_equivalentAddressValues(%p1, %p2)| () (_ BitVec 1))
(assert
 (let (($x15278 (or true true)))
 (let (($x13454 (and (distinct %p2 (_ bv0 64)) true)))
 (let ((?x16380 (ite (and $x13454 $x15278 (= idx (bvadd %p2 (_ bv0 64)))) ((_ extract 7 0) %y) mem0)))
 (let ((?x19116 (ite (and $x13454 $x15278 (= idx (bvadd %p2 (_ bv1 64)))) ((_ extract 15 8) %y) ?x16380)))
 (let ((?x8920 (ite (and $x13454 $x15278 (= idx (bvadd %p2 (_ bv2 64)))) ((_ extract 23 16) %y) ?x19116)))
 (let ((?x3878 (ite (and $x13454 $x15278 (= idx (bvadd %p2 (_ bv3 64)))) ((_ extract 31 24) %y) ?x8920)))
 (let ((?x18382 (ite (and $x13454 $x15278 (= idx (bvadd %p2 (_ bv4 64)))) ((_ extract 39 32) %y) ?x3878)))
 (let ((?x7546 (ite (and $x13454 $x15278 (= idx (bvadd %p2 (_ bv5 64)))) ((_ extract 47 40) %y) ?x18382)))
 (let ((?x20176 (ite (and $x13454 $x15278 (= idx (bvadd %p2 (_ bv6 64)))) ((_ extract 55 48) %y) ?x7546)))
 (let ((?x21869 (ite (and $x13454 $x15278 (= idx (bvadd %p2 (_ bv7 64)))) ((_ extract 63 56) %y) ?x20176)))
 (let ((?x1668 (ite (and (and (distinct %p1 (_ bv0 64)) true) $x15278 (= idx (bvadd %p1 (_ bv0 64)))) ((_ extract 7 0) %x) mem0)))
 (let ((?x10379 (ite (and (and (distinct %p1 (_ bv0 64)) true) $x15278 (= idx (bvadd %p1 (_ bv1 64)))) ((_ extract 15 8) %x) ?x1668)))
 (let ((?x14467 (ite (and (and (distinct %p1 (_ bv0 64)) true) $x15278 (= idx (bvadd %p1 (_ bv2 64)))) ((_ extract 23 16) %x) ?x10379)))
 (let ((?x5140 (ite (and (and (distinct %p1 (_ bv0 64)) true) $x15278 (= idx (bvadd %p1 (_ bv3 64)))) ((_ extract 31 24) %x) ?x14467)))
 (let ((?x1943 (ite (and (and (distinct %p1 (_ bv0 64)) true) $x15278 (= idx (bvadd %p1 (_ bv4 64)))) ((_ extract 39 32) %x) ?x5140)))
 (let ((?x21058 (ite (and (and (distinct %p1 (_ bv0 64)) true) $x15278 (= idx (bvadd %p1 (_ bv5 64)))) ((_ extract 47 40) %x) ?x1943)))
 (let ((?x14996 (ite (and (and (distinct %p1 (_ bv0 64)) true) $x15278 (= idx (bvadd %p1 (_ bv6 64)))) ((_ extract 55 48) %x) ?x21058)))
 (let ((?x1398 (ite (and (and (distinct %p1 (_ bv0 64)) true) $x15278 (= idx (bvadd %p1 (_ bv7 64)))) ((_ extract 63 56) %x) ?x14996)))
 (let (($x17212 (and (distinct %p1 (_ bv0 64)) true)))
 (let ((?x22292 (ite (and $x17212 $x15278 $x13454 $x15278 (= idx (bvadd %p2 (_ bv0 64)))) ((_ extract 7 0) %y) ?x1398)))
 (let ((?x24307 (ite (and $x17212 $x15278 $x13454 $x15278 (= idx (bvadd %p2 (_ bv1 64)))) ((_ extract 15 8) %y) ?x22292)))
 (let ((?x12406 (ite (and $x17212 $x15278 $x13454 $x15278 (= idx (bvadd %p2 (_ bv2 64)))) ((_ extract 23 16) %y) ?x24307)))
 (let ((?x10971 (ite (and $x17212 $x15278 $x13454 $x15278 (= idx (bvadd %p2 (_ bv3 64)))) ((_ extract 31 24) %y) ?x12406)))
 (let ((?x11903 (ite (and $x17212 $x15278 $x13454 $x15278 (= idx (bvadd %p2 (_ bv4 64)))) ((_ extract 39 32) %y) ?x10971)))
 (let ((?x10432 (ite (and $x17212 $x15278 $x13454 $x15278 (= idx (bvadd %p2 (_ bv5 64)))) ((_ extract 47 40) %y) ?x11903)))
 (let ((?x6897 (ite (and $x17212 $x15278 $x13454 $x15278 (= idx (bvadd %p2 (_ bv6 64)))) ((_ extract 55 48) %y) ?x10432)))
 (let ((?x16815 (ite (and $x17212 $x15278 $x13454 $x15278 (= idx (bvadd %p2 (_ bv7 64)))) ((_ extract 63 56) %y) ?x6897)))
 (let (($x8668 (= |ana_equivalentAddressValues(%p1, %p2)| (_ bv1 1))))
 (and (=> $x8668 (= %p1 %p2)) $x8668 (and (distinct ?x16815 ?x21869) true)))))))))))))))))))))))))))))))
(check-sat)
