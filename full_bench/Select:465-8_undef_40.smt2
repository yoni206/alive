(set-info :status unknown)
(declare-fun C2 () (_ BitVec 11))
(declare-fun C1 () (_ BitVec 41))
(assert
 (let ((?x2412 (ite (and (distinct ((_ extract 2 2) C2) (_ bv0 1)) true) (_ bv2 41) (ite (and (distinct ((_ extract 1 1) C2) (_ bv0 1)) true) (_ bv1 41) (_ bv0 41)))))
 (let ((?x4778 (ite (and (distinct ((_ extract 5 5) C2) (_ bv0 1)) true) (_ bv5 41) (ite (and (distinct ((_ extract 4 4) C2) (_ bv0 1)) true) (_ bv4 41) (_ bv3 41)))))
 (let ((?x6449 (ite (and (distinct ((_ extract 8 8) C2) (_ bv0 1)) true) (_ bv8 41) (ite (and (distinct ((_ extract 7 7) C2) (_ bv0 1)) true) (_ bv7 41) (_ bv6 41)))))
 (let ((?x6319 (ite (and (distinct ((_ extract 10 9) C2) (_ bv0 2)) true) (ite (and (distinct ((_ extract 10 10) C2) (_ bv0 1)) true) (_ bv10 41) (_ bv9 41)) ?x6449)))
 (let ((?x4672 (ite (and (distinct ((_ extract 10 6) C2) (_ bv0 5)) true) ?x6319 (ite (and (distinct ((_ extract 5 3) C2) (_ bv0 3)) true) ?x4778 ?x2412))))
 (let ((?x5702 (ite (and (distinct ((_ extract 2 2) C1) (_ bv0 1)) true) (_ bv2 41) (ite (and (distinct ((_ extract 1 1) C1) (_ bv0 1)) true) (_ bv1 41) (_ bv0 41)))))
 (let ((?x4479 (ite (and (distinct ((_ extract 5 5) C1) (_ bv0 1)) true) (_ bv5 41) (ite (and (distinct ((_ extract 4 4) C1) (_ bv0 1)) true) (_ bv4 41) (_ bv3 41)))))
 (let ((?x4268 (ite (and (distinct ((_ extract 8 8) C1) (_ bv0 1)) true) (_ bv8 41) (ite (and (distinct ((_ extract 7 7) C1) (_ bv0 1)) true) (_ bv7 41) (_ bv6 41)))))
 (let ((?x3221 (ite (and (distinct ((_ extract 10 9) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 10 10) C1) (_ bv0 1)) true) (_ bv10 41) (_ bv9 41)) ?x4268)))
 (let ((?x6472 (ite (and (distinct ((_ extract 10 6) C1) (_ bv0 5)) true) ?x3221 (ite (and (distinct ((_ extract 5 3) C1) (_ bv0 3)) true) ?x4479 ?x5702))))
 (let ((?x6466 (ite (and (distinct ((_ extract 13 13) C1) (_ bv0 1)) true) (_ bv13 41) (ite (and (distinct ((_ extract 12 12) C1) (_ bv0 1)) true) (_ bv12 41) (_ bv11 41)))))
 (let ((?x3020 (ite (and (distinct ((_ extract 15 14) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 15 15) C1) (_ bv0 1)) true) (_ bv15 41) (_ bv14 41)) ?x6466)))
 (let ((?x2558 (ite (and (distinct ((_ extract 18 18) C1) (_ bv0 1)) true) (_ bv18 41) (ite (and (distinct ((_ extract 17 17) C1) (_ bv0 1)) true) (_ bv17 41) (_ bv16 41)))))
 (let ((?x1465 (ite (and (distinct ((_ extract 20 19) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 20 20) C1) (_ bv0 1)) true) (_ bv20 41) (_ bv19 41)) ?x2558)))
 (let ((?x6854 (ite (and (distinct ((_ extract 20 11) C1) (_ bv0 10)) true) (ite (and (distinct ((_ extract 20 16) C1) (_ bv0 5)) true) ?x1465 ?x3020) ?x6472)))
 (let ((?x2864 (ite (and (distinct ((_ extract 23 23) C1) (_ bv0 1)) true) (_ bv23 41) (ite (and (distinct ((_ extract 22 22) C1) (_ bv0 1)) true) (_ bv22 41) (_ bv21 41)))))
 (let ((?x5059 (ite (and (distinct ((_ extract 25 24) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 25 25) C1) (_ bv0 1)) true) (_ bv25 41) (_ bv24 41)) ?x2864)))
 (let ((?x6847 (ite (and (distinct ((_ extract 28 28) C1) (_ bv0 1)) true) (_ bv28 41) (ite (and (distinct ((_ extract 27 27) C1) (_ bv0 1)) true) (_ bv27 41) (_ bv26 41)))))
 (let ((?x5360 (ite (and (distinct ((_ extract 30 29) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 30 30) C1) (_ bv0 1)) true) (_ bv30 41) (_ bv29 41)) ?x6847)))
 (let ((?x6371 (ite (and (distinct ((_ extract 33 33) C1) (_ bv0 1)) true) (_ bv33 41) (ite (and (distinct ((_ extract 32 32) C1) (_ bv0 1)) true) (_ bv32 41) (_ bv31 41)))))
 (let ((?x3713 (ite (and (distinct ((_ extract 35 34) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 35 35) C1) (_ bv0 1)) true) (_ bv35 41) (_ bv34 41)) ?x6371)))
 (let ((?x6017 (ite (and (distinct ((_ extract 38 38) C1) (_ bv0 1)) true) (_ bv38 41) (ite (and (distinct ((_ extract 37 37) C1) (_ bv0 1)) true) (_ bv37 41) (_ bv36 41)))))
 (let ((?x4447 (ite (and (distinct ((_ extract 40 39) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 40 40) C1) (_ bv0 1)) true) (_ bv40 41) (_ bv39 41)) ?x6017)))
 (let ((?x6456 (ite (and (distinct ((_ extract 40 31) C1) (_ bv0 10)) true) (ite (and (distinct ((_ extract 40 36) C1) (_ bv0 5)) true) ?x4447 ?x3713) (ite (and (distinct ((_ extract 30 26) C1) (_ bv0 5)) true) ?x5360 ?x5059))))
 (let ((?x4039 (bvsub (ite (and (distinct ((_ extract 40 21) C1) (_ bv0 20)) true) ?x6456 ?x6854) ?x4672)))
 (let ((?x3143 (ite (and (distinct ((_ extract 2 2) C1) (_ bv0 1)) true) (_ bv2 32) (ite (and (distinct ((_ extract 1 1) C1) (_ bv0 1)) true) (_ bv1 32) (_ bv0 32)))))
 (let ((?x1212 (ite (and (distinct ((_ extract 5 5) C1) (_ bv0 1)) true) (_ bv5 32) (ite (and (distinct ((_ extract 4 4) C1) (_ bv0 1)) true) (_ bv4 32) (_ bv3 32)))))
 (let ((?x6848 (ite (and (distinct ((_ extract 8 8) C1) (_ bv0 1)) true) (_ bv8 32) (ite (and (distinct ((_ extract 7 7) C1) (_ bv0 1)) true) (_ bv7 32) (_ bv6 32)))))
 (let ((?x3799 (ite (and (distinct ((_ extract 10 9) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 10 10) C1) (_ bv0 1)) true) (_ bv10 32) (_ bv9 32)) ?x6848)))
 (let ((?x2960 (ite (and (distinct ((_ extract 10 6) C1) (_ bv0 5)) true) ?x3799 (ite (and (distinct ((_ extract 5 3) C1) (_ bv0 3)) true) ?x1212 ?x3143))))
 (let ((?x6476 (ite (and (distinct ((_ extract 13 13) C1) (_ bv0 1)) true) (_ bv13 32) (ite (and (distinct ((_ extract 12 12) C1) (_ bv0 1)) true) (_ bv12 32) (_ bv11 32)))))
 (let ((?x6366 (ite (and (distinct ((_ extract 15 14) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 15 15) C1) (_ bv0 1)) true) (_ bv15 32) (_ bv14 32)) ?x6476)))
 (let ((?x4667 (ite (and (distinct ((_ extract 18 18) C1) (_ bv0 1)) true) (_ bv18 32) (ite (and (distinct ((_ extract 17 17) C1) (_ bv0 1)) true) (_ bv17 32) (_ bv16 32)))))
 (let ((?x4411 (ite (and (distinct ((_ extract 20 19) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 20 20) C1) (_ bv0 1)) true) (_ bv20 32) (_ bv19 32)) ?x4667)))
 (let ((?x3612 (ite (and (distinct ((_ extract 20 11) C1) (_ bv0 10)) true) (ite (and (distinct ((_ extract 20 16) C1) (_ bv0 5)) true) ?x4411 ?x6366) ?x2960)))
 (let ((?x4338 (ite (and (distinct ((_ extract 23 23) C1) (_ bv0 1)) true) (_ bv23 32) (ite (and (distinct ((_ extract 22 22) C1) (_ bv0 1)) true) (_ bv22 32) (_ bv21 32)))))
 (let ((?x6450 (ite (and (distinct ((_ extract 25 24) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 25 25) C1) (_ bv0 1)) true) (_ bv25 32) (_ bv24 32)) ?x4338)))
 (let ((?x3167 (ite (and (distinct ((_ extract 28 28) C1) (_ bv0 1)) true) (_ bv28 32) (ite (and (distinct ((_ extract 27 27) C1) (_ bv0 1)) true) (_ bv27 32) (_ bv26 32)))))
 (let ((?x2481 (ite (and (distinct ((_ extract 30 29) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 30 30) C1) (_ bv0 1)) true) (_ bv30 32) (_ bv29 32)) ?x3167)))
 (let ((?x1366 (ite (and (distinct ((_ extract 33 33) C1) (_ bv0 1)) true) (_ bv33 32) (ite (and (distinct ((_ extract 32 32) C1) (_ bv0 1)) true) (_ bv32 32) (_ bv31 32)))))
 (let ((?x1308 (ite (and (distinct ((_ extract 35 34) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 35 35) C1) (_ bv0 1)) true) (_ bv35 32) (_ bv34 32)) ?x1366)))
 (let ((?x4721 (ite (and (distinct ((_ extract 38 38) C1) (_ bv0 1)) true) (_ bv38 32) (ite (and (distinct ((_ extract 37 37) C1) (_ bv0 1)) true) (_ bv37 32) (_ bv36 32)))))
 (let ((?x5998 (ite (and (distinct ((_ extract 40 39) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 40 40) C1) (_ bv0 1)) true) (_ bv40 32) (_ bv39 32)) ?x4721)))
 (let ((?x4178 (ite (and (distinct ((_ extract 40 31) C1) (_ bv0 10)) true) (ite (and (distinct ((_ extract 40 36) C1) (_ bv0 5)) true) ?x5998 ?x1308) (ite (and (distinct ((_ extract 30 26) C1) (_ bv0 5)) true) ?x2481 ?x6450))))
 (let ((?x5561 (ite (and (distinct ((_ extract 2 2) C2) (_ bv0 1)) true) (_ bv2 32) (ite (and (distinct ((_ extract 1 1) C2) (_ bv0 1)) true) (_ bv1 32) (_ bv0 32)))))
 (let ((?x4036 (ite (and (distinct ((_ extract 5 5) C2) (_ bv0 1)) true) (_ bv5 32) (ite (and (distinct ((_ extract 4 4) C2) (_ bv0 1)) true) (_ bv4 32) (_ bv3 32)))))
 (let ((?x2736 (ite (and (distinct ((_ extract 8 8) C2) (_ bv0 1)) true) (_ bv8 32) (ite (and (distinct ((_ extract 7 7) C2) (_ bv0 1)) true) (_ bv7 32) (_ bv6 32)))))
 (let ((?x3574 (ite (and (distinct ((_ extract 10 9) C2) (_ bv0 2)) true) (ite (and (distinct ((_ extract 10 10) C2) (_ bv0 1)) true) (_ bv10 32) (_ bv9 32)) ?x2736)))
 (let ((?x6413 (ite (and (distinct ((_ extract 10 6) C2) (_ bv0 5)) true) ?x3574 (ite (and (distinct ((_ extract 5 3) C2) (_ bv0 3)) true) ?x4036 ?x5561))))
 (and (and (and (distinct C1 (_ bv0 41)) true) (= (bvand C1 (bvsub C1 (_ bv1 41))) (_ bv0 41))) (and (and (distinct C2 (_ bv0 11)) true) (= (bvand C2 (bvsub C2 (_ bv1 11))) (_ bv0 11))) (bvslt ?x6413 (ite (and (distinct ((_ extract 40 21) C1) (_ bv0 20)) true) ?x4178 ?x3612)) (not (bvult ?x4039 (_ bv41 41))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
