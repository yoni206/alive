(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C2 () (_ BitVec 31))
(declare-fun %B () (_ BitVec 31))
(declare-fun %A () (_ BitVec 31))
(declare-fun C1 () (_ BitVec 31))
(declare-fun |ana_MaskedValueIsZero(%B, ((1 << (width(C2) - countLeadingZeros(((C2 - 1) ^ C2)))) - 1))| () (_ BitVec 1))
(assert
 (let (($x148768 (and (distinct (bvand (bvadd (bvand %A C1) %B) C2) (bvand (bvadd %A %B) C2)) true)))
 (let (($x131713 (= |ana_MaskedValueIsZero(%B, ((1 << (width(C2) - countLeadingZeros(((C2 - 1) ^ C2)))) - 1))| (_ bv1 1))))
 (let ((?x19414 (bvsub C2 (_ bv1 31))))
 (let ((?x149036 (bvor ?x19414 C2)))
 (let (($x148998 (and (and (distinct ?x149036 (_ bv0 31)) true) (= (bvand (bvadd ?x149036 (_ bv1 31)) ?x149036) (_ bv0 31)) $x131713)))
 (let (($x148992 (or (= (bvand (bvadd C2 (_ bv1 31)) (bvsub (bvadd C2 (_ bv1 31)) (_ bv1 31))) (_ bv0 31)) $x148998)))
 (let ((?x130581 (bvand C1 C2)))
 (let (($x149041 (= ?x130581 C2)))
 (let ((?x148739 (ite (= ((_ extract 1 1) (bvxor ?x19414 C2)) (_ bv1 1)) (_ bv29 31) (ite (= ((_ extract 0 0) (bvxor ?x19414 C2)) (_ bv1 1)) (_ bv30 31) (_ bv31 31)))))
 (let ((?x148807 (ite (= ((_ extract 3 3) (bvxor ?x19414 C2)) (_ bv1 1)) (_ bv27 31) (ite (= ((_ extract 2 2) (bvxor ?x19414 C2)) (_ bv1 1)) (_ bv28 31) ?x148739))))
 (let ((?x148812 (ite (= ((_ extract 5 5) (bvxor ?x19414 C2)) (_ bv1 1)) (_ bv25 31) (ite (= ((_ extract 4 4) (bvxor ?x19414 C2)) (_ bv1 1)) (_ bv26 31) ?x148807))))
 (let ((?x148758 (ite (= ((_ extract 7 7) (bvxor ?x19414 C2)) (_ bv1 1)) (_ bv23 31) (ite (= ((_ extract 6 6) (bvxor ?x19414 C2)) (_ bv1 1)) (_ bv24 31) ?x148812))))
 (let ((?x148747 (ite (= ((_ extract 9 9) (bvxor ?x19414 C2)) (_ bv1 1)) (_ bv21 31) (ite (= ((_ extract 8 8) (bvxor ?x19414 C2)) (_ bv1 1)) (_ bv22 31) ?x148758))))
 (let ((?x148801 (ite (= ((_ extract 11 11) (bvxor ?x19414 C2)) (_ bv1 1)) (_ bv19 31) (ite (= ((_ extract 10 10) (bvxor ?x19414 C2)) (_ bv1 1)) (_ bv20 31) ?x148747))))
 (let ((?x148794 (ite (= ((_ extract 13 13) (bvxor ?x19414 C2)) (_ bv1 1)) (_ bv17 31) (ite (= ((_ extract 12 12) (bvxor ?x19414 C2)) (_ bv1 1)) (_ bv18 31) ?x148801))))
 (let ((?x148780 (ite (= ((_ extract 15 15) (bvxor ?x19414 C2)) (_ bv1 1)) (_ bv15 31) (ite (= ((_ extract 14 14) (bvxor ?x19414 C2)) (_ bv1 1)) (_ bv16 31) ?x148794))))
 (let ((?x148844 (ite (= ((_ extract 17 17) (bvxor ?x19414 C2)) (_ bv1 1)) (_ bv13 31) (ite (= ((_ extract 16 16) (bvxor ?x19414 C2)) (_ bv1 1)) (_ bv14 31) ?x148780))))
 (let ((?x148848 (ite (= ((_ extract 19 19) (bvxor ?x19414 C2)) (_ bv1 1)) (_ bv11 31) (ite (= ((_ extract 18 18) (bvxor ?x19414 C2)) (_ bv1 1)) (_ bv12 31) ?x148844))))
 (let ((?x148813 (ite (= ((_ extract 21 21) (bvxor ?x19414 C2)) (_ bv1 1)) (_ bv9 31) (ite (= ((_ extract 20 20) (bvxor ?x19414 C2)) (_ bv1 1)) (_ bv10 31) ?x148848))))
 (let ((?x148805 (ite (= ((_ extract 23 23) (bvxor ?x19414 C2)) (_ bv1 1)) (_ bv7 31) (ite (= ((_ extract 22 22) (bvxor ?x19414 C2)) (_ bv1 1)) (_ bv8 31) ?x148813))))
 (let ((?x148846 (ite (= ((_ extract 25 25) (bvxor ?x19414 C2)) (_ bv1 1)) (_ bv5 31) (ite (= ((_ extract 24 24) (bvxor ?x19414 C2)) (_ bv1 1)) (_ bv6 31) ?x148805))))
 (let ((?x148838 (ite (= ((_ extract 27 27) (bvxor ?x19414 C2)) (_ bv1 1)) (_ bv3 31) (ite (= ((_ extract 26 26) (bvxor ?x19414 C2)) (_ bv1 1)) (_ bv4 31) ?x148846))))
 (let ((?x149105 (ite (= ((_ extract 29 29) (bvxor ?x19414 C2)) (_ bv1 1)) (_ bv1 31) (ite (= ((_ extract 28 28) (bvxor ?x19414 C2)) (_ bv1 1)) (_ bv2 31) ?x148838))))
 (let ((?x149088 (bvshl (_ bv1 31) (bvsub (_ bv31 31) (ite (= ((_ extract 30 30) (bvxor ?x19414 C2)) (_ bv1 1)) (_ bv0 31) ?x149105)))))
 (let (($x149002 (=> $x131713 (= (bvand %B (bvsub ?x149088 (_ bv1 31))) (_ bv0 31)))))
 (and $x149002 $x149041 $x148992 $x148768)))))))))))))))))))))))))))
(check-sat)
