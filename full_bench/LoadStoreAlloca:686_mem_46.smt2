(set-info :status unknown)
(declare-fun mem0 () (_ BitVec 8))
(declare-fun %p2 () (_ BitVec 64))
(declare-fun idx () (_ BitVec 64))
(declare-fun %p1 () (_ BitVec 64))
(declare-fun |ana_equivalentAddressValues(%p1, %p2)| () (_ BitVec 1))
(assert
 (let ((?x18864 (concat (concat (concat (concat (concat mem0 mem0) mem0) mem0) mem0) mem0)))
 (let ((?x24240 (concat ?x18864 ((_ extract 1 0) mem0))))
 (let (($x18865 (or true true)))
 (let (($x15642 (and (distinct %p2 (_ bv0 64)) true)))
 (let (($x4187 (and (distinct %p1 (_ bv0 64)) true)))
 (let ((?x19564 (ite (and $x4187 $x18865 $x4187 $x18865 $x4187 $x18865 $x15642 $x18865 (= idx %p2)) (concat ((_ extract 7 2) mem0) ((_ extract 1 0) ?x24240)) mem0)))
 (let (($x755 (and $x4187 $x18865 $x4187 $x18865 $x4187 $x18865 $x15642 $x18865 (= idx (bvadd (bvadd %p2 (_ bv1 64)) (_ bv0 64))))))
 (let (($x20180 (and $x4187 $x18865 $x4187 $x18865 $x4187 $x18865 $x15642 $x18865 (= idx (bvadd (bvadd %p2 (_ bv1 64)) (_ bv1 64))))))
 (let (($x16243 (and $x4187 $x18865 $x4187 $x18865 $x4187 $x18865 $x15642 $x18865 (= idx (bvadd (bvadd %p2 (_ bv1 64)) (_ bv2 64))))))
 (let ((?x15736 (ite $x16243 ((_ extract 25 18) ?x24240) (ite $x20180 ((_ extract 17 10) ?x24240) (ite $x755 ((_ extract 9 2) ?x24240) ?x19564)))))
 (let (($x6657 (and $x4187 $x18865 $x4187 $x18865 $x4187 $x18865 $x15642 $x18865 (= idx (bvadd (bvadd %p2 (_ bv1 64)) (_ bv3 64))))))
 (let (($x14385 (and $x4187 $x18865 $x4187 $x18865 $x4187 $x18865 $x15642 $x18865 (= idx (bvadd (bvadd %p2 (_ bv1 64)) (_ bv4 64))))))
 (let (($x11071 (and $x4187 $x18865 $x4187 $x18865 $x4187 $x18865 $x15642 $x18865 (= idx (bvadd (bvadd %p2 (_ bv1 64)) (_ bv5 64))))))
 (let ((?x15463 (ite $x11071 ((_ extract 49 42) ?x24240) (ite $x14385 ((_ extract 41 34) ?x24240) (ite $x6657 ((_ extract 33 26) ?x24240) ?x15736)))))
 (let (($x23024 (= |ana_equivalentAddressValues(%p1, %p2)| (_ bv1 1))))
 (and (=> $x23024 (= %p1 %p2)) $x23024 (and (distinct ?x15463 mem0) true))))))))))))))))))
(check-sat)
