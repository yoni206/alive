(set-info :status unknown)
(declare-fun %Y () (_ BitVec 11))
(declare-fun C2 () (_ BitVec 11))
(declare-fun C1 () (_ BitVec 19))
(declare-fun %X () (_ BitVec 19))
(assert
 (let ((?x6717 (ite (and (distinct ((_ extract 2 2) C2) (_ bv0 1)) true) (_ bv2 19) (ite (and (distinct ((_ extract 1 1) C2) (_ bv0 1)) true) (_ bv1 19) (_ bv0 19)))))
 (let ((?x12829 (ite (and (distinct ((_ extract 5 5) C2) (_ bv0 1)) true) (_ bv5 19) (ite (and (distinct ((_ extract 4 4) C2) (_ bv0 1)) true) (_ bv4 19) (_ bv3 19)))))
 (let ((?x2123 (ite (and (distinct ((_ extract 8 8) C2) (_ bv0 1)) true) (_ bv8 19) (ite (and (distinct ((_ extract 7 7) C2) (_ bv0 1)) true) (_ bv7 19) (_ bv6 19)))))
 (let ((?x17244 (ite (and (distinct ((_ extract 10 9) C2) (_ bv0 2)) true) (ite (and (distinct ((_ extract 10 10) C2) (_ bv0 1)) true) (_ bv10 19) (_ bv9 19)) ?x2123)))
 (let ((?x7736 (ite (and (distinct ((_ extract 10 6) C2) (_ bv0 5)) true) ?x17244 (ite (and (distinct ((_ extract 5 3) C2) (_ bv0 3)) true) ?x12829 ?x6717))))
 (let ((?x2051 (ite (and (distinct ((_ extract 2 2) C1) (_ bv0 1)) true) (_ bv2 19) (ite (and (distinct ((_ extract 1 1) C1) (_ bv0 1)) true) (_ bv1 19) (_ bv0 19)))))
 (let ((?x10965 (ite (and (distinct ((_ extract 4 3) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 4 4) C1) (_ bv0 1)) true) (_ bv4 19) (_ bv3 19)) ?x2051)))
 (let ((?x23871 (ite (and (distinct ((_ extract 7 7) C1) (_ bv0 1)) true) (_ bv7 19) (ite (and (distinct ((_ extract 6 6) C1) (_ bv0 1)) true) (_ bv6 19) (_ bv5 19)))))
 (let ((?x6144 (ite (and (distinct ((_ extract 9 8) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 9 9) C1) (_ bv0 1)) true) (_ bv9 19) (_ bv8 19)) ?x23871)))
 (let ((?x3264 (ite (and (distinct ((_ extract 12 12) C1) (_ bv0 1)) true) (_ bv12 19) (ite (and (distinct ((_ extract 11 11) C1) (_ bv0 1)) true) (_ bv11 19) (_ bv10 19)))))
 (let ((?x6439 (ite (and (distinct ((_ extract 14 13) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 14 14) C1) (_ bv0 1)) true) (_ bv14 19) (_ bv13 19)) ?x3264)))
 (let ((?x15760 (ite (and (distinct ((_ extract 18 17) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 18 18) C1) (_ bv0 1)) true) (_ bv18 19) (_ bv17 19)) (ite (and (distinct ((_ extract 16 16) C1) (_ bv0 1)) true) (_ bv16 19) (_ bv15 19)))))
 (let ((?x19568 (ite (and (distinct ((_ extract 18 10) C1) (_ bv0 9)) true) (ite (and (distinct ((_ extract 18 15) C1) (_ bv0 4)) true) ?x15760 ?x6439) (ite (and (distinct ((_ extract 9 5) C1) (_ bv0 5)) true) ?x6144 ?x10965))))
 (let ((?x7261 (bvsub ?x19568 ?x7736)))
 (let ((?x7531 (bvand %X C1)))
 (let ((?x23404 (bvor %Y C2)))
 (let (($x7042 (and (distinct (ite (= (ite (and (distinct ?x7531 (_ bv0 19)) true) (_ bv1 1) (_ bv0 1)) (_ bv1 1)) ?x23404 %Y) (bvor ((_ extract 10 0) (bvlshr ?x7531 ?x7261)) %Y)) true)))
 (let ((?x5523 (ite (and (distinct ((_ extract 2 2) C1) (_ bv0 1)) true) (_ bv2 32) (ite (and (distinct ((_ extract 1 1) C1) (_ bv0 1)) true) (_ bv1 32) (_ bv0 32)))))
 (let ((?x5264 (ite (and (distinct ((_ extract 4 3) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 4 4) C1) (_ bv0 1)) true) (_ bv4 32) (_ bv3 32)) ?x5523)))
 (let ((?x4920 (ite (and (distinct ((_ extract 7 7) C1) (_ bv0 1)) true) (_ bv7 32) (ite (and (distinct ((_ extract 6 6) C1) (_ bv0 1)) true) (_ bv6 32) (_ bv5 32)))))
 (let ((?x4860 (ite (and (distinct ((_ extract 9 8) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 9 9) C1) (_ bv0 1)) true) (_ bv9 32) (_ bv8 32)) ?x4920)))
 (let ((?x4365 (ite (and (distinct ((_ extract 12 12) C1) (_ bv0 1)) true) (_ bv12 32) (ite (and (distinct ((_ extract 11 11) C1) (_ bv0 1)) true) (_ bv11 32) (_ bv10 32)))))
 (let ((?x4057 (ite (and (distinct ((_ extract 14 13) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 14 14) C1) (_ bv0 1)) true) (_ bv14 32) (_ bv13 32)) ?x4365)))
 (let ((?x10188 (ite (and (distinct ((_ extract 18 17) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 18 18) C1) (_ bv0 1)) true) (_ bv18 32) (_ bv17 32)) (ite (and (distinct ((_ extract 16 16) C1) (_ bv0 1)) true) (_ bv16 32) (_ bv15 32)))))
 (let ((?x8833 (ite (and (distinct ((_ extract 18 10) C1) (_ bv0 9)) true) (ite (and (distinct ((_ extract 18 15) C1) (_ bv0 4)) true) ?x10188 ?x4057) (ite (and (distinct ((_ extract 9 5) C1) (_ bv0 5)) true) ?x4860 ?x5264))))
 (let ((?x14570 (ite (and (distinct ((_ extract 2 2) C2) (_ bv0 1)) true) (_ bv2 32) (ite (and (distinct ((_ extract 1 1) C2) (_ bv0 1)) true) (_ bv1 32) (_ bv0 32)))))
 (let ((?x11484 (ite (and (distinct ((_ extract 5 5) C2) (_ bv0 1)) true) (_ bv5 32) (ite (and (distinct ((_ extract 4 4) C2) (_ bv0 1)) true) (_ bv4 32) (_ bv3 32)))))
 (let ((?x6083 (ite (and (distinct ((_ extract 8 8) C2) (_ bv0 1)) true) (_ bv8 32) (ite (and (distinct ((_ extract 7 7) C2) (_ bv0 1)) true) (_ bv7 32) (_ bv6 32)))))
 (let ((?x20098 (ite (and (distinct ((_ extract 10 9) C2) (_ bv0 2)) true) (ite (and (distinct ((_ extract 10 10) C2) (_ bv0 1)) true) (_ bv10 32) (_ bv9 32)) ?x6083)))
 (let ((?x7794 (ite (and (distinct ((_ extract 10 6) C2) (_ bv0 5)) true) ?x20098 (ite (and (distinct ((_ extract 5 3) C2) (_ bv0 3)) true) ?x11484 ?x14570))))
 (and (and (and (distinct C1 (_ bv0 19)) true) (= (bvand C1 (bvsub C1 (_ bv1 19))) (_ bv0 19))) (and (and (distinct C2 (_ bv0 11)) true) (= (bvand C2 (bvsub C2 (_ bv1 11))) (_ bv0 11))) (bvslt ?x7794 ?x8833) $x7042))))))))))))))))))))))))))))))))
(check-sat)
