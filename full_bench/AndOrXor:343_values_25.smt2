(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C2 () (_ BitVec 27))
(declare-fun %B () (_ BitVec 27))
(declare-fun %A () (_ BitVec 27))
(declare-fun C1 () (_ BitVec 27))
(declare-fun |ana_MaskedValueIsZero(%B, ((1 << (width(C2) - countLeadingZeros(((C2 - 1) ^ C2)))) - 1))| () (_ BitVec 1))
(assert
 (let (($x147760 (and (distinct (bvand (bvadd (bvand %A C1) %B) C2) (bvand (bvadd %A %B) C2)) true)))
 (let (($x131713 (= |ana_MaskedValueIsZero(%B, ((1 << (width(C2) - countLeadingZeros(((C2 - 1) ^ C2)))) - 1))| (_ bv1 1))))
 (let ((?x18863 (bvsub C2 (_ bv1 27))))
 (let ((?x147862 (bvor ?x18863 C2)))
 (let (($x147763 (and (and (distinct ?x147862 (_ bv0 27)) true) (= (bvand (bvadd ?x147862 (_ bv1 27)) ?x147862) (_ bv0 27)) $x131713)))
 (let (($x147878 (or (= (bvand (bvadd C2 (_ bv1 27)) (bvsub (bvadd C2 (_ bv1 27)) (_ bv1 27))) (_ bv0 27)) $x147763)))
 (let ((?x130336 (bvand C1 C2)))
 (let (($x146185 (= ?x130336 C2)))
 (let ((?x146666 (ite (= ((_ extract 1 1) (bvxor ?x18863 C2)) (_ bv1 1)) (_ bv25 27) (ite (= ((_ extract 0 0) (bvxor ?x18863 C2)) (_ bv1 1)) (_ bv26 27) (_ bv27 27)))))
 (let ((?x147279 (ite (= ((_ extract 3 3) (bvxor ?x18863 C2)) (_ bv1 1)) (_ bv23 27) (ite (= ((_ extract 2 2) (bvxor ?x18863 C2)) (_ bv1 1)) (_ bv24 27) ?x146666))))
 (let ((?x146606 (ite (= ((_ extract 5 5) (bvxor ?x18863 C2)) (_ bv1 1)) (_ bv21 27) (ite (= ((_ extract 4 4) (bvxor ?x18863 C2)) (_ bv1 1)) (_ bv22 27) ?x147279))))
 (let ((?x146174 (ite (= ((_ extract 7 7) (bvxor ?x18863 C2)) (_ bv1 1)) (_ bv19 27) (ite (= ((_ extract 6 6) (bvxor ?x18863 C2)) (_ bv1 1)) (_ bv20 27) ?x146606))))
 (let ((?x147091 (ite (= ((_ extract 9 9) (bvxor ?x18863 C2)) (_ bv1 1)) (_ bv17 27) (ite (= ((_ extract 8 8) (bvxor ?x18863 C2)) (_ bv1 1)) (_ bv18 27) ?x146174))))
 (let ((?x147799 (ite (= ((_ extract 11 11) (bvxor ?x18863 C2)) (_ bv1 1)) (_ bv15 27) (ite (= ((_ extract 10 10) (bvxor ?x18863 C2)) (_ bv1 1)) (_ bv16 27) ?x147091))))
 (let ((?x147884 (ite (= ((_ extract 13 13) (bvxor ?x18863 C2)) (_ bv1 1)) (_ bv13 27) (ite (= ((_ extract 12 12) (bvxor ?x18863 C2)) (_ bv1 1)) (_ bv14 27) ?x147799))))
 (let ((?x147300 (ite (= ((_ extract 15 15) (bvxor ?x18863 C2)) (_ bv1 1)) (_ bv11 27) (ite (= ((_ extract 14 14) (bvxor ?x18863 C2)) (_ bv1 1)) (_ bv12 27) ?x147884))))
 (let ((?x147190 (ite (= ((_ extract 17 17) (bvxor ?x18863 C2)) (_ bv1 1)) (_ bv9 27) (ite (= ((_ extract 16 16) (bvxor ?x18863 C2)) (_ bv1 1)) (_ bv10 27) ?x147300))))
 (let ((?x147409 (ite (= ((_ extract 19 19) (bvxor ?x18863 C2)) (_ bv1 1)) (_ bv7 27) (ite (= ((_ extract 18 18) (bvxor ?x18863 C2)) (_ bv1 1)) (_ bv8 27) ?x147190))))
 (let ((?x147405 (ite (= ((_ extract 21 21) (bvxor ?x18863 C2)) (_ bv1 1)) (_ bv5 27) (ite (= ((_ extract 20 20) (bvxor ?x18863 C2)) (_ bv1 1)) (_ bv6 27) ?x147409))))
 (let ((?x147395 (ite (= ((_ extract 23 23) (bvxor ?x18863 C2)) (_ bv1 1)) (_ bv3 27) (ite (= ((_ extract 22 22) (bvxor ?x18863 C2)) (_ bv1 1)) (_ bv4 27) ?x147405))))
 (let ((?x145977 (ite (= ((_ extract 25 25) (bvxor ?x18863 C2)) (_ bv1 1)) (_ bv1 27) (ite (= ((_ extract 24 24) (bvxor ?x18863 C2)) (_ bv1 1)) (_ bv2 27) ?x147395))))
 (let ((?x147594 (bvshl (_ bv1 27) (bvsub (_ bv27 27) (ite (= ((_ extract 26 26) (bvxor ?x18863 C2)) (_ bv1 1)) (_ bv0 27) ?x145977)))))
 (let (($x145987 (=> $x131713 (= (bvand %B (bvsub ?x147594 (_ bv1 27))) (_ bv0 27)))))
 (and $x145987 $x146185 $x147878 $x147760)))))))))))))))))))))))))
(check-sat)
