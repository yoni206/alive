(set-info :status unknown)
(declare-fun %Y () (_ BitVec 11))
(declare-fun C2 () (_ BitVec 11))
(declare-fun C1 () (_ BitVec 23))
(declare-fun %X () (_ BitVec 23))
(assert
 (let ((?x9035 (ite (and (distinct ((_ extract 2 2) C2) (_ bv0 1)) true) (_ bv2 23) (ite (and (distinct ((_ extract 1 1) C2) (_ bv0 1)) true) (_ bv1 23) (_ bv0 23)))))
 (let ((?x24101 (ite (and (distinct ((_ extract 5 5) C2) (_ bv0 1)) true) (_ bv5 23) (ite (and (distinct ((_ extract 4 4) C2) (_ bv0 1)) true) (_ bv4 23) (_ bv3 23)))))
 (let ((?x7579 (ite (and (distinct ((_ extract 8 8) C2) (_ bv0 1)) true) (_ bv8 23) (ite (and (distinct ((_ extract 7 7) C2) (_ bv0 1)) true) (_ bv7 23) (_ bv6 23)))))
 (let ((?x25038 (ite (and (distinct ((_ extract 10 9) C2) (_ bv0 2)) true) (ite (and (distinct ((_ extract 10 10) C2) (_ bv0 1)) true) (_ bv10 23) (_ bv9 23)) ?x7579)))
 (let ((?x9325 (ite (and (distinct ((_ extract 10 6) C2) (_ bv0 5)) true) ?x25038 (ite (and (distinct ((_ extract 5 3) C2) (_ bv0 3)) true) ?x24101 ?x9035))))
 (let ((?x3364 (ite (and (distinct ((_ extract 2 2) C1) (_ bv0 1)) true) (_ bv2 23) (ite (and (distinct ((_ extract 1 1) C1) (_ bv0 1)) true) (_ bv1 23) (_ bv0 23)))))
 (let ((?x3488 (ite (and (distinct ((_ extract 5 5) C1) (_ bv0 1)) true) (_ bv5 23) (ite (and (distinct ((_ extract 4 4) C1) (_ bv0 1)) true) (_ bv4 23) (_ bv3 23)))))
 (let ((?x13975 (ite (and (distinct ((_ extract 8 8) C1) (_ bv0 1)) true) (_ bv8 23) (ite (and (distinct ((_ extract 7 7) C1) (_ bv0 1)) true) (_ bv7 23) (_ bv6 23)))))
 (let ((?x14632 (ite (and (distinct ((_ extract 11 11) C1) (_ bv0 1)) true) (_ bv11 23) (ite (and (distinct ((_ extract 10 10) C1) (_ bv0 1)) true) (_ bv10 23) (_ bv9 23)))))
 (let ((?x5829 (ite (and (distinct ((_ extract 11 6) C1) (_ bv0 6)) true) (ite (and (distinct ((_ extract 11 9) C1) (_ bv0 3)) true) ?x14632 ?x13975) (ite (and (distinct ((_ extract 5 3) C1) (_ bv0 3)) true) ?x3488 ?x3364))))
 (let ((?x669 (ite (and (distinct ((_ extract 14 14) C1) (_ bv0 1)) true) (_ bv14 23) (ite (and (distinct ((_ extract 13 13) C1) (_ bv0 1)) true) (_ bv13 23) (_ bv12 23)))))
 (let ((?x20925 (ite (and (distinct ((_ extract 17 17) C1) (_ bv0 1)) true) (_ bv17 23) (ite (and (distinct ((_ extract 16 16) C1) (_ bv0 1)) true) (_ bv16 23) (_ bv15 23)))))
 (let ((?x17833 (ite (and (distinct ((_ extract 20 20) C1) (_ bv0 1)) true) (_ bv20 23) (ite (and (distinct ((_ extract 19 19) C1) (_ bv0 1)) true) (_ bv19 23) (_ bv18 23)))))
 (let ((?x3766 (ite (and (distinct ((_ extract 22 21) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 22 22) C1) (_ bv0 1)) true) (_ bv22 23) (_ bv21 23)) ?x17833)))
 (let ((?x21859 (ite (and (distinct ((_ extract 22 18) C1) (_ bv0 5)) true) ?x3766 (ite (and (distinct ((_ extract 17 15) C1) (_ bv0 3)) true) ?x20925 ?x669))))
 (let ((?x9182 (bvsub (ite (and (distinct ((_ extract 22 12) C1) (_ bv0 11)) true) ?x21859 ?x5829) ?x9325)))
 (let ((?x7323 (bvand %X C1)))
 (let ((?x4999 (bvor %Y C2)))
 (let (($x13829 (and (distinct (ite (= (ite (and (distinct ?x7323 (_ bv0 23)) true) (_ bv1 1) (_ bv0 1)) (_ bv1 1)) %Y ?x4999) (bvor (bvxor ((_ extract 10 0) (bvlshr ?x7323 ?x9182)) C2) %Y)) true)))
 (let ((?x8537 (ite (and (distinct ((_ extract 2 2) C1) (_ bv0 1)) true) (_ bv2 32) (ite (and (distinct ((_ extract 1 1) C1) (_ bv0 1)) true) (_ bv1 32) (_ bv0 32)))))
 (let ((?x8011 (ite (and (distinct ((_ extract 5 5) C1) (_ bv0 1)) true) (_ bv5 32) (ite (and (distinct ((_ extract 4 4) C1) (_ bv0 1)) true) (_ bv4 32) (_ bv3 32)))))
 (let ((?x6835 (ite (and (distinct ((_ extract 8 8) C1) (_ bv0 1)) true) (_ bv8 32) (ite (and (distinct ((_ extract 7 7) C1) (_ bv0 1)) true) (_ bv7 32) (_ bv6 32)))))
 (let ((?x4501 (ite (and (distinct ((_ extract 11 11) C1) (_ bv0 1)) true) (_ bv11 32) (ite (and (distinct ((_ extract 10 10) C1) (_ bv0 1)) true) (_ bv10 32) (_ bv9 32)))))
 (let ((?x12768 (ite (and (distinct ((_ extract 11 6) C1) (_ bv0 6)) true) (ite (and (distinct ((_ extract 11 9) C1) (_ bv0 3)) true) ?x4501 ?x6835) (ite (and (distinct ((_ extract 5 3) C1) (_ bv0 3)) true) ?x8011 ?x8537))))
 (let ((?x24305 (ite (and (distinct ((_ extract 14 14) C1) (_ bv0 1)) true) (_ bv14 32) (ite (and (distinct ((_ extract 13 13) C1) (_ bv0 1)) true) (_ bv13 32) (_ bv12 32)))))
 (let ((?x13066 (ite (and (distinct ((_ extract 17 17) C1) (_ bv0 1)) true) (_ bv17 32) (ite (and (distinct ((_ extract 16 16) C1) (_ bv0 1)) true) (_ bv16 32) (_ bv15 32)))))
 (let ((?x9950 (ite (and (distinct ((_ extract 20 20) C1) (_ bv0 1)) true) (_ bv20 32) (ite (and (distinct ((_ extract 19 19) C1) (_ bv0 1)) true) (_ bv19 32) (_ bv18 32)))))
 (let ((?x6286 (ite (and (distinct ((_ extract 22 21) C1) (_ bv0 2)) true) (ite (and (distinct ((_ extract 22 22) C1) (_ bv0 1)) true) (_ bv22 32) (_ bv21 32)) ?x9950)))
 (let ((?x1668 (ite (and (distinct ((_ extract 22 18) C1) (_ bv0 5)) true) ?x6286 (ite (and (distinct ((_ extract 17 15) C1) (_ bv0 3)) true) ?x13066 ?x24305))))
 (let ((?x8965 (ite (and (distinct ((_ extract 2 2) C2) (_ bv0 1)) true) (_ bv2 32) (ite (and (distinct ((_ extract 1 1) C2) (_ bv0 1)) true) (_ bv1 32) (_ bv0 32)))))
 (let ((?x19411 (ite (and (distinct ((_ extract 5 5) C2) (_ bv0 1)) true) (_ bv5 32) (ite (and (distinct ((_ extract 4 4) C2) (_ bv0 1)) true) (_ bv4 32) (_ bv3 32)))))
 (let ((?x24897 (ite (and (distinct ((_ extract 8 8) C2) (_ bv0 1)) true) (_ bv8 32) (ite (and (distinct ((_ extract 7 7) C2) (_ bv0 1)) true) (_ bv7 32) (_ bv6 32)))))
 (let ((?x4345 (ite (and (distinct ((_ extract 10 9) C2) (_ bv0 2)) true) (ite (and (distinct ((_ extract 10 10) C2) (_ bv0 1)) true) (_ bv10 32) (_ bv9 32)) ?x24897)))
 (let ((?x11808 (ite (and (distinct ((_ extract 10 6) C2) (_ bv0 5)) true) ?x4345 (ite (and (distinct ((_ extract 5 3) C2) (_ bv0 3)) true) ?x19411 ?x8965))))
 (and (and (and (distinct C1 (_ bv0 23)) true) (= (bvand C1 (bvsub C1 (_ bv1 23))) (_ bv0 23))) (and (and (distinct C2 (_ bv0 11)) true) (= (bvand C2 (bvsub C2 (_ bv1 11))) (_ bv0 11))) (bvslt ?x11808 (ite (and (distinct ((_ extract 22 12) C1) (_ bv0 11)) true) ?x1668 ?x12768)) $x13829))))))))))))))))))))))))))))))))))))
(check-sat)
