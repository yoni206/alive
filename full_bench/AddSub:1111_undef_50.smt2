(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun C2 () (_ BitVec 56))
(declare-fun C1 () (_ BitVec 56))
(assert
 (let ((?x29126 (ite (and (distinct ((_ extract 3 2) C2) (_ bv0 2)) true) (ite (and (distinct ((_ extract 3 3) C2) (_ bv0 1)) true) (_ bv3 56) (_ bv2 56)) (ite (and (distinct ((_ extract 1 1) C2) (_ bv0 1)) true) (_ bv1 56) (_ bv0 56)))))
 (let ((?x29156 (ite (and (distinct ((_ extract 6 6) C2) (_ bv0 1)) true) (_ bv6 56) (ite (and (distinct ((_ extract 5 5) C2) (_ bv0 1)) true) (_ bv5 56) (_ bv4 56)))))
 (let ((?x29192 (ite (and (distinct ((_ extract 10 9) C2) (_ bv0 2)) true) (ite (and (distinct ((_ extract 10 10) C2) (_ bv0 1)) true) (_ bv10 56) (_ bv9 56)) (ite (and (distinct ((_ extract 8 8) C2) (_ bv0 1)) true) (_ bv8 56) (_ bv7 56)))))
 (let ((?x29233 (ite (and (distinct ((_ extract 13 13) C2) (_ bv0 1)) true) (_ bv13 56) (ite (and (distinct ((_ extract 12 12) C2) (_ bv0 1)) true) (_ bv12 56) (_ bv11 56)))))
 (let ((?x29119 (ite (and (distinct ((_ extract 13 7) C2) (_ bv0 7)) true) (ite (and (distinct ((_ extract 13 11) C2) (_ bv0 3)) true) ?x29233 ?x29192) (ite (and (distinct ((_ extract 6 4) C2) (_ bv0 3)) true) ?x29156 ?x29126))))
 (let ((?x29272 (ite (and (distinct ((_ extract 17 16) C2) (_ bv0 2)) true) (ite (and (distinct ((_ extract 17 17) C2) (_ bv0 1)) true) (_ bv17 56) (_ bv16 56)) (ite (and (distinct ((_ extract 15 15) C2) (_ bv0 1)) true) (_ bv15 56) (_ bv14 56)))))
 (let ((?x29307 (ite (and (distinct ((_ extract 20 20) C2) (_ bv0 1)) true) (_ bv20 56) (ite (and (distinct ((_ extract 19 19) C2) (_ bv0 1)) true) (_ bv19 56) (_ bv18 56)))))
 (let ((?x29090 (ite (and (distinct ((_ extract 24 23) C2) (_ bv0 2)) true) (ite (and (distinct ((_ extract 24 24) C2) (_ bv0 1)) true) (_ bv24 56) (_ bv23 56)) (ite (and (distinct ((_ extract 22 22) C2) (_ bv0 1)) true) (_ bv22 56) (_ bv21 56)))))
 (let ((?x29159 (ite (and (distinct ((_ extract 27 27) C2) (_ bv0 1)) true) (_ bv27 56) (ite (and (distinct ((_ extract 26 26) C2) (_ bv0 1)) true) (_ bv26 56) (_ bv25 56)))))
 (let ((?x29265 (ite (and (distinct ((_ extract 27 21) C2) (_ bv0 7)) true) (ite (and (distinct ((_ extract 27 25) C2) (_ bv0 3)) true) ?x29159 ?x29090) (ite (and (distinct ((_ extract 20 18) C2) (_ bv0 3)) true) ?x29307 ?x29272))))
 (let ((?x29262 (ite (and (distinct ((_ extract 31 30) C2) (_ bv0 2)) true) (ite (and (distinct ((_ extract 31 31) C2) (_ bv0 1)) true) (_ bv31 56) (_ bv30 56)) (ite (and (distinct ((_ extract 29 29) C2) (_ bv0 1)) true) (_ bv29 56) (_ bv28 56)))))
 (let ((?x28883 (ite (and (distinct ((_ extract 34 34) C2) (_ bv0 1)) true) (_ bv34 56) (ite (and (distinct ((_ extract 33 33) C2) (_ bv0 1)) true) (_ bv33 56) (_ bv32 56)))))
 (let ((?x28794 (ite (and (distinct ((_ extract 38 37) C2) (_ bv0 2)) true) (ite (and (distinct ((_ extract 38 38) C2) (_ bv0 1)) true) (_ bv38 56) (_ bv37 56)) (ite (and (distinct ((_ extract 36 36) C2) (_ bv0 1)) true) (_ bv36 56) (_ bv35 56)))))
 (let ((?x28762 (ite (and (distinct ((_ extract 41 41) C2) (_ bv0 1)) true) (_ bv41 56) (ite (and (distinct ((_ extract 40 40) C2) (_ bv0 1)) true) (_ bv40 56) (_ bv39 56)))))
 (let ((?x29250 (ite (and (distinct ((_ extract 41 35) C2) (_ bv0 7)) true) (ite (and (distinct ((_ extract 41 39) C2) (_ bv0 3)) true) ?x28762 ?x28794) (ite (and (distinct ((_ extract 34 32) C2) (_ bv0 3)) true) ?x28883 ?x29262))))
 (let ((?x28681 (ite (and (distinct ((_ extract 45 44) C2) (_ bv0 2)) true) (ite (and (distinct ((_ extract 45 45) C2) (_ bv0 1)) true) (_ bv45 56) (_ bv44 56)) (ite (and (distinct ((_ extract 43 43) C2) (_ bv0 1)) true) (_ bv43 56) (_ bv42 56)))))
 (let ((?x28633 (ite (and (distinct ((_ extract 48 48) C2) (_ bv0 1)) true) (_ bv48 56) (ite (and (distinct ((_ extract 47 47) C2) (_ bv0 1)) true) (_ bv47 56) (_ bv46 56)))))
 (let ((?x29117 (ite (and (distinct ((_ extract 52 51) C2) (_ bv0 2)) true) (ite (and (distinct ((_ extract 52 52) C2) (_ bv0 1)) true) (_ bv52 56) (_ bv51 56)) (ite (and (distinct ((_ extract 50 50) C2) (_ bv0 1)) true) (_ bv50 56) (_ bv49 56)))))
 (let ((?x29146 (ite (and (distinct ((_ extract 55 55) C2) (_ bv0 1)) true) (_ bv55 56) (ite (and (distinct ((_ extract 54 54) C2) (_ bv0 1)) true) (_ bv54 56) (_ bv53 56)))))
 (let ((?x28670 (ite (and (distinct ((_ extract 55 49) C2) (_ bv0 7)) true) (ite (and (distinct ((_ extract 55 53) C2) (_ bv0 3)) true) ?x29146 ?x29117) (ite (and (distinct ((_ extract 48 46) C2) (_ bv0 3)) true) ?x28633 ?x28681))))
 (let ((?x29112 (ite (and (distinct ((_ extract 55 28) C2) (_ bv0 28)) true) (ite (and (distinct ((_ extract 55 42) C2) (_ bv0 14)) true) ?x28670 ?x29250) (ite (and (distinct ((_ extract 27 14) C2) (_ bv0 14)) true) ?x29265 ?x29119))))
 (let ((?x29106 (bvsub (_ bv56 56) (bvsub (bvsub (_ bv56 56) ?x29112) (_ bv1 56)))))
 (let (($x29093 (bvult ?x29106 (_ bv56 56))))
 (let (($x29063 (not (= (bvand C2 (bvshl (_ bv72057594037927935 56) ?x29106)) (_ bv0 56)))))
 (let (($x29075 (and (and (distinct C2 (_ bv0 56)) true) (= (bvand C2 (bvsub C2 (_ bv1 56))) (_ bv0 56)))))
 (let (($x29082 (= C1 (bvneg C2))))
 (and $x29082 $x29075 $x29063 (not (and $x29093 $x29093))))))))))))))))))))))))))))))
(check-sat)
