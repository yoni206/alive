(set-info :status unknown)
(declare-fun |ana_MaskedValueIsZero(%A, lshr(-1, countLeadingZeros(C)))| () (_ BitVec 1))
(declare-fun C () (_ BitVec 25))
(declare-fun %A () (_ BitVec 25))
(assert
 (let (($x20029 (= |ana_MaskedValueIsZero(%A, lshr(-1, countLeadingZeros(C)))| (_ bv1 1))))
 (let ((?x18809 (ite (= ((_ extract 1 1) C) (_ bv1 1)) (_ bv23 25) (ite (= ((_ extract 0 0) C) (_ bv1 1)) (_ bv24 25) (_ bv25 25)))))
 (let ((?x17457 (ite (= ((_ extract 3 3) C) (_ bv1 1)) (_ bv21 25) (ite (= ((_ extract 2 2) C) (_ bv1 1)) (_ bv22 25) ?x18809))))
 (let ((?x818 (ite (= ((_ extract 5 5) C) (_ bv1 1)) (_ bv19 25) (ite (= ((_ extract 4 4) C) (_ bv1 1)) (_ bv20 25) ?x17457))))
 (let ((?x364 (ite (= ((_ extract 7 7) C) (_ bv1 1)) (_ bv17 25) (ite (= ((_ extract 6 6) C) (_ bv1 1)) (_ bv18 25) ?x818))))
 (let ((?x21528 (ite (= ((_ extract 9 9) C) (_ bv1 1)) (_ bv15 25) (ite (= ((_ extract 8 8) C) (_ bv1 1)) (_ bv16 25) ?x364))))
 (let ((?x163 (ite (= ((_ extract 11 11) C) (_ bv1 1)) (_ bv13 25) (ite (= ((_ extract 10 10) C) (_ bv1 1)) (_ bv14 25) ?x21528))))
 (let ((?x20858 (ite (= ((_ extract 13 13) C) (_ bv1 1)) (_ bv11 25) (ite (= ((_ extract 12 12) C) (_ bv1 1)) (_ bv12 25) ?x163))))
 (let ((?x1330 (ite (= ((_ extract 15 15) C) (_ bv1 1)) (_ bv9 25) (ite (= ((_ extract 14 14) C) (_ bv1 1)) (_ bv10 25) ?x20858))))
 (let ((?x8090 (ite (= ((_ extract 17 17) C) (_ bv1 1)) (_ bv7 25) (ite (= ((_ extract 16 16) C) (_ bv1 1)) (_ bv8 25) ?x1330))))
 (let ((?x13927 (ite (= ((_ extract 19 19) C) (_ bv1 1)) (_ bv5 25) (ite (= ((_ extract 18 18) C) (_ bv1 1)) (_ bv6 25) ?x8090))))
 (let ((?x17959 (ite (= ((_ extract 21 21) C) (_ bv1 1)) (_ bv3 25) (ite (= ((_ extract 20 20) C) (_ bv1 1)) (_ bv4 25) ?x13927))))
 (let ((?x24304 (ite (= ((_ extract 23 23) C) (_ bv1 1)) (_ bv1 25) (ite (= ((_ extract 22 22) C) (_ bv1 1)) (_ bv2 25) ?x17959))))
 (let (($x23834 (= (bvand %A (bvlshr (_ bv33554431 25) (ite (= ((_ extract 24 24) C) (_ bv1 1)) (_ bv0 25) ?x24304))) (_ bv0 25))))
 (and (=> $x20029 $x23834) $x20029 false))))))))))))))))
(check-sat)
