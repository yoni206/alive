(set-info :status unknown)
(declare-fun mem0 () (_ BitVec 8))
(declare-fun %p2 () (_ BitVec 64))
(declare-fun idx () (_ BitVec 64))
(declare-fun %p1 () (_ BitVec 64))
(declare-fun |ana_equivalentAddressValues(%p1, %p2)| () (_ BitVec 1))
(assert
 (let ((?x10093 (concat (concat (concat (concat (concat mem0 mem0) mem0) mem0) mem0) mem0)))
 (let ((?x19564 (concat ?x10093 ((_ extract 3 0) mem0))))
 (let (($x8881 (or true true)))
 (let (($x15642 (and (distinct %p2 (_ bv0 64)) true)))
 (let (($x16702 (and (distinct %p1 (_ bv0 64)) true)))
 (let ((?x14303 (ite (and $x16702 $x8881 $x16702 $x8881 $x16702 $x8881 $x15642 $x8881 (= idx %p2)) (concat ((_ extract 7 4) mem0) ((_ extract 3 0) ?x19564)) mem0)))
 (let (($x18818 (and $x16702 $x8881 $x16702 $x8881 $x16702 $x8881 $x15642 $x8881 (= idx (bvadd (bvadd %p2 (_ bv1 64)) (_ bv0 64))))))
 (let (($x16243 (and $x16702 $x8881 $x16702 $x8881 $x16702 $x8881 $x15642 $x8881 (= idx (bvadd (bvadd %p2 (_ bv1 64)) (_ bv1 64))))))
 (let (($x6657 (and $x16702 $x8881 $x16702 $x8881 $x16702 $x8881 $x15642 $x8881 (= idx (bvadd (bvadd %p2 (_ bv1 64)) (_ bv2 64))))))
 (let ((?x14632 (ite $x6657 ((_ extract 27 20) ?x19564) (ite $x16243 ((_ extract 19 12) ?x19564) (ite $x18818 ((_ extract 11 4) ?x19564) ?x14303)))))
 (let (($x13808 (and $x16702 $x8881 $x16702 $x8881 $x16702 $x8881 $x15642 $x8881 (= idx (bvadd (bvadd %p2 (_ bv1 64)) (_ bv3 64))))))
 (let (($x18864 (and $x16702 $x8881 $x16702 $x8881 $x16702 $x8881 $x15642 $x8881 (= idx (bvadd (bvadd %p2 (_ bv1 64)) (_ bv4 64))))))
 (let (($x11187 (and $x16702 $x8881 $x16702 $x8881 $x16702 $x8881 $x15642 $x8881 (= idx (bvadd (bvadd %p2 (_ bv1 64)) (_ bv5 64))))))
 (let ((?x8433 (ite $x11187 ((_ extract 51 44) ?x19564) (ite $x18864 ((_ extract 43 36) ?x19564) (ite $x13808 ((_ extract 35 28) ?x19564) ?x14632)))))
 (let (($x8148 (= |ana_equivalentAddressValues(%p1, %p2)| (_ bv1 1))))
 (and (=> $x8148 (= %p1 %p2)) $x8148 (and (distinct ?x8433 mem0) true))))))))))))))))))
(check-sat)
