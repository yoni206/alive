(set-info :source |
 Generated by Alive 0.1
 More info in N. P. Lopes, D. Menendez, S. Nagarakatte, J. Regehr.
 Provably Correct Peephole Optimizations with Alive. In PLDI'15.
|)

(set-info :status unknown)
(declare-fun mem0 () (_ BitVec 8))
(declare-fun C2 () (_ BitVec 57))
(declare-fun C1 () (_ BitVec 57))
(assert
 (let (($x927 (and (distinct mem0 mem0) true)))
 (let (($x13682 (= C1 (bvadd C2 (_ bv1 57)))))
 (let ((?x13537 (ite (= ((_ extract 55 55) C1) (_ bv1 1)) (_ bv55 32) (ite (= ((_ extract 56 56) C1) (_ bv1 1)) (_ bv56 32) (_ bv57 32)))))
 (let ((?x13531 (ite (= ((_ extract 53 53) C1) (_ bv1 1)) (_ bv53 32) (ite (= ((_ extract 54 54) C1) (_ bv1 1)) (_ bv54 32) ?x13537))))
 (let ((?x13524 (ite (= ((_ extract 51 51) C1) (_ bv1 1)) (_ bv51 32) (ite (= ((_ extract 52 52) C1) (_ bv1 1)) (_ bv52 32) ?x13531))))
 (let ((?x13518 (ite (= ((_ extract 49 49) C1) (_ bv1 1)) (_ bv49 32) (ite (= ((_ extract 50 50) C1) (_ bv1 1)) (_ bv50 32) ?x13524))))
 (let ((?x13514 (ite (= ((_ extract 47 47) C1) (_ bv1 1)) (_ bv47 32) (ite (= ((_ extract 48 48) C1) (_ bv1 1)) (_ bv48 32) ?x13518))))
 (let ((?x13507 (ite (= ((_ extract 45 45) C1) (_ bv1 1)) (_ bv45 32) (ite (= ((_ extract 46 46) C1) (_ bv1 1)) (_ bv46 32) ?x13514))))
 (let ((?x13503 (ite (= ((_ extract 43 43) C1) (_ bv1 1)) (_ bv43 32) (ite (= ((_ extract 44 44) C1) (_ bv1 1)) (_ bv44 32) ?x13507))))
 (let ((?x13496 (ite (= ((_ extract 41 41) C1) (_ bv1 1)) (_ bv41 32) (ite (= ((_ extract 42 42) C1) (_ bv1 1)) (_ bv42 32) ?x13503))))
 (let ((?x13492 (ite (= ((_ extract 39 39) C1) (_ bv1 1)) (_ bv39 32) (ite (= ((_ extract 40 40) C1) (_ bv1 1)) (_ bv40 32) ?x13496))))
 (let ((?x13488 (ite (= ((_ extract 37 37) C1) (_ bv1 1)) (_ bv37 32) (ite (= ((_ extract 38 38) C1) (_ bv1 1)) (_ bv38 32) ?x13492))))
 (let ((?x13481 (ite (= ((_ extract 35 35) C1) (_ bv1 1)) (_ bv35 32) (ite (= ((_ extract 36 36) C1) (_ bv1 1)) (_ bv36 32) ?x13488))))
 (let ((?x13474 (ite (= ((_ extract 33 33) C1) (_ bv1 1)) (_ bv33 32) (ite (= ((_ extract 34 34) C1) (_ bv1 1)) (_ bv34 32) ?x13481))))
 (let ((?x13467 (ite (= ((_ extract 31 31) C1) (_ bv1 1)) (_ bv31 32) (ite (= ((_ extract 32 32) C1) (_ bv1 1)) (_ bv32 32) ?x13474))))
 (let ((?x13463 (ite (= ((_ extract 29 29) C1) (_ bv1 1)) (_ bv29 32) (ite (= ((_ extract 30 30) C1) (_ bv1 1)) (_ bv30 32) ?x13467))))
 (let ((?x13456 (ite (= ((_ extract 27 27) C1) (_ bv1 1)) (_ bv27 32) (ite (= ((_ extract 28 28) C1) (_ bv1 1)) (_ bv28 32) ?x13463))))
 (let ((?x13449 (ite (= ((_ extract 25 25) C1) (_ bv1 1)) (_ bv25 32) (ite (= ((_ extract 26 26) C1) (_ bv1 1)) (_ bv26 32) ?x13456))))
 (let ((?x13445 (ite (= ((_ extract 23 23) C1) (_ bv1 1)) (_ bv23 32) (ite (= ((_ extract 24 24) C1) (_ bv1 1)) (_ bv24 32) ?x13449))))
 (let ((?x13438 (ite (= ((_ extract 21 21) C1) (_ bv1 1)) (_ bv21 32) (ite (= ((_ extract 22 22) C1) (_ bv1 1)) (_ bv22 32) ?x13445))))
 (let ((?x13660 (ite (= ((_ extract 19 19) C1) (_ bv1 1)) (_ bv19 32) (ite (= ((_ extract 20 20) C1) (_ bv1 1)) (_ bv20 32) ?x13438))))
 (let ((?x13662 (ite (= ((_ extract 17 17) C1) (_ bv1 1)) (_ bv17 32) (ite (= ((_ extract 18 18) C1) (_ bv1 1)) (_ bv18 32) ?x13660))))
 (let ((?x13664 (ite (= ((_ extract 15 15) C1) (_ bv1 1)) (_ bv15 32) (ite (= ((_ extract 16 16) C1) (_ bv1 1)) (_ bv16 32) ?x13662))))
 (let ((?x13666 (ite (= ((_ extract 13 13) C1) (_ bv1 1)) (_ bv13 32) (ite (= ((_ extract 14 14) C1) (_ bv1 1)) (_ bv14 32) ?x13664))))
 (let ((?x13668 (ite (= ((_ extract 11 11) C1) (_ bv1 1)) (_ bv11 32) (ite (= ((_ extract 12 12) C1) (_ bv1 1)) (_ bv12 32) ?x13666))))
 (let ((?x13670 (ite (= ((_ extract 9 9) C1) (_ bv1 1)) (_ bv9 32) (ite (= ((_ extract 10 10) C1) (_ bv1 1)) (_ bv10 32) ?x13668))))
 (let ((?x13672 (ite (= ((_ extract 7 7) C1) (_ bv1 1)) (_ bv7 32) (ite (= ((_ extract 8 8) C1) (_ bv1 1)) (_ bv8 32) ?x13670))))
 (let ((?x13674 (ite (= ((_ extract 5 5) C1) (_ bv1 1)) (_ bv5 32) (ite (= ((_ extract 6 6) C1) (_ bv1 1)) (_ bv6 32) ?x13672))))
 (let ((?x13676 (ite (= ((_ extract 3 3) C1) (_ bv1 1)) (_ bv3 32) (ite (= ((_ extract 4 4) C1) (_ bv1 1)) (_ bv4 32) ?x13674))))
 (let ((?x13678 (ite (= ((_ extract 1 1) C1) (_ bv1 1)) (_ bv1 32) (ite (= ((_ extract 2 2) C1) (_ bv1 1)) (_ bv2 32) ?x13676))))
 (let (($x13680 (= (ite (= ((_ extract 0 0) C1) (_ bv1 1)) (_ bv0 32) ?x13678) (_ bv0 32))))
 (and $x13680 $x13682 $x927)))))))))))))))))))))))))))))))))
(check-sat)
