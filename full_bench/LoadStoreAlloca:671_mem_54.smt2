(set-info :status unknown)
(declare-fun mem0 () (_ BitVec 8))
(declare-fun %y () (_ BitVec 56))
(declare-fun %p2 () (_ BitVec 64))
(declare-fun idx () (_ BitVec 64))
(declare-fun %x () (_ BitVec 56))
(declare-fun %p1 () (_ BitVec 64))
(declare-fun |ana_equivalentAddressValues(%p1, %p2)| () (_ BitVec 1))
(assert
 (let (($x3641 (or true true)))
 (let (($x4757 (and (distinct %p2 (_ bv0 64)) true)))
 (let ((?x15136 (ite (and $x4757 $x3641 (= idx (bvadd %p2 (_ bv0 64)))) ((_ extract 7 0) %y) mem0)))
 (let ((?x5713 (ite (and $x4757 $x3641 (= idx (bvadd %p2 (_ bv1 64)))) ((_ extract 15 8) %y) ?x15136)))
 (let ((?x8920 (ite (and $x4757 $x3641 (= idx (bvadd %p2 (_ bv2 64)))) ((_ extract 23 16) %y) ?x5713)))
 (let ((?x2094 (ite (and $x4757 $x3641 (= idx (bvadd %p2 (_ bv3 64)))) ((_ extract 31 24) %y) ?x8920)))
 (let ((?x9931 (ite (and $x4757 $x3641 (= idx (bvadd %p2 (_ bv4 64)))) ((_ extract 39 32) %y) ?x2094)))
 (let ((?x1225 (ite (and $x4757 $x3641 (= idx (bvadd %p2 (_ bv5 64)))) ((_ extract 47 40) %y) ?x9931)))
 (let ((?x9066 (ite (and $x4757 $x3641 (= idx (bvadd %p2 (_ bv6 64)))) ((_ extract 55 48) %y) ?x1225)))
 (let ((?x23569 (ite (and (and (distinct %p1 (_ bv0 64)) true) $x3641 (= idx (bvadd %p1 (_ bv0 64)))) ((_ extract 7 0) %x) mem0)))
 (let ((?x3878 (ite (and (and (distinct %p1 (_ bv0 64)) true) $x3641 (= idx (bvadd %p1 (_ bv1 64)))) ((_ extract 15 8) %x) ?x23569)))
 (let ((?x11719 (ite (and (and (distinct %p1 (_ bv0 64)) true) $x3641 (= idx (bvadd %p1 (_ bv2 64)))) ((_ extract 23 16) %x) ?x3878)))
 (let ((?x6106 (ite (and (and (distinct %p1 (_ bv0 64)) true) $x3641 (= idx (bvadd %p1 (_ bv3 64)))) ((_ extract 31 24) %x) ?x11719)))
 (let ((?x20176 (ite (and (and (distinct %p1 (_ bv0 64)) true) $x3641 (= idx (bvadd %p1 (_ bv4 64)))) ((_ extract 39 32) %x) ?x6106)))
 (let ((?x7848 (ite (and (and (distinct %p1 (_ bv0 64)) true) $x3641 (= idx (bvadd %p1 (_ bv5 64)))) ((_ extract 47 40) %x) ?x20176)))
 (let ((?x22048 (ite (and (and (distinct %p1 (_ bv0 64)) true) $x3641 (= idx (bvadd %p1 (_ bv6 64)))) ((_ extract 55 48) %x) ?x7848)))
 (let (($x17212 (and (distinct %p1 (_ bv0 64)) true)))
 (let ((?x10015 (ite (and $x17212 $x3641 $x4757 $x3641 (= idx (bvadd %p2 (_ bv0 64)))) ((_ extract 7 0) %y) ?x22048)))
 (let ((?x16688 (ite (and $x17212 $x3641 $x4757 $x3641 (= idx (bvadd %p2 (_ bv1 64)))) ((_ extract 15 8) %y) ?x10015)))
 (let ((?x639 (ite (and $x17212 $x3641 $x4757 $x3641 (= idx (bvadd %p2 (_ bv2 64)))) ((_ extract 23 16) %y) ?x16688)))
 (let ((?x389 (ite (and $x17212 $x3641 $x4757 $x3641 (= idx (bvadd %p2 (_ bv3 64)))) ((_ extract 31 24) %y) ?x639)))
 (let ((?x21869 (ite (and $x17212 $x3641 $x4757 $x3641 (= idx (bvadd %p2 (_ bv4 64)))) ((_ extract 39 32) %y) ?x389)))
 (let ((?x16460 (ite (and $x17212 $x3641 $x4757 $x3641 (= idx (bvadd %p2 (_ bv5 64)))) ((_ extract 47 40) %y) ?x21869)))
 (let ((?x6572 (ite (and $x17212 $x3641 $x4757 $x3641 (= idx (bvadd %p2 (_ bv6 64)))) ((_ extract 55 48) %y) ?x16460)))
 (let (($x8088 (= |ana_equivalentAddressValues(%p1, %p2)| (_ bv1 1))))
 (and (=> $x8088 (= %p1 %p2)) $x8088 (and (distinct ?x6572 ?x9066) true))))))))))))))))))))))))))))
(check-sat)
