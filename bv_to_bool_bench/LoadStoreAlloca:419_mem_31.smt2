
(declare-fun mem0 () (_ BitVec 8))
(declare-fun %x () (_ BitVec 32))
(declare-fun %p1 () (_ BitVec 64))
(declare-fun idx () (_ BitVec 64))
(declare-fun |ana_equivalentAddressValues(%p1, %p2)| () (_ BitVec 1))
(declare-fun %p2 () (_ BitVec 64))
(assert (let ((_let_0 (= |ana_equivalentAddressValues(%p1, %p2)| (_ bv1 1)))) (let ((_let_1 (not (= %p1 (_ bv0 64))))) (let ((_let_2 (ite (and (= idx (bvadd %p1 (_ bv3 64))) _let_1) ((_ extract 31 24) %x) (ite (and (= idx (bvadd %p1 (_ bv2 64))) _let_1) ((_ extract 23 16) %x) (ite (and (= idx (bvadd %p1 (_ bv1 64))) _let_1) ((_ extract 15 8) %x) (ite (and (= idx (bvadd %p1 (_ bv0 64))) _let_1) ((_ extract 7 0) %x) mem0)))))) (and (=> _let_0 (= %p1 %p2)) _let_0 (not (= _let_2 _let_2)))))))
(assert true)
(check-sat)