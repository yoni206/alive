
(declare-fun %Y () (_ BitVec 11))
(declare-fun C2 () (_ BitVec 11))
(declare-fun C1 () (_ BitVec 1))
(declare-fun %X () (_ BitVec 1))
(assert (let ((_let_0 (not (= ((_ extract 10 6) C2) (_ bv0 5))))) (let ((_let_1 (not (= ((_ extract 10 9) C2) (_ bv0 2))))) (let ((_let_2 (not (= ((_ extract 10 10) C2) (_ bv0 1))))) (let ((_let_3 (not (= ((_ extract 8 8) C2) (_ bv0 1))))) (let ((_let_4 (not (= ((_ extract 7 7) C2) (_ bv0 1))))) (let ((_let_5 (not (= ((_ extract 5 3) C2) (_ bv0 3))))) (let ((_let_6 (not (= ((_ extract 5 5) C2) (_ bv0 1))))) (let ((_let_7 (not (= ((_ extract 4 4) C2) (_ bv0 1))))) (let ((_let_8 (not (= ((_ extract 2 2) C2) (_ bv0 1))))) (let ((_let_9 (not (= ((_ extract 1 1) C2) (_ bv0 1))))) (let ((_let_10 (= C1 (_ bv1 1)))) (and (bvslt (ite _let_0 (ite _let_1 (ite _let_2 (_ bv10 32) (_ bv9 32)) (ite _let_3 (_ bv8 32) (ite _let_4 (_ bv7 32) (_ bv6 32)))) (ite _let_5 (ite _let_6 (_ bv5 32) (ite _let_7 (_ bv4 32) (_ bv3 32))) (ite _let_8 (_ bv2 32) (ite _let_9 (_ bv1 32) (_ bv0 32))))) (_ bv0 32)) (not (and _let_10 (= (bvsub C1 (_ bv1 1)) (_ bv1 1)))) (= (bvand C2 (bvsub C2 (_ bv1 11))) (_ bv0 11)) (not (= (ite (not (and (= %X (_ bv1 1)) _let_10)) %Y (bvor %Y C2)) (bvor ((_ zero_extend 10) (bvlshr (bvand %X C1) (bvsub (_ bv0 1) (ite _let_0 (ite _let_1 (ite _let_2 (_ bv0 1) (_ bv1 1)) (ite _let_3 (_ bv0 1) (ite _let_4 (_ bv1 1) (_ bv0 1)))) (ite _let_5 (ite _let_6 (_ bv1 1) (ite _let_7 (_ bv0 1) (_ bv1 1))) (ite _let_8 (_ bv0 1) (ite _let_9 (_ bv1 1) (_ bv0 1)))))))) %Y))) _let_10 (not (= C2 (_ bv0 11))))))))))))))))
(assert true)
(check-sat)