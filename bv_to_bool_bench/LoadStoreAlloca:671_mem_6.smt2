
(declare-fun mem0 () (_ BitVec 8))
(declare-fun %y () (_ BitVec 7))
(declare-fun %p2 () (_ BitVec 64))
(declare-fun idx () (_ BitVec 64))
(declare-fun %x () (_ BitVec 7))
(declare-fun %p1 () (_ BitVec 64))
(declare-fun |ana_equivalentAddressValues(%p1, %p2)| () (_ BitVec 1))
(assert (let ((_let_0 (= idx %p2))) (let ((_let_1 ((_ extract 7 7) mem0))) (let ((_let_2 ((_ extract 6 0) %y))) (let ((_let_3 (concat _let_1 ((_ extract 6 0) %x)))) (let ((_let_4 (= |ana_equivalentAddressValues(%p1, %p2)| (_ bv1 1)))) (let ((_let_5 (not (= %p1 (_ bv0 64))))) (let ((_let_6 (not (= %p2 (_ bv0 64))))) (and (=> _let_4 (= %p1 %p2)) _let_4 (not (= (ite (and _let_0 _let_5 _let_6) (concat ((_ extract 7 7) (ite (and (= %p2 %p1) _let_5) _let_3 mem0)) _let_2) (ite (and (= idx %p1) _let_5) _let_3 mem0)) (ite (and _let_0 _let_6) (concat _let_1 _let_2) mem0))))))))))))
(assert true)
(check-sat)