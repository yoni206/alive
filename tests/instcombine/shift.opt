Name: InstCombineShift46
Pre: isPowerOf2(C)
%Op1 = srem i31 %A, C
%r = shl %Op0, %Op1
  =>
%a = and %A, C-1
%r = shl %Op0, %a


Name: InstCombineShift46-2
Pre: isPowerOf2(C)
%Op1 = srem i29 %A, C
%r = ashr %Op0, %Op1
  =>
%a = and %A, C-1
%r = ashr %Op0, %a


Name: InstCombineShift46-3
Pre: isPowerOf2(C)
%Op1 = srem i27 %A, C
%r = lshr %Op0, %Op1
  =>
%a = and %A, C-1
%r = lshr %Op0, %a


Name: InstCombineShift228
Pre: zext(C1+C2) >= width(C1)
%Op0 = shl %X, C1
%r = shl %Op0, C2
  =>
%r = 0


Name: InstCombineShift234
Pre: zext(C1+C2) < width(C2)
%Op0 = shl i33 %X, C1
%r = shl %Op0, C2
  =>
%r = shl %X, C1+C2


Name: InstCombineShift239
%Op0 = shl %X, C
%r = lshr %Op0, C
  =>
%r = and %X, -1 u>> C


Name: InstCombineShift252
Pre: C1 > C2 && MaskedValueIsZero(%X, (-1 u>> (width(C2)-C2)) << (width(C1)-C1))
%Op0 = shl i27 %X, C1
%r = lshr %Op0, C2
  =>
%r = shl %X, C1-C2


Name: InstCombineShift270
Pre: zext(C1+C2) >= width(C1)
%Op0 = lshr %X, C1
%r = lshr %Op0, C2
  =>
%r = 0


Name: InstCombineShift274
Pre: zext(C1+C2) < width(C1)
%Op0 = lshr i33 %X, C1
%r = lshr %Op0, C2
  =>
%r = lshr %X, C1+C2


Name: InstCombineShift279
%Op0 = lshr %X, C
%r = shl %Op0, C
  =>
%r = and %X, -1 << C


Name: InstCombineShift292
Pre: C1 > C2 && MaskedValueIsZero(%X, (-1 u>> (width(C2)-C2))<<(C1-C2))
%Op0 = lshr i31 %X, C1
%r = shl %Op0, C2
  =>
%r = lshr %X, C1-C2


Name: InstCombineShift351
%Op0 = mul i7 %X, C1
%r = shl %Op0, C2
  =>
%r = mul %X, C1 << C2


Name: InstCombineShift366-1
%TrOp = shl %X, C1
%Op0 = trunc %TrOp
%r = shl i17 %Op0, C2
  =>
%s1 = shl %TrOp, zext(C2)
%and = and %s1, ((1<<width(C2))-1) << zext(C2)
%r = trunc %and


Name: InstCombineShift366-2
%TrOp = lshr %X, C1
%Op0 = trunc %TrOp
%r = shl i17 %Op0, C2
  =>
%s1 = shl %TrOp, zext(C2)
%and = and %s1, ((1<<width(C2))-1) << zext(C2)
%r = trunc %and


Name: InstCombineShift366-3
%TrOp = ashr %X, C1
%Op0 = trunc %TrOp
%r = shl i17 %Op0, C2
  =>
%s1 = shl %TrOp, zext(C2)
%and = and %s1, ((1<<width(C2))-1) << zext(C2)
%r = trunc %and


Name: InstCombineShift366-4
%TrOp = shl %X, C1
%Op0 = trunc %TrOp
%r = lshr i17 %Op0, C2
  =>
%s1 = lshr %TrOp, zext(C2)
%and = and %s1, ((1<<width(C2))-1) u>> zext(C2)
%r = trunc %and


Name: InstCombineShift366-5
%TrOp = lshr %X, C1
%Op0 = trunc %TrOp
%r = lshr i17 %Op0, C2
  =>
%s1 = lshr %TrOp, zext(C2)
%and = and %s1, ((1<<width(C2))-1) u>> zext(C2)
%r = trunc %and


Name: InstCombineShift366-6
%TrOp = ashr %X, C1
%Op0 = trunc %TrOp
%r = lshr i17 %Op0, C2
  =>
%s1 = lshr %TrOp, zext(C2)
%and = and %s1, ((1<<width(C2))-1) u>> zext(C2)
%r = trunc %and


Name: InstCombineShift422-1
%Op1 = lshr i31 %X, C
%Op0 = add %Y, %Op1
%r = shl %Op0, C
  =>
%s = shl %Y, C
%a = add %s, %X
%r = and %a, -1 << C


Name: InstCombineShift422-2
%Op1 = ashr i31 %X, C
%Op0 = add %Y, %Op1
%r = shl %Op0, C
  =>
%s = shl %Y, C
%a = add %s, %X
%r = and %a, -1 << C


Name: InstCombineShift440
%s = lshr %X, C
%Op1 = and %s, C2
%Op0 = xor %Y, %Op1
%r = shl %Op0, C
  =>
%a = and %X, C2 << C
%y2 = shl %Y, C
%r = xor %a, %y2


Name: InstCombineShift458
%s = ashr i31 %X, C
%Op0 = sub %s, %Y
%r = shl %Op0, C
  =>
%s2 = shl %Y, C
%a = sub %X, %s2
%r = and %a, -1<<C


Name: InstCombineShift476
%shr = lshr %X, C
%s = and %shr, C2
%Op0 = or %s, %Y
%r = shl %Op0, C
  =>
%s2 = shl %Y, C
%a = and %X, C2<<C
%r = or %a, %s2


Name: InstCombineShift497a
; FIXME: missing cases
%Op0 = xor %X, C2
%r = lshr %Op0, C
  =>
%s2 = lshr %X, C
%r = xor %s2, C2 u>> C


Name: InstCombineShift497b
Pre: C2 u>> (width(C)-1) == 0
%Op0 = xor %X, C2
%r = ashr %Op0, C
  =>
%s2 = ashr %X, C
%r = xor %s2, C2 >> C


Name: InstCombineShift497c
Pre: C2 u>> (width(C)-1) == 1
%Op0 = and %X, C2
%r = ashr %Op0, C
  =>
%s2 = ashr %X, C
%r = and %s2, C2 >> C


Name: InstCombineShift497d
%Op0 = add %X, C2
%r = shl %Op0, C
  =>
%s2 = shl %X, C
%r = add %s2, C2 << C


Name: InstCombineShift573
Pre: zext(C+C2) >= width(C)
%Op0 = shl %X, C2
%r = shl %Op0, C
  =>
%r = 0


Name: InstCombineShift574
Pre: zext(C+C2) >= width(C)
%Op0 = ashr %X, C2
%r = ashr %Op0, C
  =>
%r = ashr %X, width(C)-1


Name: InstCombineShift577
Pre: zext(C+C2) < width(C)
%Op0 = shl i31 %X, C2
%r = shl %Op0, C
  =>
%r = shl %X, C+C2


Name: InstCombineShift582
%Op0 = shl %X, C
%r = lshr %Op0, C
  =>
%r = and %X, -1 u>> C


Name: InstCombineShift592a
Pre: C1 < C2
%Op0 = ashr exact %X, C1
%r = shl i33 %Op0, C2
  =>
%r = shl %X, C2-C1


Name: InstCombineShift592b
Pre: C1 < C2
%Op0 = ashr exact %X, C1
%r = shl nsw i31 %Op0, C2
  =>
%r = shl nsw %X, C2-C1


Name: InstCombineShift592c
Pre: C1 < C2
%Op0 = ashr exact %X, C1
%r = shl nuw %Op0, C2
  =>
%r = shl nuw i27 %X, C2-C1


Name: InstCombineShift592d
Pre: C1 < C2
%Op0 = lshr exact %X, C1
%r = shl i33 %Op0, C2
  =>
%r = shl %X, C2-C1


Name: InstCombineShift592e
Pre: C1 < C2
%Op0 = lshr exact %X, C1
%r = shl nsw i31 %Op0, C2
  =>
%r = shl nsw %X, C2-C1


Name: InstCombineShift592f
Pre: C1 < C2
%Op0 = lshr exact %X, C1
%r = shl nuw %Op0, C2
  =>
%r = shl nuw i27 %X, C2-C1


Name: InstCombineShift612a
Pre: C1 < C2
%Op0 = shl nuw %X, C1
%r =  lshr i33 %Op0, C2
  =>
%r = lshr %X, C2-C1


Name: InstCombineShift612b
Pre: C1 < C2
%Op0 = shl nuw %X, C1
%r =  lshr exact %Op0, C2
  =>
%r = lshr exact i31 %X, C2-C1


Name: InstCombineShift622
Pre: C1 < C2
%Op0 = shl %X, C1
%r =  lshr i33 %Op0, C2
  =>
%s = lshr %X, C2-C1
%r = and %s, -1 u>> C2


Name: InstCombineShift628
Pre: C1 < C2
%Op0 = shl nsw %X, C1
%r = ashr i33 %Op0, C2
  =>
%r = ashr %X, C2-C1


Name: InstCombineShift628-2
Pre: C1 < C2
%Op0 = shl nsw %X, C1
%r = ashr exact i33 %Op0, C2
  =>
%r = ashr exact %X, C2-C1


Name: InstCombineShift646
Pre: C1 > C2
%Op0 = lshr exact %X, C1
%r = shl i33 %Op0, C2
  =>
%r = lshr exact %X, C1-C2


Name: InstCombineShift646-2
Pre: C1 > C2
%Op0 = ashr exact %X, C1
%r = shl i33 %Op0, C2
  =>
%r = ashr exact %X, C1-C2


Name: InstCombineShift661
Pre: C1 > C2
%Op0 = shl nuw %X, C1
%r = lshr i33 %Op0, C2
  =>
%r = shl nuw %X, C1-C2


Name: InstCombineShift670
Pre: C1 > C2
%Op0 = shl %X, C1
%r = lshr i33 %Op0, C2
  =>
%s = shl %X, C1-C2
%r = and %s, -1 u>> C2


Name: InstCombineShift676
Pre: C1 > C2
%Op0 = shl nsw %X, C1
%r = ashr i33 %Op0, C2
  =>
%r = shl nsw %X, C1-C2


Name: InstCombineShift708
Pre: MaskedValueIsZero(%Op0, -1<<(width(C)-C))
%r = shl %Op0, C
  =>
%r = shl nuw %Op0, C


Name: InstCombineShift717
Pre: ComputeNumSignBits(%Op0) > C
%r = shl %Op0, C
  =>
%r = shl nsw %Op0, C


Name: InstCombineShift724
%Op0 = shl i31 C1, %A
%r = shl %Op0, C2
  =>
%r = shl C1<<C2, %A


Name: InstCombineShift767
Pre: MaskedValueIsZero(%Op0, (1<<C)-1)
%r = lshr %Op0, C
  =>
%r = lshr exact %Op0, C


Name: InstCombineShift807
Pre: C == width(%X)-width(%x)
%X = zext %x
%Op0 = shl %X, C
%r = ashr i33 %Op0, C
  =>
%r = sext %x


Name: InstCombineShift812
Pre: MaskedValueIsZero(%Op0, (1<<C)-1)
%r = ashr %Op0, C
  =>
%r = ashr exact %Op0, C


Name: InstCombineShift821
Pre: MaskedValueIsZero(%Op0, 1<<(width(%r)-1))
%r = ashr %Op0, %Op1
  =>
%r = lshr %Op0, %Op1
